import { v4 } from 'uuid';
import { AuthAgent } from '@leapdev/auth-agent/src/index.umd';
import { Base64 } from 'js-base64';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

var LeapContext = function LeapContext(context, hostInfo) {
  this.context = context;
  this.hostInfo = hostInfo;
};
var HostInfo = function HostInfo(appSessionId, hostType, hostVersion, env, region) {
  this.appSessionId = appSessionId;
  this.hostType = hostType;
  this.hostVersion = hostVersion;
  this.env = env;
  this.region = region;
};

var config = {
  auth: {
    host: {
      dev: {
        au: 'https://auth.dev.leap.services'
      },
      test: {
        au: 'https://login.test.leap365.com.au',
        uk: 'https://login.test.leap365.co.uk',
        us: 'https://login.test.leap365.com',
        ca: 'https://login.test.leap365.ca'
      },
      live: {
        au: 'https://login.leap365.com.au',
        uk: 'https://login.leap365.co.uk',
        us: 'https://login.leap365.com',
        ca: 'https://login.leap365.ca'
      }
    }
  }
};

/**
 * Returns the value of a query string paramter of the current url if exists, undefined otherwise.
 * @param key The name of the parameter
 * @returns The value or undefined
 */
function getQueryStringValue(key, searchInHash) {
  if (searchInHash === void 0) {
    searchInHash = false;
  }
  var result = undefined;
  var locationSection = searchInHash ? window.location.hash : window.location.search;
  if (locationSection && locationSection.length > 1) {
    var keyValues = locationSection.substring(1).split('&');
    var i = 0;
    while (result === undefined && i < keyValues.length) {
      var split = keyValues[i].split('=');
      if (split.length === 2 && split[0] === key) result = split[1];
      i++;
    }
  }
  return result;
}
/**
 * Decodes a JWT token
 * @param token The JWT token
 * @returns The decoded token
 */
function decodeToken(token) {
  if (!token) return undefined;
  try {
    var payload = token.split('.')[1];
    return JSON.parse(atob(payload));
  } catch (e) {
    return undefined;
  }
}

var BaseApi = /*#__PURE__*/function () {
  function BaseApi(requestContext) {
    this.registeredCommands = {};
    var hostInfo = new HostInfo(requestContext.appSessionId, requestContext.host, null, requestContext.env, requestContext.region);
    this._leapContext = new LeapContext(undefined, hostInfo);
    this._isTrustedApp = !!requestContext.trustedApp;
  }
  var _proto = BaseApi.prototype;
  _proto.init = function init(leapAuthClientId) {
    var _this = this;
    //close the window if the user doesn't accept the permissions
    var errMsg = getQueryStringValue('error');
    if (errMsg === 'access_denied') this.system.close();
    return new Promise(function (resolve, reject) {
      _this.registerHostMessageHandler(_this.leapContext.hostInfo.appSessionId, function (_ref) {
        var leapContext = _ref.data;
        _this.deregisterHostMessageHandler(_this.leapContext.hostInfo.appSessionId);
        var leapContextObj = {
          context: leapContext.context,
          hostInfo: _this.leapContext.hostInfo
        };
        if (!leapContext.context || Object.keys(leapContext.context).length === 0 && !!leapContext.matterContext) {
          leapContextObj.context = leapContext.matterContext;
        }
        var clientId = leapAuthClientId;
        //host info, available from LD2.4
        if (!!leapContext.hostInfo) {
          _this._isTrustedApp = leapContext.isTrustedApp;
          leapContextObj.hostInfo = new HostInfo(_this.leapContext.hostInfo.appSessionId, leapContext.hostInfo.hostType, leapContext.hostInfo.hostVersion, leapContext.hostInfo.env, leapContext.hostInfo.region);
          if (!_this.isTrustedApp) {
            //use clientId from the schema for non-trusted apps
            if (!!leapContext.clientId) {
              clientId = leapContext.clientId;
            } else {
              return reject('Failed to load the clientId from the schema');
            }
          } else {
            //trusted apps don't need clientId
            _this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);
            _this.hostRelatedSetup();
            return resolve();
          }
        } else {
          if (_this.isTrustedApp) {
            //TODO: remove when 2.4 is the minimum version
            _this._userToken = leapContext.authtoken;
            _this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);
            _this.hostRelatedSetup();
            return resolve();
          }
        }
        _this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);
        _this.hostRelatedSetup();
        var authEnv = leapContextObj.hostInfo.env.includes('live') ? 'live' : leapContextObj.hostInfo.env;
        var authHost = config.auth.host[authEnv][leapContextObj.hostInfo.region];
        AuthAgent.init({
          authHost: authHost,
          clientId: clientId,
          autoLogin: true,
          autoLogout: false,
          uniqueSession: false,
          scopes: ['*'],
          autoRefreshToken: false
        }).then(function (accessToken) {
          return resolve();
        });
      });
      _this.retrieveContext();
    });
  };
  _proto.getRefreshedAccessToken = function getRefreshedAccessToken() {
    try {
      var _this3 = this;
      if (_this3.isTrustedApp) {
        if (!!_this3.leapContext.hostInfo.hostVersion) {
          var _this3$system$send;
          //fall back to the default userToken if this command has not been implemented yet
          return Promise.resolve((_this3$system$send = _this3.system.send({
            command: 'internal.getAccessToken'
          }, true)) !== null && _this3$system$send !== void 0 ? _this3$system$send : _this3._userToken);
        } else {
          //TODO: remove when LD2.4 is the minimum version
          //only LD2.3 does not have the value for "hostVersion"
          return Promise.resolve(_this3._userToken);
        }
      }
      return Promise.resolve(AuthAgent.getRefreshedAccessToken());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getDecodedRefreshedAccessToken = function getDecodedRefreshedAccessToken() {
    try {
      var _this5 = this;
      return Promise.resolve(_this5.getRefreshedAccessToken()).then(decodeToken);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.getUserInfo = function getUserInfo() {
    try {
      return Promise.resolve(AuthAgent.userInfo());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _proto.registerHostMessageHandler = function registerHostMessageHandler(command, callback) {
    var alreadyRegistered = !!this.registeredCommands[command];
    if (!alreadyRegistered) {
      this.registeredCommands[command] = callback;
    } else {
      throw new Error('Command already registered');
    }
  };
  _proto.deregisterHostMessageHandler = function deregisterHostMessageHandler(command) {
    delete this.registeredCommands[command];
  }
  /**
   * A helper function that makes 2-way call easier. It takes care of registering and deregistering message handler for you.
   * @param request the actual request object from LEAP app
   * @param requestFn a function specifying how a request object should be sent to the host system. It passes the requestId as parameter so that the request function can attach it to the request object.
   * @param responseFn a function specifying how a raw response from the host system should be handled / transformed
   * @return a promise of the final response
   */;
  _proto.twoWayCall = function twoWayCall(request, requestFn, responseFn) {
    var _this6 = this;
    var requestId = v4();
    return new Promise(function (resolve, reject) {
      _this6.registerHostMessageHandler(requestId, function (hostResponse) {
        _this6.deregisterHostMessageHandler(requestId);
        if (hostResponse.isSuccess) {
          resolve(responseFn(hostResponse.data));
        } else {
          reject(new Error(hostResponse.error));
        }
      });
      requestFn(requestId, request);
    });
  };
  _proto.handleCommand = function handleCommand(command, payload) {
    var registeredCommand = this.registeredCommands[command];
    if (!!registeredCommand && !!payload) {
      var params = JSON.parse(payload);
      registeredCommand(params);
    } else if (!!registeredCommand) {
      registeredCommand();
    } else {
      throw new Error('Host command not registered');
    }
  };
  _createClass(BaseApi, [{
    key: "leapContext",
    get: function get() {
      return this._leapContext;
    }
  }, {
    key: "isTrustedApp",
    get: function get() {
      return this._isTrustedApp;
    }
  }]);
  return BaseApi;
}();

var Accounting = /*#__PURE__*/function () {
  function Accounting(fourd) {
    this.fourd = fourd;
  }
  var _proto = Accounting.prototype;
  _proto.createTimeEntry = function createTimeEntry(request) {
    this.fourd.call4Dv2('accounting.createTimeEntry', request);
  };
  _proto.createFeeEntry = function createFeeEntry(request) {
    this.fourd.call4Dv2('accounting.createFeeEntry', request);
  };
  _proto.createCostRecovery = function createCostRecovery(request) {
    this.fourd.call4Dv2('accounting.createCostRecovery', request);
  };
  _proto.createInvoice = function createInvoice(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('accounting.createInvoice', request, requestId);
    }, function (response) {
      return true; // TODO: check the actual response
    });
  };
  _proto.createOfficeReceipt = function createOfficeReceipt(request) {
    this.fourd.call4Dv2('accounting.createOfficeReceipt', request);
  };
  _proto.createOfficePayment = function createOfficePayment(request) {
    this.fourd.call4Dv2('accounting.createOfficePayment', request);
  };
  _proto.createOfficeJournal = function createOfficeJournal(request) {
    this.fourd.call4Dv2('accounting.createOfficeJournal', request);
  };
  _proto.createTrustReceipt = function createTrustReceipt(request) {
    this.fourd.call4Dv2('accounting.createTrustReceipt', request);
  };
  _proto.createTrustPayment = function createTrustPayment(request) {
    this.fourd.call4Dv2('accounting.createTrustPayment', request);
  };
  _proto.createTrustJournal = function createTrustJournal(request) {
    this.fourd.call4Dv2('accounting.createTrustJournal', request);
  };
  _proto.createTrustToOffice = function createTrustToOffice(request) {
    this.fourd.call4Dv2('accounting.createTrustToOffice', request);
  };
  _proto.createOfficePaymentRequest = function createOfficePaymentRequest(request) {
    this.fourd.call4Dv2('accounting.createOfficePaymentRequest', request);
  };
  _proto.createTrustPaymentRequest = function createTrustPaymentRequest(request) {
    this.fourd.call4Dv2('accounting.createTrustPaymentRequest', request);
  };
  _proto.reloadFinancialSummary = function reloadFinancialSummary(request) {
    this.fourd.call4Dv2('accounting.reloadFinancialSummary', request);
  };
  _proto.reloadTimeFeeList = function reloadTimeFeeList(request) {
    this.fourd.call4Dv2('accounting.reloadTimeFeeList', request);
  };
  _proto.reloadOfficeLedger = function reloadOfficeLedger(request) {
    this.fourd.call4Dv2('accounting.reloadOfficeLedger', request);
  };
  _proto.reloadAnticipatedPaymentList = function reloadAnticipatedPaymentList(request) {
    this.fourd.call4Dv2('accounting.reloadAnticipatedPaymentList', request);
  };
  _proto.reloadCostRecoveryList = function reloadCostRecoveryList(request) {
    this.fourd.call4Dv2('accounting.reloadCostRecoveryList', request);
  };
  _proto.reloadTrustLedger = function reloadTrustLedger(request) {
    this.fourd.call4Dv2('accounting.reloadTrustLedger', request);
  };
  _proto.reloadControlledMoneyList = function reloadControlledMoneyList(request) {
    this.fourd.call4Dv2('accounting.reloadControlledMoneyList', request);
  };
  _proto.reloadPowerMoneyList = function reloadPowerMoneyList(request) {
    this.fourd.call4Dv2('accounting.reloadPowerMoneyList', request);
  };
  _proto.reloadTransitMoneyList = function reloadTransitMoneyList(request) {
    this.fourd.call4Dv2('accounting.reloadTransitMoneyList', request);
  };
  _proto.openFee = function openFee(request) {
    if (request.isAutoTime) request.timed = true;
    this.fourd.call4Dv2('accounting.openFee', request);
  };
  return Accounting;
}();

var App = /*#__PURE__*/function () {
  function App(fourd) {
    this.fourd = fourd;
  }
  var _proto = App.prototype;
  _proto.openApp = function openApp(request) {
    this.fourd.call4Dv2('app.openApp', request);
  };
  return App;
}();

var Calc = /*#__PURE__*/function () {
  function Calc(fourd) {
    this.fourd = fourd;
  }
  var _proto = Calc.prototype;
  _proto.evaluatePaths = function evaluatePaths(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      var calcRequest = {
        method: 'POST',
        url: '/api/evaluate/paths',
        body: request
      };
      _this.fourd.call4Dv2('calc.evaluatePaths', calcRequest, requestId);
    }, function (response) {
      if (response.status >= 400) {
        throw new Error(JSON.parse(response.body).message);
      } else {
        var responseData;
        try {
          responseData = JSON.parse(response.body);
        } catch (e) {
          // Unable to parse response.body => response.body is not a stringify object
          responseData = response.body;
        }
        return responseData;
      }
    });
  };
  return Calc;
}();

var Communication = /*#__PURE__*/function () {
  function Communication(fourd) {
    this.fourd = fourd;
  }
  var _proto = Communication.prototype;
  _proto.composeEmail = function composeEmail(request) {
    this.fourd.call4Dv2('communication.composeEmail', request);
  };
  _proto.createAppointment = function createAppointment(request) {
    this.fourd.call4Dv2('communication.createAppointment', request);
  };
  _proto.createTask = function createTask(request) {
    this.fourd.call4Dv2('communication.createTask', request);
  };
  return Communication;
}();

var Document = /*#__PURE__*/function () {
  function Document(fourd) {
    this.fourd = fourd;
  }
  var _proto = Document.prototype;
  _proto.previewDocument = function previewDocument(request) {
    this.fourd.call4Dv2('document.previewDocument', request);
  };
  _proto.previewPrecedent = function previewPrecedent(request) {
    this.fourd.call4Dv2('document.previewPrecedent', request);
  };
  _proto.createDocumentFromContainer = function createDocumentFromContainer(request) {
    this.fourd.call4Dv2('document.createDocumentFromContainer', request);
  };
  _proto.createDocumentFromPrecedent = function createDocumentFromPrecedent(request) {
    this.fourd.call4Dv2('document.createDocumentFromPrecedent', request);
  };
  _proto.openDocument = function openDocument(request) {
    this.fourd.call4Dv2('document.openDocument', request);
  };
  _proto.reloadDocumentList = function reloadDocumentList(request) {
    this.fourd.call4Dv2('document.reloadDocumentList', request);
  };
  _proto.editPrecedent = function editPrecedent(request) {
    this.fourd.call4Dv2('document.editPrecedent', request);
  };
  _proto.selectPrecedent = function selectPrecedent(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('document.selectPrecedent', request, requestId);
    }, function (response) {
      return response;
    });
  };
  return Document;
}();

var Infotrack = /*#__PURE__*/function () {
  function Infotrack(fourd) {
    this.fourd = fourd;
  }
  var _proto = Infotrack.prototype;
  _proto.orderSearch = function orderSearch(request) {
    this.fourd.call4Dv2('infotrack.orderSearch', request);
  };
  return Infotrack;
}();

var LawConnect = /*#__PURE__*/function () {
  function LawConnect(fourd) {
    this.fourd = fourd;
  }
  var _proto = LawConnect.prototype;
  _proto.shareDocuments = function shareDocuments(request) {
    this.fourd.call4Dv2('lawconnect.shareDocuments', request);
  };
  _proto.shareFolder = function shareFolder(request) {
    this.fourd.call4Dv2('lawconnect.shareFolder', request);
  };
  _proto.shareOfficeStatement = function shareOfficeStatement(request) {
    this.fourd.call4Dv2('lawconnect.shareOfficeStatement', request);
  };
  _proto.shareTrustStatement = function shareTrustStatement(request) {
    this.fourd.call4Dv2('lawconnect.shareTrustStatement', request);
  };
  return LawConnect;
}();

var Matter = /*#__PURE__*/function () {
  function Matter(fourd) {
    this.fourd = fourd;
  }
  var _proto = Matter.prototype;
  _proto.openTable = function openTable(request) {
    if (request == null) {
      request.order = 1;
    }
    this.fourd.call4Dv2('matter.openTable', request);
  };
  _proto.openMatter = function openMatter(request) {
    this.fourd.call4Dv2('matter.openMatter', request);
  };
  _proto.selectMatter = function selectMatter(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('matter.selectMatter', request, requestId);
    }, function (response) {
      var _this$fourd$leapConte, _this$fourd$leapConte2;
      if (!((_this$fourd$leapConte = _this.fourd.leapContext) !== null && _this$fourd$leapConte !== void 0 && (_this$fourd$leapConte2 = _this$fourd$leapConte.hostInfo) !== null && _this$fourd$leapConte2 !== void 0 && _this$fourd$leapConte2.hostVersion) || _this.fourd.leapContext.hostInfo.hostVersion < '2.4.280.0') {
        //HSDK-122, fix the incorrect property names, can be removed when minimum version is 2.4
        return response.map(function (r) {
          var matter = _extends({}, r, {
            deleted: r["delete"],
            matterTypeId: ''
          });
          delete matter["delete"];
          return matter;
        });
      }
      return response;
    });
  };
  return Matter;
}();

var MsTeams = /*#__PURE__*/function () {
  function MsTeams(fourd) {
    this.fourd = fourd;
  }
  var _proto = MsTeams.prototype;
  _proto.shareDocument = function shareDocument(request) {
    this.fourd.call4Dv2('msteams.shareDocument', request);
  };
  _proto.shareMatter = function shareMatter(request) {
    this.fourd.call4Dv2('msteams.shareMatter', request);
  };
  _proto.requestCallback = function requestCallback(request) {
    this.fourd.call4Dv2('msteams.requestCallback', request);
  };
  return MsTeams;
}();

var Register = /*#__PURE__*/function () {
  function Register(fourd) {
    this.fourd = fourd;
  }
  var _proto = Register.prototype;
  _proto.reloadDocumentRegisterList = function reloadDocumentRegisterList(request) {
    this.fourd.call4Dv2('register.reloadDocumentRegisterList', request);
  };
  _proto.reloadPowerEstateList = function reloadPowerEstateList(request) {
    this.fourd.call4Dv2('register.reloadPowerEstateList', request);
  };
  return Register;
}();

var Schema = /*#__PURE__*/function () {
  function Schema(fourd) {
    this.fourd = fourd;
  }
  var _proto = Schema.prototype;
  _proto.customiseList = function customiseList(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('schema.customiseList', request, requestId);
    }, function (response) {
      return response;
    });
  };
  _proto.getLists = function getLists(request) {
    var _this2 = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this2.fourd.call4Dv2('schema.getLists', request, requestId);
    }, function (response) {
      return response;
    });
  };
  return Schema;
}();

var System = /*#__PURE__*/function () {
  function System(fourd) {
    this.fourd = fourd;
    this.isString = function (value) {
      return typeof value === 'string' || value instanceof String;
    };
  }
  var _proto = System.prototype;
  _proto.openTwitter = function openTwitter(request) {
    this.fourd.call4Dv2('system.openTwitter', request);
  };
  _proto.close = function close() {
    this.fourd.call4Dv2('system.close');
  };
  _proto.hide = function hide() {
    this.fourd.call4Dv2('system.hide');
  };
  _proto.wait = function wait(request) {
    this.fourd.call4Dv2('system.wait', request);
  };
  _proto.resume = function resume() {
    this.fourd.call4Dv2('system.resume');
  };
  _proto.cancelClose = function cancelClose() {
    this.fourd.call4Dv2('system.cancelClose');
  };
  _proto.alert = function alert(request) {
    if (!this.isString(request.message) || !request.message) {
      return;
    }
    this.fourd.call4Dv2('system.alert', request);
  };
  _proto.error = function error(request) {
    if (!this.isString(request.message) || !request.message) {
      return;
    }
    this.fourd.call4Dv2('system.error', request);
  };
  _proto.openDialog = function openDialog(request) {
    var _this = this;
    if (!this.isString(request.message) || !request.message) {
      throw new Error('Invalid value in message');
    } else if (!request.dialogType) {
      throw new Error('DialogType cannot be null');
    }
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('system.openDialog', request, requestId);
    }, function (response) {
      return response;
    });
  };
  _proto.openUrl = function openUrl(config) {
    config['action'] = 'OpenURL';
    this.fourd.call4Dv2('system.openUrl', config);
  };
  _proto.getSystemInfo = function getSystemInfo() {
    var _this2 = this;
    if (this._systemInfo) {
      return Promise.resolve(this._systemInfo);
    }
    return this.fourd.twoWayCall(null, function (requestId, request) {
      _this2.fourd.call4Dv2('system.getSystemInfo', request, requestId);
    }, function (response) {
      _this2._systemInfo = response;
      return response;
    });
  };
  _proto.setWindowTitle = function setWindowTitle(request) {
    this.fourd.call4Dv2('system.setWindowTitle', request);
  };
  _proto.onBeforeClose = function onBeforeClose(handler) {
    var _this3 = this;
    handler().then(function (shouldCancelClose) {
      if (shouldCancelClose) {
        _this3.cancelClose();
      }
    });
  };
  _proto.send = function send(request, hasResponse) {
    if (hasResponse === void 0) {
      hasResponse = false;
    }
    try {
      var _this5 = this;
      if (!_this5.fourd.isTrustedApp) {
        throw new Error('Permission error');
      }
      if (request === null || request === undefined) {
        throw new Error('Bad request');
      }
      var isObject = typeof request === 'object';
      // Proxy generic command use case
      if (isObject && request['command']) {
        if (hasResponse) {
          return Promise.resolve(_this5.fourd.twoWayCall(request, function (requestId, request) {
            _this5.fourd.call4Dv2(request['command'], request['request'], requestId);
          }, function (response) {
            return response;
          }));
        } else {
          _this5.fourd.call4Dv2(request['command'], request['request']);
          return Promise.resolve();
        }
      }
      // For strings and SDK 1.0 commands
      if (hasResponse) {
        return Promise.resolve(_this5.fourd.twoWayCall(request, function (requestId, request) {
          _this5.fourd.call4Dv2('system.send', request, requestId);
        }, function (response) {
          return response;
        }));
      } else {
        _this5.fourd.call4Dv2('system.send', request);
        return Promise.resolve();
      }
    } catch (e) {
      return Promise.reject(e);
    }
  } // Legacy versions - Do not wrap request object in v2 format (LSDK-81)
  ;
  _proto.sendLegacy = function sendLegacy(request) {
    var _this6 = this;
    var isObject = typeof request === 'object';
    if (!isObject || !request['requestId']) {
      this.fourd.call4D(this.fourd.to4DJSONString(request));
      return Promise.resolve();
    } else {
      return new Promise(function (resolve, reject) {
        _this6.fourd.registerHostMessageHandler(request['requestId'], function (response) {
          _this6.fourd.deregisterHostMessageHandler(request['requestId']);
          // Some handlers of 2.1 and 2.2 respond in v2 format
          if (typeof response === 'object' && !!response) {
            var hasStatus = response.hasOwnProperty('isSuccess');
            var hasError = response.hasOwnProperty('error');
            var hasData = response.hasOwnProperty('data');
            if (hasStatus && (hasError || hasData)) {
              if (response['isSuccess']) {
                resolve(response['data']);
              } else {
                reject(new Error(response['error']));
              }
            }
          } else {
            resolve(response);
          }
        });
        _this6.fourd.call4D(_this6.fourd.to4DJSONString(request));
      });
    }
  };
  _proto.finishLoading = function finishLoading() {
    this.fourd.call4Dv2('system.finishLoading');
  };
  return System;
}();

var Card = /*#__PURE__*/function () {
  function Card(fourd) {
    this.fourd = fourd;
  }
  var _proto = Card.prototype;
  _proto.selectCard = function selectCard(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('card.selectCard', request, requestId);
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.createCard = function createCard() {
    var _this2 = this;
    return this.fourd.twoWayCall(null, function (requestId, request) {
      _this2.fourd.call4Dv2('card.createCard', request, requestId);
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.openCard = function openCard(request) {
    this.fourd.call4Dv2('card.openCard', request);
  };
  return Card;
}();

var Staff = /*#__PURE__*/function () {
  function Staff(fourd) {
    this.fourd = fourd;
  }
  var _proto = Staff.prototype;
  _proto.selectStaff = function selectStaff(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('staff.selectStaff', request, requestId);
    }, function (response) {
      var _this$fourd$leapConte, _this$fourd$leapConte2;
      if (!((_this$fourd$leapConte = _this.fourd.leapContext) !== null && _this$fourd$leapConte !== void 0 && (_this$fourd$leapConte2 = _this$fourd$leapConte.hostInfo) !== null && _this$fourd$leapConte2 !== void 0 && _this$fourd$leapConte2.hostVersion) || _this.fourd.leapContext.hostInfo.hostVersion < '2.4.280.0') {
        //HSDK-122, fix the incorrect property names, can be removed when minimum version is 2.4
        return response.map(function (r) {
          var staff = _extends({}, r, {
            staffId: r.staffGUID,
            userId: r.userGUID,
            branchId: r.branchGUID
          });
          delete staff.staffGUID;
          delete staff.userGUID;
          delete staff.branchGUID;
          return staff;
        });
      }
      return response;
    });
  };
  return Staff;
}();

var Person = /*#__PURE__*/function () {
  function Person(fourd) {
    this.fourd = fourd;
  }
  var _proto = Person.prototype;
  _proto.selectPerson = function selectPerson(request) {
    var _this = this;
    return this.fourd.twoWayCall(request, function (requestId, request) {
      _this.fourd.call4Dv2('person.selectPerson', request, requestId);
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        // Unable to parse response.body => response.body is not a stringify object
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.openPerson = function openPerson(request) {
    this.fourd.call4Dv2('person.openPerson', request);
  };
  return Person;
}();

var BrowserFourdApi = /*#__PURE__*/function (_BaseApi) {
  _inheritsLoose(BrowserFourdApi, _BaseApi);
  function BrowserFourdApi(requestContext) {
    var _this;
    if (requestContext === void 0) {
      requestContext = undefined;
    }
    _this = _BaseApi.call(this, requestContext) || this;
    _this.protocol = 'Fourd://';
    _this._accounting = new Accounting(_assertThisInitialized(_this));
    _this._app = new App(_assertThisInitialized(_this));
    _this._calc = new Calc(_assertThisInitialized(_this));
    _this._communication = new Communication(_assertThisInitialized(_this));
    _this._document = new Document(_assertThisInitialized(_this));
    _this._infotrack = new Infotrack(_assertThisInitialized(_this));
    _this._lawconnect = new LawConnect(_assertThisInitialized(_this));
    _this._person = new Person(_assertThisInitialized(_this));
    _this._matter = new Matter(_assertThisInitialized(_this));
    _this._msteams = new MsTeams(_assertThisInitialized(_this));
    _this._register = new Register(_assertThisInitialized(_this));
    _this._schema = new Schema(_assertThisInitialized(_this));
    _this._system = new System(_assertThisInitialized(_this));
    _this._card = new Card(_assertThisInitialized(_this));
    _this._staff = new Staff(_assertThisInitialized(_this));
    _this.setupHostMessageEventHandler();
    return _this;
  }
  var _proto = BrowserFourdApi.prototype;
  _proto.retrieveContext = function retrieveContext() {
    this.call4Dv2('RetrieveLeapAppContext', {}, this.leapContext.hostInfo.appSessionId);
  };
  _proto.to4DJSONString = function to4DJSONString(value, encode) {
    if (encode === undefined) {
      return 'json=' + Base64.encode(JSON.stringify(value));
    } else {
      return JSON.stringify(value);
    }
  };
  _proto.call4D = function call4D(request) {
    if (!window['$4d']) {
      //this object is lost when the permission acceptance page pops up
      //so we need to handle it in the old way
      request = this.protocol + request;
      window.location.assign(request);
    } else {
      request = this.protocol + request;
      window['$4d'].WebArea_RequestHandler(request);
    }
  };
  _proto.call4Dv2 = function call4Dv2(command, request, requestId) {
    if (request === undefined || typeof request === 'object') {
      // Always append appSessionId to the request sent to Host for validation
      request = _extends({}, request || {}, {
        appSessionId: this.leapContext.hostInfo.appSessionId
      });
      if (requestId) {
        request = _extends({}, request, {
          requestId: requestId
        });
      }
    }
    var obj = {
      command: command,
      request: request,
      sdkVersion: 2
    };
    this.call4D(this.to4DJSONString(obj));
  };
  _proto.hostRelatedSetup = function hostRelatedSetup() {};
  _proto.setupHostMessageEventHandler = function setupHostMessageEventHandler() {
    var _this2 = this;
    var global = window;
    global.handleHostMessage = function (command, payload) {
      return _BaseApi.prototype.handleCommand.call(_this2, command, payload);
    };
  };
  _createClass(BrowserFourdApi, [{
    key: "accounting",
    get: function get() {
      return this._accounting;
    }
  }, {
    key: "app",
    get: function get() {
      return this._app;
    }
  }, {
    key: "calc",
    get: function get() {
      return this._calc;
    }
  }, {
    key: "card",
    get: function get() {
      return this._card;
    }
  }, {
    key: "communication",
    get: function get() {
      return this._communication;
    }
  }, {
    key: "document",
    get: function get() {
      return this._document;
    }
  }, {
    key: "infotrack",
    get: function get() {
      return this._infotrack;
    }
  }, {
    key: "lawconnect",
    get: function get() {
      return this._lawconnect;
    }
  }, {
    key: "matter",
    get: function get() {
      return this._matter;
    }
  }, {
    key: "msteams",
    get: function get() {
      return this._msteams;
    }
  }, {
    key: "person",
    get: function get() {
      return this._person;
    }
  }, {
    key: "register",
    get: function get() {
      return this._register;
    }
  }, {
    key: "schema",
    get: function get() {
      return this._schema;
    }
  }, {
    key: "system",
    get: function get() {
      return this._system;
    }
  }, {
    key: "staff",
    get: function get() {
      return this._staff;
    }
  }]);
  return BrowserFourdApi;
}(BaseApi);

var whitelistDomains = {
  dev_au: ['https://dev.leap365.com.au', 'https://dev.leapjd.com.au/'],
  test_au: ['https://test.leap365.com.au', 'https://test-epic1.leap365.com.au', 'https://reporting-test.leapaws.com.au', 'https://reporting-dev.leapaws.com.au', 'https://leapcalc-renderer-au-test.leap.services', 'https://test.leapjd.com.au', 'https://test.leapjd.co.nz'],
  live_au: ['https://staging.leap365.com.au', 'https://sandbox.leap365.com.au', 'https://app.leap365.com.au', 'https://reporting.leapaws.com.au', 'https://leapcalc-renderer-au-live.leap.services'],
  liveb_au: ['https://staging.liveb.leap365.com.au', 'https://liveb.leap365.com.au'],
  test_uk: ['https://test.leap365.co.uk', 'https://reporting-test.leapaws.co.uk', 'https://leapcalc-renderer-uk-test.leap.services', 'https://test.leapjd.co.uk'],
  live_uk: ['https://app.leap365.co.uk', 'https://staging.leap365.co.uk', 'https://sandbox.leap365.co.uk', 'https://reporting.leapaws.co.uk', 'https://leapcalc-renderer-uk-live.leap.services'],
  test_us: ['https://test.leap365.com', 'https://reporting-test.leapaws.com', 'https://leapcalc-renderer-us-test.leap.services', 'https://test.leapjd.com'],
  live_us: ['https://app.leap365.com', 'https://staging.leap365.com', 'https://sandbox.leap365.com', 'https://reporting.leapaws.com', 'https://leapcalc-renderer-us-live.leap.services'],
  test_ca: ['https://test.leap365.ca', 'https://reporting.test.leapaws.ca', 'https://renderer.test.ca.leap.services', 'https://test.leapjd.ca'],
  live_ca: ['https://app.leap365.ca', 'https://staging.leap365.ca', 'https://sandbox.leap365.ca', 'https://reporting.leapaws.ca', 'https://renderer.ca.leap.services']
};
var devDomains = ['http://localhost:53504', 'http://localhost:8080', 'http://localhost:9005'];
var leapHostTestAppDomain = 'https://leaphost.test.leap365.com.au';
var jd = 'http://my.leapjd';

var Accounting$1 = /*#__PURE__*/function () {
  function Accounting(iframe) {
    this.iframe = iframe;
  }
  var _proto = Accounting.prototype;
  _proto.createTimeEntry = function createTimeEntry(request) {
    this.iframe.postMessage({
      command: 'accounting.createTimeEntry',
      args: request
    });
  };
  _proto.createFeeEntry = function createFeeEntry(request) {
    this.iframe.postMessage({
      command: 'accounting.createFeeEntry',
      args: request
    });
  };
  _proto.createCostRecovery = function createCostRecovery(request) {
    this.iframe.postMessage({
      command: 'accounting.createCostRecovery',
      args: request
    });
  };
  _proto.createInvoice = function createInvoice(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'accounting.createInvoice',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  _proto.createOfficeReceipt = function createOfficeReceipt(request) {
    this.iframe.postMessage({
      command: 'accounting.createOfficeReceipt',
      args: request
    });
  };
  _proto.createOfficePayment = function createOfficePayment(request) {
    this.iframe.postMessage({
      command: 'accounting.createOfficePayment',
      args: request
    });
  };
  _proto.createOfficeJournal = function createOfficeJournal(request) {
    this.iframe.postMessage({
      command: 'accounting.createOfficeJournal',
      args: request
    });
  };
  _proto.createTrustReceipt = function createTrustReceipt(request) {
    this.iframe.postMessage({
      command: 'accounting.createTrustReceipt',
      args: request
    });
  };
  _proto.createTrustPayment = function createTrustPayment(request) {
    this.iframe.postMessage({
      command: 'accounting.createTrustPayment',
      args: request
    });
  };
  _proto.createTrustJournal = function createTrustJournal(request) {
    this.iframe.postMessage({
      command: 'accounting.createTrustJournal',
      args: request
    });
  };
  _proto.createTrustToOffice = function createTrustToOffice(request) {
    this.iframe.postMessage({
      command: 'accounting.createTrustToOffice',
      args: request
    });
  };
  _proto.createOfficePaymentRequest = function createOfficePaymentRequest(request) {
    this.iframe.postMessage({
      command: 'accounting.createOfficePaymentRequest',
      args: request
    });
  };
  _proto.createTrustPaymentRequest = function createTrustPaymentRequest(request) {
    this.iframe.postMessage({
      command: 'accounting.createTrustPaymentRequest',
      args: request
    });
  };
  _proto.reloadFinancialSummary = function reloadFinancialSummary(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadFinancialSummary',
      args: request
    });
  };
  _proto.reloadTimeFeeList = function reloadTimeFeeList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadTimeFeeList',
      args: request
    });
  };
  _proto.reloadOfficeLedger = function reloadOfficeLedger(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadOfficeLedger',
      args: request
    });
  };
  _proto.reloadAnticipatedPaymentList = function reloadAnticipatedPaymentList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadAnticipatedPaymentList',
      args: request
    });
  };
  _proto.reloadCostRecoveryList = function reloadCostRecoveryList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadCostRecoveryList',
      args: request
    });
  };
  _proto.reloadTrustLedger = function reloadTrustLedger(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadTrustLedger',
      args: request
    });
  };
  _proto.reloadControlledMoneyList = function reloadControlledMoneyList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadControlledMoneyList',
      args: request
    });
  };
  _proto.reloadPowerMoneyList = function reloadPowerMoneyList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadPowerMoneyList',
      args: request
    });
  };
  _proto.reloadTransitMoneyList = function reloadTransitMoneyList(request) {
    this.iframe.postMessage({
      command: 'accounting.reloadTransitMoneyList',
      args: request
    });
  };
  _proto.openFee = function openFee(request) {
    if (request.isAutoTime) request.timed = true;
    this.iframe.postMessage({
      command: 'accounting.openFee',
      args: request
    });
  };
  return Accounting;
}();

var App$1 = /*#__PURE__*/function () {
  function App(iframe) {
    this.iframe = iframe;
  }
  var _proto = App.prototype;
  _proto.openApp = function openApp(request) {
    this.iframe.postMessage({
      command: 'app.openApp',
      args: request
    });
  };
  return App;
}();

var Calc$1 = /*#__PURE__*/function () {
  function Calc(iframe) {
    this.iframe = iframe;
  }
  var _proto = Calc.prototype;
  _proto.evaluatePaths = function evaluatePaths(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'calc.evaluatePaths',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        // Unable to parse response => response is not a stringify object
        responseData = response;
      }
      return responseData;
    });
  };
  return Calc;
}();

var Communication$1 = /*#__PURE__*/function () {
  function Communication(iframe) {
    this.iframe = iframe;
  }
  var _proto = Communication.prototype;
  _proto.composeEmail = function composeEmail(request) {
    this.iframe.postMessage({
      command: 'communication.composeEmail',
      args: request
    });
  };
  _proto.createAppointment = function createAppointment(request) {
    this.iframe.postMessage({
      command: 'communication.createAppointment',
      args: request
    });
  };
  _proto.createTask = function createTask(request) {
    this.iframe.postMessage({
      command: 'communication.createTask',
      args: request
    });
  };
  return Communication;
}();

var Document$1 = /*#__PURE__*/function () {
  function Document(iframe) {
    this.iframe = iframe;
  }
  var _proto = Document.prototype;
  _proto.previewDocument = function previewDocument(request) {
    this.iframe.postMessage({
      command: 'document.previewDocument',
      args: request
    });
  };
  _proto.previewPrecedent = function previewPrecedent(request) {
    this.iframe.postMessage({
      command: 'document.previewPrecedent',
      args: request
    });
  };
  _proto.createDocumentFromContainer = function createDocumentFromContainer(request) {
    this.iframe.postMessage({
      command: 'document.createDocumentFromContainer',
      args: request
    });
  };
  _proto.createDocumentFromPrecedent = function createDocumentFromPrecedent(request) {
    this.iframe.postMessage({
      command: 'document.createDocumentFromPrecedent',
      args: request
    });
  };
  _proto.openDocument = function openDocument(request) {
    this.iframe.postMessage({
      command: 'document.openDocument',
      args: request
    });
  };
  _proto.reloadDocumentList = function reloadDocumentList(request) {
    this.iframe.postMessage({
      command: 'document.reloadDocumentList',
      args: request
    });
  };
  _proto.editPrecedent = function editPrecedent(request) {
    this.iframe.postMessage({
      command: 'document.editPrecedent',
      args: request
    });
  };
  _proto.selectPrecedent = function selectPrecedent(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'document.selectPrecedent',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  return Document;
}();

var Infotrack$1 = /*#__PURE__*/function () {
  function Infotrack(iframe) {
    this.iframe = iframe;
  }
  var _proto = Infotrack.prototype;
  _proto.orderSearch = function orderSearch(request) {
    this.iframe.postMessage({
      command: 'infotrack.orderSearch',
      args: request
    });
  };
  return Infotrack;
}();

var LawConnect$1 = /*#__PURE__*/function () {
  function LawConnect(iframe) {
    this.iframe = iframe;
  }
  var _proto = LawConnect.prototype;
  _proto.shareDocuments = function shareDocuments(request) {
    this.iframe.postMessage({
      command: 'lawconnect.shareDocuments',
      args: request
    });
  };
  _proto.shareFolder = function shareFolder(request) {
    this.iframe.postMessage({
      command: 'lawconnect.shareFolder',
      args: request
    });
  };
  _proto.shareOfficeStatement = function shareOfficeStatement(request) {
    this.iframe.postMessage({
      command: 'lawconnect.shareOfficeStatement',
      args: request
    });
  };
  _proto.shareTrustStatement = function shareTrustStatement(request) {
    this.iframe.postMessage({
      command: 'lawconnect.shareTrustStatement',
      args: request
    });
  };
  return LawConnect;
}();

var Matter$1 = /*#__PURE__*/function () {
  function Matter(iframe) {
    this.iframe = iframe;
  }
  var _proto = Matter.prototype;
  _proto.openTable = function openTable(request) {
    this.iframe.postMessage({
      command: 'matter.openTable',
      args: request
    });
  };
  _proto.openMatter = function openMatter(request) {
    this.iframe.postMessage({
      command: 'matter.openMatter',
      args: request
    });
  };
  _proto.selectMatter = function selectMatter(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'matter.selectMatter',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  return Matter;
}();

var MsTeams$1 = /*#__PURE__*/function () {
  function MsTeams(iframe) {
    this.iframe = iframe;
  }
  var _proto = MsTeams.prototype;
  _proto.shareDocument = function shareDocument(request) {
    this.iframe.postMessage({
      command: 'msteams.shareDocument',
      args: request
    });
  };
  _proto.shareMatter = function shareMatter(request) {
    this.iframe.postMessage({
      command: 'msteams.shareMatter',
      args: request
    });
  };
  _proto.requestCallback = function requestCallback(request) {
    this.iframe.postMessage({
      command: 'msteams.requestCallback',
      args: request
    });
  };
  return MsTeams;
}();

var Card$1 = /*#__PURE__*/function () {
  function Card(iframe) {
    this.iframe = iframe;
  }
  var _proto = Card.prototype;
  _proto.selectCard = function selectCard(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'card.selectCard',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        // Unable to parse response => response is not a stringify object
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.createCard = function createCard() {
    var _this2 = this;
    return this.iframe.twoWayCall(null, function (requestId, request) {
      _this2.iframe.postMessage({
        command: 'card.createCard',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        // Unable to parse response => response is not a stringify object
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.openCard = function openCard(request) {
    this.iframe.postMessage({
      command: 'card.openCard',
      args: request
    });
  };
  return Card;
}();

var Staff$1 = /*#__PURE__*/function () {
  function Staff(iframe) {
    this.iframe = iframe;
  }
  var _proto = Staff.prototype;
  _proto.selectStaff = function selectStaff(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'staff.selectStaff',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  return Staff;
}();

var Register$1 = /*#__PURE__*/function () {
  function Register(iframe) {
    this.iframe = iframe;
  }
  var _proto = Register.prototype;
  _proto.reloadDocumentRegisterList = function reloadDocumentRegisterList(request) {
    this.iframe.postMessage({
      command: 'register.reloadDocumentRegisterList',
      args: request
    });
  };
  _proto.reloadPowerEstateList = function reloadPowerEstateList(request) {
    this.iframe.postMessage({
      command: 'register.reloadPowerEstateList',
      args: request
    });
  };
  return Register;
}();

var Schema$1 = /*#__PURE__*/function () {
  function Schema(iframe) {
    this.iframe = iframe;
  }
  var _proto = Schema.prototype;
  _proto.customiseList = function customiseList(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'schema.customiseList',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  _proto.getLists = function getLists(request) {
    var _this2 = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this2.iframe.postMessage({
        command: 'schema.getLists',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  return Schema;
}();

var System$1 = /*#__PURE__*/function () {
  function System(iframe) {
    this.iframe = iframe;
  }
  var _proto = System.prototype;
  _proto.openTwitter = function openTwitter(request) {
    throw new Error('Not supported');
  };
  _proto.close = function close() {
    this.iframe.postMessage({
      command: 'system.close'
    });
  };
  _proto.hide = function hide() {
    this.iframe.postMessage({
      command: 'system.hide'
    });
  };
  _proto.wait = function wait(request) {
    this.iframe.postMessage({
      command: 'system.wait',
      args: request
    });
  };
  _proto.resume = function resume() {
    this.iframe.postMessage({
      command: 'system.resume'
    });
  };
  _proto.cancelClose = function cancelClose() {
    this.iframe.postMessage({
      command: 'system.cancelClose'
    });
  };
  _proto.alert = function alert(request) {
    this.iframe.postMessage({
      command: 'system.alert',
      args: request
    });
  };
  _proto.error = function error(request) {
    this.iframe.postMessage({
      command: 'system.error',
      args: request
    });
  };
  _proto.openDialog = function openDialog(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'system.openDialog',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      return response;
    });
  };
  _proto.openUrl = function openUrl(config) {
    this.iframe.postMessage({
      command: 'system.openUrl',
      args: config
    });
  };
  _proto.getSystemInfo = function getSystemInfo() {
    var _this2 = this;
    if (this._systemInfo) {
      return Promise.resolve(this._systemInfo);
    }
    return this.iframe.twoWayCall(null, function (requestId) {
      _this2.iframe.postMessage({
        command: 'system.getSystemInfo',
        args: {
          requestId: requestId
        }
      });
    }, function (response) {
      _this2._systemInfo = response;
      return response;
    });
  };
  _proto.setWindowTitle = function setWindowTitle(request) {
    this.iframe.postMessage({
      command: 'system.setWindowTitle',
      args: request
    });
  };
  _proto.onBeforeClose = function onBeforeClose(handler) {
    var _this3 = this;
    handler().then(function (shouldCancelClose) {
      if (shouldCancelClose) {
        _this3.cancelClose();
      }
    });
  };
  _proto.send = function send(request, hasResponse) {
    var _this4 = this;
    if (hasResponse === void 0) {
      hasResponse = false;
    }
    if (!this.iframe.isTrustedApp) {
      throw new Error('Permission error');
    }
    if (request === null || request === undefined) {
      throw new Error('Bad request');
    }
    var isObject = typeof request === 'object';
    if (isObject && hasResponse) {
      return this.iframe.twoWayCall(request, function (requestId, request) {
        _this4.iframe.postMessage({
          command: 'system.send',
          args: _extends({}, request, {
            requestId: requestId
          })
        });
      }, function (response) {
        return response;
      });
    } else {
      this.iframe.postMessage({
        command: 'system.send',
        args: request
      });
      return Promise.resolve();
    }
  };
  _proto.finishLoading = function finishLoading() {
    this.iframe.postMessage({
      command: 'system.finishLoading'
    });
  };
  return System;
}();

var Person$1 = /*#__PURE__*/function () {
  function Person(iframe) {
    this.iframe = iframe;
  }
  var _proto = Person.prototype;
  _proto.selectPerson = function selectPerson(request) {
    var _this = this;
    return this.iframe.twoWayCall(request, function (requestId, request) {
      _this.iframe.postMessage({
        command: 'person.selectPerson',
        args: _extends({}, request, {
          requestId: requestId
        })
      });
    }, function (response) {
      var responseData;
      try {
        responseData = JSON.parse(response);
      } catch (e) {
        // Unable to parse response => response is not a stringify object
        responseData = response;
      }
      return responseData;
    });
  };
  _proto.openPerson = function openPerson(request) {
    this.iframe.postMessage({
      command: 'person.openPerson',
      args: request
    });
  };
  return Person;
}();

var IframeWindow = /*#__PURE__*/function (_BaseApi) {
  _inheritsLoose(IframeWindow, _BaseApi);
  function IframeWindow(requestContext, newTab) {
    var _this;
    if (newTab === void 0) {
      newTab = false;
    }
    _this = _BaseApi.call(this, requestContext) || this;
    _this._accounting = new Accounting$1(_assertThisInitialized(_this));
    _this._app = new App$1(_assertThisInitialized(_this));
    _this._calc = new Calc$1(_assertThisInitialized(_this));
    _this._card = new Card$1(_assertThisInitialized(_this));
    _this._communication = new Communication$1(_assertThisInitialized(_this));
    _this._document = new Document$1(_assertThisInitialized(_this));
    _this._infotrack = new Infotrack$1(_assertThisInitialized(_this));
    _this._lawconnect = new LawConnect$1(_assertThisInitialized(_this));
    _this._matter = new Matter$1(_assertThisInitialized(_this));
    _this._msteams = new MsTeams$1(_assertThisInitialized(_this));
    _this._person = new Person$1(_assertThisInitialized(_this));
    _this._register = new Register$1(_assertThisInitialized(_this));
    _this._schema = new Schema$1(_assertThisInitialized(_this));
    _this._staff = new Staff$1(_assertThisInitialized(_this));
    _this._system = new System$1(_assertThisInitialized(_this));
    _this.parentWindow = newTab ? window.opener : window.parent;
    _this.registerMessageEventListener();
    return _this;
  }
  var _proto = IframeWindow.prototype;
  _proto.retrieveContext = function retrieveContext() {
    this.postMessage({
      command: 'RetrieveLeapAppContext',
      args: {
        requestId: this.leapContext.hostInfo.appSessionId
      }
    });
  };
  _proto.hostRelatedSetup = function hostRelatedSetup() {
    if (this.leapContext.hostInfo.hostType === 'web') {
      this._whiteListedHostDomains = [].concat(whitelistDomains[this.leapContext.hostInfo.env + "_" + this.leapContext.hostInfo.region] || [], devDomains, [leapHostTestAppDomain, jd]);
    }
  };
  _proto.postMessage = function postMessage(message) {
    var _this$leapContext, _this$leapContext$hos, _this$leapContext$hos2, _message$sdkVersion;
    // Always append appSessionId to the message args sent to Host for validation
    message.args = _extends({}, message.args || {});
    if ((_this$leapContext = this.leapContext) !== null && _this$leapContext !== void 0 && (_this$leapContext$hos = _this$leapContext.hostInfo) !== null && _this$leapContext$hos !== void 0 && _this$leapContext$hos.appSessionId) message.args.appSessionId = (_this$leapContext$hos2 = this.leapContext.hostInfo) === null || _this$leapContext$hos2 === void 0 ? void 0 : _this$leapContext$hos2.appSessionId;
    message.sdkVersion = (_message$sdkVersion = message.sdkVersion) !== null && _message$sdkVersion !== void 0 ? _message$sdkVersion : 2;
    this.parentWindow.postMessage(message, '*');
  };
  _proto.registerMessageEventListener = function registerMessageEventListener() {
    window.addEventListener('message', this.receiveMessage.bind(this), false);
  };
  _proto.receiveMessage = function receiveMessage(event) {
    var _this$_whiteListedHos;
    // Origin is not white-listed, ignore message
    // mobile doesn't have host
    if (((_this$_whiteListedHos = this._whiteListedHostDomains) === null || _this$_whiteListedHos === void 0 ? void 0 : _this$_whiteListedHos.length) > 0 && !this._whiteListedHostDomains.includes(event.origin)) {
      return;
    }
    if (!!event.data.command) {
      var command = event.data.command;
      if (!!event.data.payload) {
        _BaseApi.prototype.handleCommand.call(this, command, event.data.payload);
      } else {
        _BaseApi.prototype.handleCommand.call(this, command);
      }
    }
  };
  _createClass(IframeWindow, [{
    key: "accounting",
    get: function get() {
      return this._accounting;
    }
  }, {
    key: "app",
    get: function get() {
      return this._app;
    }
  }, {
    key: "calc",
    get: function get() {
      return this._calc;
    }
  }, {
    key: "card",
    get: function get() {
      return this._card;
    }
  }, {
    key: "communication",
    get: function get() {
      return this._communication;
    }
  }, {
    key: "document",
    get: function get() {
      return this._document;
    }
  }, {
    key: "infotrack",
    get: function get() {
      return this._infotrack;
    }
  }, {
    key: "lawconnect",
    get: function get() {
      return this._lawconnect;
    }
  }, {
    key: "matter",
    get: function get() {
      return this._matter;
    }
  }, {
    key: "msteams",
    get: function get() {
      return this._msteams;
    }
  }, {
    key: "staff",
    get: function get() {
      return this._staff;
    }
  }, {
    key: "person",
    get: function get() {
      return this._person;
    }
  }, {
    key: "register",
    get: function get() {
      return this._register;
    }
  }, {
    key: "schema",
    get: function get() {
      return this._schema;
    }
  }, {
    key: "system",
    get: function get() {
      return this._system;
    }
  }]);
  return IframeWindow;
}(BaseApi);

var LeapHostSdkFactory = /*#__PURE__*/function () {
  function LeapHostSdkFactory() {}
  LeapHostSdkFactory.getInstance = function getInstance() {
    //we only support desktop and IFrame at the moment
    var requestContext = this.getRequestContext();
    if (!requestContext) return null;
    var newTab = (getQueryStringValue('newTab') || '').toLowerCase() === 'true';
    if (!!window['$4d'] || requestContext.host === 'desktop') return new BrowserFourdApi(requestContext);else return new IframeWindow(requestContext, newTab);
  };
  LeapHostSdkFactory.getRequestContext = function getRequestContext() {
    var _getQueryStringValue;
    var appSessionId = getQueryStringValue('appSessionId');
    if (!appSessionId) return null;
    var host = (_getQueryStringValue = getQueryStringValue('host')) !== null && _getQueryStringValue !== void 0 ? _getQueryStringValue : 'desktop';
    var env = getQueryStringValue('env');
    var region = getQueryStringValue('region');
    var trustedApp = (getQueryStringValue('trustedApp') || '').toLowerCase() === 'true';
    //backward compatiable with v1 messageBus like "autest"
    if (!!env) {
      if (env.includes('liveb')) env = 'liveb';else if (env.includes('live')) env = 'live';else if (env.includes('test')) env = 'test';else if (env.includes('dev')) env = 'dev';
    }
    var requestContext = {
      appSessionId: appSessionId,
      host: host,
      env: env,
      region: region,
      trustedApp: trustedApp
    };
    return requestContext;
  };
  return LeapHostSdkFactory;
}();

export { LeapContext, LeapHostSdkFactory };
//# sourceMappingURL=leaphost.esm.js.map
