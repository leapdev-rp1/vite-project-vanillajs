import { MatterBasedRequest } from '.';
export declare namespace accounting {
    export interface CreateTimeEntryRequest extends MatterBasedRequest {
        data?: CreateTimeEntryFormData;
    }
    interface CreateTimeEntryFormData {
        taskCodeId?: string;
        taxCodeId?: string;
        secondsPerUnit?: BillingUnit;
        ratePerHour?: number;
        includeTax?: boolean;
        transactionDate?: string;
        billingDescription?: string;
        memo?: string;
        staffId?: string;
        billingMode?: BillingMode;
        secondsElapsed?: number;
    }
    type BillingUnit = 60 | 120 | 180 | 240 | 300 | 360 | 600 | 720 | 900 | 1200 | 1800 | 3600;
    export interface CreateFeeEntryRequest extends MatterBasedRequest {
        data?: CreateFeeEntryFormData;
    }
    interface CreateFeeEntryFormData {
        taskCodeId?: string;
        taxCodeId?: string;
        quantity?: number;
        amountEach?: number;
        includeTax?: boolean;
        transactionDate?: string;
        billingDescription?: string;
        billingMode?: BillingMode;
        memo?: string;
        staffId?: string;
    }
    export interface CreateCostRecoveryEntryRequest extends MatterBasedRequest {
        data?: CreateCostRecoveryEntryFormData;
    }
    interface CreateCostRecoveryEntryFormData {
        taskCodeId?: string;
        quantity?: number;
        transactionDate?: string;
        amountEach?: string;
        taxCodeId?: string;
        includeTax?: boolean;
        billingDescription?: string;
        billingMode?: BillingMode;
    }
    enum BillingMode {
        NextInvoice = 0,
        LaterInvoice = 1,
        NotBillable = -1
    }
    export interface CreateInvoiceRequest extends MatterBasedRequest {
        data?: CreateInvoiceFormData;
    }
    interface CreateInvoiceFormData {
        invoiceTo?: string;
        invoiceNumber?: string;
        autoNumber?: boolean;
        transactionDate?: string;
        dueDate?: string;
        memo?: string;
        status?: InvoiceStatus;
        layoutId?: string;
    }
    enum InvoiceStatus {
        Unapproved = 0,
        Approved = 1,
        PrintedOrSent = 3
    }
    export interface CreateOfficeReceiptRequest extends MatterBasedRequest {
        data?: CreateOfficeReceiptFormData;
    }
    interface CreateOfficeReceiptFormData {
        mailingAddress?: string;
        receiptNumber?: string;
        autoNumber?: boolean;
        bankAccountId?: string;
        paymentTypeId?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        transactionDate?: string;
        memo?: string;
        officeReceiptItems?: OfficeReceiptItem[];
    }
    interface OfficeReceiptItem {
        invoiceId?: string;
        splitCardId?: string;
        applyAmount?: string;
    }
    export interface CreateOfficePaymentRequest extends MatterBasedRequest {
        data?: CreateOfficePaymentFormData;
    }
    interface CreateOfficePaymentFormData {
        bankAccountId?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        paymentNumber?: string;
        paymentSent?: boolean;
        paymentTypeId?: string;
        autoNumber?: boolean;
        payToName?: string;
        payToAddress?: string;
        transactionDate?: string;
        officePaymentItems?: OfficePaymentItem[];
    }
    interface OfficePaymentItem {
        matterId?: string;
        description?: string;
        amountIncTax?: number;
        taxCodeId?: string;
    }
    export interface CreateOfficeJournalRequest extends MatterBasedRequest {
        data?: CreateOfficeJournalFormData;
    }
    interface CreateOfficeJournalFormData {
        journalType?: JournalType;
        transactionDate?: string;
        disbursementJournalItems?: DisbursementJournalItem[];
    }
    enum JournalType {
        MatterToMatters = 0,
        WriteOff = 1
    }
    interface DisbursementJournalItem {
        matterId?: string;
        reason?: string;
        amountDebitIncTax?: number;
        amountCreditIncTax?: number;
        taxCodeId?: string;
    }
    export interface CreateTrustReceiptRequest extends MatterBasedRequest {
        data?: CreateTrustReceiptFormData;
    }
    interface CreateTrustReceiptFormData {
        bankAccountId?: string;
        paymentTypeId?: string;
        receiptNumber?: string;
        autoNumber?: boolean;
        receivedFrom?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        transactionDate?: string;
        trustReceiptItems?: TrustReceiptItem[];
    }
    interface TrustReceiptItem {
        matterId?: string;
        reason?: string;
        amount?: number;
    }
    interface PaymentTypeDetails {
        bsb?: string;
        accountNumber?: string;
        accountName?: string;
        drawer?: string;
        chequeNumber?: string;
        payableTo?: string;
        authorisationNumber?: string;
        expiryDate?: string;
        memo?: string;
        billerCode?: string;
        billerReference?: string;
    }
    export interface CreateTrustPaymentRequest extends MatterBasedRequest {
        data?: CreateTrustPaymentFormData;
    }
    interface CreateTrustPaymentFormData {
        bankAccountId?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        paymentNumber?: string;
        paymentSent?: boolean;
        paymentTypeId?: boolean;
        autoNumber?: boolean;
        payToName?: string;
        payToAddress?: string;
        transactionDate?: string;
        trustPaymentItems?: TrustPaymentItem[];
    }
    interface TrustPaymentItem {
        matterId?: string;
        reason?: string;
        amount?: number;
    }
    export interface CreateTrustJournalRequest extends MatterBasedRequest {
        data?: CreateTrustJournalFormData;
    }
    interface CreateTrustJournalFormData {
        bankAccountId?: string;
        staffId?: string;
        transactionDate?: string;
        trustJournalItems?: TrustJournalItem[];
    }
    interface TrustJournalItem {
        matterId?: string;
        amountWithdrawal?: number;
        amountDeposit?: number;
        reason?: string;
    }
    export interface CreateTrustToOfficeRequest extends MatterBasedRequest {
        data?: CreateTrustToOfficeFormData;
    }
    interface CreateTrustToOfficeFormData {
        trustAccountId?: string;
        officeAccountId?: string;
        payToName?: string;
        payToAddress?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        reason?: string;
        paymentNumber?: string;
        autoPaymentNumber?: boolean;
        receiptNumber?: string;
        autoReceiptNumber?: boolean;
        transactionDate?: string;
        invoices?: CreateTrustToOfficeFormInvoiceItem[];
    }
    interface CreateTrustToOfficeFormInvoiceItem {
        invoiceId: string;
        amountApplied?: number;
    }
    export interface CreateNewPaymentRequestRequest extends MatterBasedRequest {
        data?: CreateNewPaymentRequestFormData;
    }
    interface CreateNewPaymentRequestFormData {
        amount?: number;
        bankAccountId?: string;
        payToName?: string;
        payToAddress?: string;
        dateRequired?: string;
        paymentTypeDetails?: PaymentTypeDetails;
        requestedByStaffId?: string;
        reason?: string;
        authorisedByStaffId?: string;
        paymentTypeId?: string;
    }
    export interface CreateNewOfficePaymentRequestRequest extends CreateNewPaymentRequestRequest {
        taxCodeId?: string;
        includeTax?: boolean;
    }
    export interface CreateNewTrustPaymentRequestRequest extends CreateNewPaymentRequestRequest {
    }
    export interface ReloadFinancialSummaryRequest extends MatterBasedRequest {
    }
    export interface ReloadTimeFeeListRequest extends MatterBasedRequest {
    }
    export interface ReloadOfficeLedgerRequest extends MatterBasedRequest {
    }
    export interface ReloadAnticipatedPaymentListRequest extends MatterBasedRequest {
    }
    export interface ReloadCostRecoveryListRequest extends MatterBasedRequest {
    }
    export interface ReloadTrustLedgerRequest extends MatterBasedRequest {
    }
    export interface ReloadControlledMoneyListRequest extends MatterBasedRequest {
    }
    export interface ReloadPowerMoneyListRequest extends MatterBasedRequest {
    }
    export interface ReloadTransitMoneyListRequest extends MatterBasedRequest {
    }
    export interface OpenFeeRequest extends MatterBasedRequest {
        feeId: string;
        isAutoTime: boolean;
        timed: boolean;
    }
    export interface Api {
        createTimeEntry(request: CreateTimeEntryRequest): void;
        createFeeEntry(request: CreateFeeEntryRequest): void;
        createCostRecovery(request: CreateCostRecoveryEntryRequest): void;
        createInvoice(request: CreateInvoiceRequest): Promise<boolean>;
        createOfficeReceipt(request: CreateOfficeReceiptRequest): void;
        createOfficePayment(request: CreateOfficePaymentRequest): void;
        createOfficeJournal(request: CreateOfficeJournalRequest): void;
        createTrustReceipt(request: CreateTrustReceiptRequest): void;
        createTrustPayment(request: CreateTrustPaymentRequest): void;
        createTrustJournal(request: CreateTrustJournalRequest): void;
        createTrustToOffice(request: CreateTrustToOfficeRequest): void;
        createOfficePaymentRequest(request: CreateNewOfficePaymentRequestRequest): void;
        createTrustPaymentRequest(request: CreateNewTrustPaymentRequestRequest): void;
        reloadFinancialSummary(request: ReloadFinancialSummaryRequest): void;
        reloadTimeFeeList(request: ReloadTimeFeeListRequest): void;
        reloadOfficeLedger(request: ReloadOfficeLedgerRequest): void;
        reloadAnticipatedPaymentList(request: ReloadAnticipatedPaymentListRequest): void;
        reloadCostRecoveryList(request: ReloadCostRecoveryListRequest): void;
        reloadTrustLedger(request: ReloadTrustLedgerRequest): void;
        reloadControlledMoneyList(request: ReloadControlledMoneyListRequest): void;
        reloadPowerMoneyList(request: ReloadPowerMoneyListRequest): void;
        reloadTransitMoneyList(request: ReloadTransitMoneyListRequest): void;
        /**
         * Open a fee form with feeId.
         * @param request set timed to false to open a fee, true to open a time entry.
         * Set isAutoTime to true will always open a autotime time entry.
         */
        openFee(request: OpenFeeRequest): void;
    }
    export {};
}
