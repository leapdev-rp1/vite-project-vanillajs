import { calc } from './calc';
import { card } from '././card';
import { communication } from './communication';
import { document } from './document';
import { lawconnect } from './lawconnect';
import { matter } from './matter';
import { msteams } from './msteams';
import { system } from './system';
import { app } from './app';
import { infotrack } from './infotrack';
import { accounting } from './accounting';
import { person } from './person';
import { register } from './register';
import { schema } from './schema';
import { staff } from './staff';
import { UserInfo } from '@leapdev/auth-agent/src/lib/types';
export interface BaseRequest {
    appSessionId?: string;
    close?: boolean;
}
export interface MatterBasedRequest extends BaseRequest {
    matterId: string;
}
export interface HostResponse {
    isSuccess: boolean;
    error: string;
    data: any;
}
export declare type MatterContext = {
    matterId: string;
    [key: string]: any;
};
export declare type CardContext = {
    cardId: string;
    [key: string]: any;
};
export declare type PersonContext = {
    personId: string;
    [key: string]: any;
};
export interface RequestContext {
    appSessionId: string;
    host: string;
    env: string;
    region: string;
    trustedApp?: boolean;
    newTab?: boolean;
}
export declare class LeapContext {
    readonly context: MatterContext | CardContext | PersonContext;
    readonly hostInfo: HostInfo;
    constructor(context: MatterContext | CardContext | PersonContext, hostInfo: HostInfo);
}
export declare class HostInfo {
    readonly appSessionId: string;
    readonly hostType: string;
    readonly hostVersion: string;
    readonly env: string;
    readonly region: string;
    constructor(appSessionId: string, hostType: string, hostVersion: string, env: string, region: string);
}
export interface Api {
    accounting: accounting.Api;
    app: app.Api;
    calc: calc.Api;
    communication: communication.Api;
    document: document.Api;
    infotrack: infotrack.Api;
    lawconnect: lawconnect.Api;
    matter: matter.Api;
    msteams: msteams.Api;
    person: person.Api;
    register: register.Api;
    schema: schema.Api;
    system: system.Api;
    card: card.Api;
    staff: staff.Api;
    leapContext: LeapContext;
    init(leapAuthClientId?: string): Promise<void>;
    getRefreshedAccessToken(): Promise<string>;
    getDecodedRefreshedAccessToken(): Promise<any>;
    getUserInfo(): Promise<UserInfo>;
    registerHostMessageHandler(command: string, callback?: (param?: any) => void): void;
    deregisterHostMessageHandler(command: string): void;
}
