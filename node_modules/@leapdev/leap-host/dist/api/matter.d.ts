import { BaseRequest, MatterBasedRequest } from '.';
export declare namespace matter {
    interface OpenTableRequest extends MatterBasedRequest {
        tableId: string;
        order?: number;
        relatedLayout?: boolean;
    }
    interface OpenMatterRequest extends MatterBasedRequest {
    }
    interface Matter {
        matterId: string;
        fileNumber: string;
        firstDescription: string;
        secondDescription: string;
        customDescription: string;
        matterTypeName: string;
        matterTypeId: string;
        matterStatus: string;
        isCurrent: boolean;
        state: string;
        responsibleStaffId: string;
        creditStaffId: string;
        actingStaffId: string;
        assistingStaffId: string;
        isArchived: boolean;
        deleted: boolean;
        instructionDate: string;
        billingMode: number;
        isMatterAccessible: boolean;
    }
    interface SelectMatterRequest extends BaseRequest {
        /**
         * defaults to false, set it to true allows multiple selection.
         */
        multiSelection?: boolean;
        showArchived?: boolean;
        /**
         * pre-populates the string in the search box.
         */
        searchString?: string;
        suggestedMatters?: string[];
    }
    interface Api {
        openTable(request: OpenTableRequest): void;
        openMatter(request: OpenMatterRequest): void;
        /**
         * Return selected matter(s).
         */
        selectMatter(request?: SelectMatterRequest): Promise<Matter[]>;
    }
}
