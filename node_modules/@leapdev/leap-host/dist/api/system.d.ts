import { BaseRequest } from '.';
export declare namespace system {
    interface BaseBrowserConfig {
        url: string;
        openExternal: boolean;
        close?: boolean;
        useNativeLoading?: boolean;
    }
    interface FourdBrowserConfig {
        showAddressBar?: boolean;
        hideControls?: boolean;
        width?: number;
        height?: number;
        minWidth?: number;
        minHeight?: number;
        maxWidth?: number;
        maxHeight?: number;
        fixedWindowSize?: boolean;
        closeHandler?: string;
        independentWindow?: boolean;
        windowTitle?: string;
    }
    type WebBrowserConfig = {};
    type BrowserConfig = BaseBrowserConfig & (WebBrowserConfig | FourdBrowserConfig);
    interface MessageRequest extends BaseRequest {
        message: string;
    }
    interface DialogRequest extends MessageRequest {
        dialogType: 'alert' | 'error' | 'confirmation' | 'info';
        icon?: 'none' | 'warning' | 'error' | 'info' | 'success' | 'update' | 'licence' | 'question' | 'offline' | 'locked';
        title?: string;
        confirmButtonText?: string;
        cancelButtonText?: string;
    }
    interface SystemInfo {
        hostType: 'desktop' | 'web' | 'android' | 'ios';
        hostVersion: string;
    }
    interface SetWindowTitleRequest extends BaseRequest {
        title: string;
    }
    interface Api {
        openTwitter(request: BaseRequest): void;
        close(): void;
        hide(): void;
        wait(request?: MessageRequest): void;
        resume(): void;
        cancelClose(): void;
        /**
         * (Deprecated, replaced with openDialog) Open up an alert dialog box.
         * @param request Provide the message you want to display on the dialog box.
         */
        alert(request: MessageRequest): void;
        /**
         * (Deprecated, replaced with openDialog) Open up an error dialog box.
         * @param request Provide the message you want to display on the dialog box.
         */
        error(request: MessageRequest): void;
        /**
         * Open up a dialog box with custom message.
         * @param request Provide the dialog box type and message you want to display on the dialog box.
         */
        openDialog(request: DialogRequest): Promise<boolean>;
        openUrl(config: BrowserConfig): void;
        getSystemInfo(): Promise<SystemInfo>;
        setWindowTitle(request: SetWindowTitleRequest): void;
        /**
         * Register a handler when the "Close" button of the window that hosts the
         * app is clicked. An app developer is expected to reply within 0.5 second
         * whether the host should cancel the closure, otherwise the host system
         * will close
         * @param handler a function that will be invoked when "Close" button is
         * clicked. This is a good time to clean up resources or notify users when
         * the data entry form is dirty. The function returns a promise whose value
         * indicates whether the host should cancel the closure.
         */
        onBeforeClose(handler: () => Promise<boolean>): void;
        /**
         * Send a custom request object to the host - Dedicated only for requests from internal LEAP Apps
         * Either the host or this sdk should prevent the operation if the app not trusted
         * TODO: finalise decision and handle calls from non-trusted apps
         * @param hasResponse default to false
         */
        send(request: any, hasResponse?: boolean): Promise<any>;
        /**
         * Notify the host system when your app has finished loading
         */
        finishLoading(): void;
    }
}
