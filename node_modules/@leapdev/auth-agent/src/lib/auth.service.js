var _LeapAuthService_authHost, _LeapAuthService_clientId, _LeapAuthService_xhr, _LeapAuthService_redirectUrl;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { isFunction, merge } from 'lodash';
const LEAP_AUTH_CLOSE_WINDOW_URL = '/oauth/close';
export class LeapAuthService {
    constructor(authHost, clientId) {
        _LeapAuthService_authHost.set(this, void 0);
        _LeapAuthService_clientId.set(this, void 0);
        this.getAccessTokenByJti = (jti) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'POST',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
                    options: {
                        body: {
                            assertion: jti,
                            grant_type: "urn:ietf:params:oauth:grant-type:jti",
                            client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f"),
                        },
                    },
                    accessToken: undefined,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response.access_token);
                    else
                        return reject(response);
                });
            });
        };
        this.getRedirections = () => {
            //* local development
            //return import('../../config/redirections_v2.json');
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: 'https://cdn.leap.com.au/leap_auth/auth_agent/redirections_v2.json',
                    options: null,
                    accessToken: undefined,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.exchangeAuthCodeForAccessToken = (params) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'POST',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
                    options: {
                        body: {
                            grant_type: 'authorization_code',
                            code: params.code,
                            code_verifier: params.verifier,
                            client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f"),
                            redirect_uri: params.redirectUri,
                        },
                    },
                    accessToken: undefined,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.renewAccessToken = (params) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'POST',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
                    options: {
                        body: {
                            grant_type: 'refresh_token',
                            refresh_token: params.refreshToken,
                            code_verifier: params.verifier,
                            client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f"),
                        },
                    },
                    accessToken: undefined,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.userInfo = (token) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/api/userinfo`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.linkUser = (params) => {
            const { jti, newWindow, callback } = params;
            const redirectUrl = newWindow
                ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL
                : params.redirectUrl;
            const requestUrl = `/cloudprovider/link?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&prompt=none&jti=${jti}&callback=${redirectUrl}`;
            __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, { requestUrl, newWindow, callback });
        };
        this.unlinkUser = (params) => {
            const { jti, newWindow, callback } = params;
            const redirectUrl = newWindow
                ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL
                : params.redirectUrl;
            const requestUrl = `/cloudprovider/unlink?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&jti=${jti}&callback=${redirectUrl}`;
            __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, { requestUrl, newWindow, callback });
        };
        this.getCloudProviderToken = (token, jti) => {
            const url = `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/accesstoken` + (jti ? '/' + jti : '');
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: url,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.cloudProviderUserInfo = (token) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/userinfo`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.cloudProviderReauthenticate = (params) => {
            const { nonce, newWindow, callback } = params;
            const redirectUrl = newWindow
                ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL
                : params.redirectUrl;
            const requestUrl = `/cloudprovider/reauthenticate?nonce=${nonce}&redirectUrl=${redirectUrl}`;
            __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, { requestUrl, newWindow, callback });
        };
        this.cloudProviderReauthenticateLink = (token) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/reauthenticate/link`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.cloudProviderUpdate = (params) => {
            const { firmId, cloudProviderId, token } = params;
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'PUT',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/api/firms/${firmId}`,
                    options: {
                        body: { id: firmId, cloudProviderId: cloudProviderId }
                    },
                    accessToken: token
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.statusAdminConsent = (token) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/adminconsent/status?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.getAdminConsent = (params) => {
            const { domain, newWindow, callback } = params;
            const redirectUrl = newWindow
                ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL
                : params.redirectUrl;
            const requestUrl = `/cloudprovider/adminconsent?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&redirectUrl=${redirectUrl}${domain ? '&domain=' + domain : ''}`;
            __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, { requestUrl, newWindow, callback });
        };
        this.revokeAdminConsent = (token) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'DELETE',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/adminconsent?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 204)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.getLinkMap = (token, allUsers) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'GET',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/linkmap?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}${allUsers ? '&allUsers=true' : ''}`,
                    options: null,
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.setLinkMap = (token, linkMap) => {
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'PUT',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/linkmap?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
                    options: { body: linkMap },
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.authoriseSupport = (token, params) => {
            const { code, duration } = params;
            return new Promise((resolve, reject) => {
                __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
                    method: 'POST',
                    endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/support/authorization`,
                    options: {
                        body: {
                            requestCode: code,
                            duration,
                            client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f"),
                        },
                    },
                    accessToken: token,
                }, (response, status) => {
                    if (status === 200)
                        return resolve(response);
                    else
                        return reject(response);
                });
            });
        };
        this.changePassword = (params) => {
            const { newWindow, callback, redirectUrl } = params;
            let changePasswordUrl = `/oauth/changepassword?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`;
            let redirect_uri = '';
            let noListener = false;
            if (newWindow) {
                if (!!callback && typeof callback === 'function') {
                    redirect_uri = __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL;
                }
                else {
                    redirect_uri = '';
                    noListener = true; // open a new tab for changing password without adding an message event listener in this window
                }
            }
            else {
                redirect_uri =
                    __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") +
                        '/oauth/logout?force=true' +
                        '&redirect_uri=' +
                        (redirectUrl || window.location.href);
            }
            if (redirect_uri) {
                changePasswordUrl += `&redirect_uri=${encodeURIComponent(redirect_uri)}`;
            }
            __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
                requestUrl: changePasswordUrl,
                newWindow,
                callback,
                noListener,
            });
        };
        _LeapAuthService_xhr.set(this, (params, onload) => {
            const { method, endpoint, accessToken } = params;
            let { options } = params;
            options = merge({}, {
                contentType: 'application/json',
                accessControlAllowOrigin: '*',
                body: undefined,
            }, options || {});
            const xhr = new XMLHttpRequest();
            xhr.open(method, endpoint, true);
            xhr.setRequestHeader('Content-type', options.contentType);
            xhr.setRequestHeader('Access-Control-Allow-Origin', options.accessControlAllowOrigin);
            if (accessToken)
                xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
            xhr.onload = () => {
                try {
                    let resp;
                    if (xhr.response)
                        resp = JSON.parse(xhr.response);
                    onload(resp, xhr.status);
                }
                catch (e) {
                    onload(xhr.response, xhr.status);
                }
            };
            if (options.body)
                options.body = JSON.stringify(options.body);
            xhr.send(options.body);
        });
        _LeapAuthService_redirectUrl.set(this, (params) => {
            const { requestUrl, newWindow, callback, noListener } = params;
            const fullUrl = __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + requestUrl;
            if (newWindow) {
                const childWindow = window.open(fullUrl, '_blank');
                const eventHandler = (event) => {
                    if (event && event.data === 'closeMe' && childWindow) {
                        childWindow.close();
                        if (isFunction(callback)) {
                            callback();
                            window.removeEventListener('message', eventHandler, false);
                        }
                    }
                };
                if (!noListener) {
                    window.addEventListener('message', eventHandler, false);
                }
            }
            else {
                window.location.href = fullUrl;
            }
        });
        __classPrivateFieldSet(this, _LeapAuthService_authHost, authHost, "f");
        __classPrivateFieldSet(this, _LeapAuthService_clientId, clientId, "f");
    }
}
_LeapAuthService_authHost = new WeakMap(), _LeapAuthService_clientId = new WeakMap(), _LeapAuthService_xhr = new WeakMap(), _LeapAuthService_redirectUrl = new WeakMap();
//# sourceMappingURL=auth.service.js.map