import { AccountLink, InitOptions, UserInfo } from './types';
export declare const AuthAgent: {
    init: (options: InitOptions) => Promise<string | undefined | boolean>;
    registerHook: (hookName: string, callback: (params?: any) => any) => void;
    login: () => Promise<string | undefined>;
    logout: (force?: boolean, redirectUrl?: string | undefined) => Promise<void>;
    getAccessToken: () => string;
    getRefreshedAccessToken: () => Promise<string>;
    getDecodedAccessToken: () => any;
    getDecodedRefreshedAccessToken: () => Promise<any>;
    userInfo: () => Promise<UserInfo>;
    linkUser: (redirectUrl?: string | undefined, newWindow?: boolean | undefined, callback?: any) => Promise<void>;
    unlinkUser: (redirectUrl?: string | undefined, newWindow?: boolean | undefined, callback?: any) => Promise<void>;
    getCloudProviderToken: (jti?: string | undefined) => Promise<any>;
    cloudProviderUserInfo: () => Promise<any>;
    cloudProviderReauthenticate: (nonce: string | undefined, redirectUrl: string | undefined, newWindow: boolean | undefined, callback: any) => Promise<void>;
    cloudProviderUpdate: (cloudProviderId: 'microsoft') => Promise<void>;
    statusAdminConsent: () => Promise<boolean>;
    getAdminConsent: (domain?: string | undefined, redirectUrl?: string | undefined, newWindow?: boolean | undefined, callback?: any) => void;
    revokeAdminConsent: () => Promise<boolean>;
    getLinkMap: (allUsers?: boolean | undefined) => Promise<AccountLink[]>;
    setLinkMap: (linkMap: AccountLink[]) => Promise<void>;
    authoriseSupport: (code: string, duration: number) => Promise<string>;
    changePassword: (redirectUrl?: string | undefined, newWindow?: boolean | undefined, callback?: any) => void;
    registerEventListener: (topic: string, messageType: string, callback: any) => void;
    passthrough: (url: string, newWindow?: boolean, authHost?: string | undefined) => Promise<void>;
};
