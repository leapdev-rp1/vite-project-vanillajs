import { AccountLink, HookName, Hooks, InitOptions, UserInfo } from './types';
export declare class Authentication {
    #private;
    constructor(options: InitOptions);
    registerEventListenerForUserChannel: (params: {
        topic: string;
        messageType: string;
        callback: any;
    }) => void;
    initNotification: () => Promise<void>;
    destroyNotification: () => void;
    login: (noPrompt?: boolean | undefined) => Promise<string | undefined>;
    logout: (force?: boolean, redirectUrl?: string | undefined) => void;
    getAccessToken: () => string;
    getRefreshedAccessToken: () => Promise<string>;
    getDecodedAccessToken: () => any;
    getDecodedRefreshedAccessToken: () => Promise<any>;
    getHooks: () => Hooks | undefined;
    setHook: (params: {
        name: string;
        callback: (params?: any) => any;
    }) => void;
    autoLogin: () => boolean;
    autoLogout: () => boolean;
    idleTimeoutInMinutes: () => number;
    checkTokenInUrl: () => boolean;
    verifySession: () => Promise<boolean>;
    checkAuthCode: () => Promise<boolean>;
    getUserInfo: () => Promise<UserInfo>;
    linkUser: (params: {
        redirectUrl?: string;
        newWindow?: boolean;
        callback?: any;
    }) => Promise<void>;
    unlinkUser: (params: {
        redirectUrl?: string;
        newWindow?: boolean;
        callback?: any;
    }) => Promise<void>;
    getCloudProviderToken: (jti?: string | undefined) => Promise<any>;
    cloudProviderUserInfo: () => Promise<any>;
    cloudProviderReauthenticate: (params: {
        redirectUrl?: string;
        nonce?: string;
        newWindow?: boolean;
        callback?: any;
    }) => Promise<void>;
    cloudProviderUpdate: (cloudProviderId: 'microsoft') => Promise<void>;
    statusAdminConsent: () => Promise<boolean>;
    getAdminConsent: (params: {
        domain?: string;
        redirectUrl?: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    revokeAdminConsent: () => Promise<boolean>;
    getLinkMap: (allUsers?: boolean) => Promise<AccountLink[]>;
    setLinkMap: (linkMap: Array<AccountLink>) => Promise<void>;
    authoriseSupport: (params: {
        code: string;
        duration: number;
    }) => Promise<string>;
    changePassword: (params: {
        redirectUrl?: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    passthrough: (params: {
        url: string;
        newWindow: boolean;
        authHost?: string;
    }) => Promise<void>;
    triggerHooks: (hookName: HookName) => Promise<any>;
    afterAuthenticated: () => Promise<string | undefined>;
    runIframe: (authorizeUrl: string, state: string, timeoutInSeconds?: number) => Promise<any>;
}
