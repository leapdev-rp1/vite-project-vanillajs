export declare type Complete<T> = {
    [P in keyof Required<T>]: Pick<T, P> extends Required<Pick<T, P>> ? T[P] : T[P] | undefined;
};
export declare enum HookName {
    afterLogin = "afterLogin",
    beforeLogout = "beforeLogout",
    uniqueSessionTrigger = "uniqueSessionTrigger",
    afterRefreshToken = "afterRefreshToken"
}
export declare type Hooks = {
    afterLogin?: (params?: any) => any;
    beforeLogout?: (params?: any) => any;
    uniqueSessionTrigger?: (params?: any) => any;
    afterRefreshToken?: (params?: any) => any;
};
export declare type InitOptions = {
    authHost: string;
    clientId: string;
    scopes: string[];
    autoRefreshToken?: boolean;
    autoLogin?: boolean;
    autoLogout?: boolean;
    idleTimeoutInMinutes?: number;
    uniqueSession?: boolean;
    hooks?: Hooks;
};
export declare type UserInfo = {
    sub: string;
    userType: string;
    userId: string;
    email: string;
    firstName: string;
    lastName: string;
    firmId: string;
    firmName: string;
    firmType: number;
    staffId: string;
    env: string;
    region: string;
    type: number;
    countryCode: number;
    externalUser: any;
    firmAdminConsent: {
        given: boolean;
        tenantId: string;
        adminConsentDomain: string;
        renewalRequired: boolean;
    };
};
export declare type ReauthenticateLink = {
    url: string;
    nonce: string;
};
export declare type AccountLink = {
    externalUser: {
        id: string;
        email: string;
        name: string;
    };
    internalUser: {
        id: string;
        staffId?: string;
    };
};
export declare type LeapToken = {
    access_token: string;
    expires_in: number;
    refresh_token: string;
};
export declare type Redirections = {
    topLevelDomains: Array<string>;
    environments: Array<{
        criteria: {
            region: string;
            environment: 'test' | 'live' | 'liveb';
        };
        topLevelDomain: string;
        authHost: string;
        applications: Array<string>;
    }>;
    environmentVariables: {
        live: {
            prefixMappings: {
                [key: string]: string;
            };
        };
        liveb: {
            prefixMappings: {
                [key: string]: string;
            };
        };
        test: {
            prefixMappings: {
                [key: string]: string;
            };
        };
    };
};
