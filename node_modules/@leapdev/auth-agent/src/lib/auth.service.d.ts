import { AccountLink, LeapToken, ReauthenticateLink, Redirections, UserInfo } from './types';
export declare class LeapAuthService {
    #private;
    constructor(authHost: string, clientId: string);
    getAccessTokenByJti: (jti: string) => Promise<string>;
    getRedirections: () => Promise<Redirections>;
    exchangeAuthCodeForAccessToken: (params: {
        code: string;
        redirectUri: string;
        verifier: string;
    }) => Promise<LeapToken>;
    renewAccessToken: (params: {
        refreshToken: string;
        verifier: string;
    }) => Promise<LeapToken>;
    userInfo: (token: string | undefined) => Promise<UserInfo>;
    linkUser: (params: {
        redirectUrl: string;
        jti: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    unlinkUser: (params: {
        redirectUrl: string;
        jti: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    getCloudProviderToken: (token: string, jti?: string | undefined) => Promise<any>;
    cloudProviderUserInfo: (token: string) => Promise<any>;
    cloudProviderReauthenticate: (params: {
        redirectUrl: string;
        nonce: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    cloudProviderReauthenticateLink: (token: string) => Promise<ReauthenticateLink>;
    cloudProviderUpdate: (params: {
        firmId: string;
        cloudProviderId: 'microsoft';
        token: string;
    }) => Promise<void>;
    statusAdminConsent: (token: string) => Promise<boolean>;
    getAdminConsent: (params: {
        redirectUrl: string;
        domain?: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
    revokeAdminConsent: (token: string) => Promise<boolean>;
    getLinkMap: (token: string, allUsers: boolean) => Promise<AccountLink[]>;
    setLinkMap: (token: string, linkMap: Array<AccountLink>) => Promise<void>;
    authoriseSupport: (token: string, params: {
        code: string;
        duration: number;
    }) => Promise<string>;
    changePassword: (params: {
        redirectUrl: string;
        newWindow?: boolean;
        callback?: any;
    }) => void;
}
