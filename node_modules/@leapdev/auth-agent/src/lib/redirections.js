export const getRedirectUri = (origin, decodedToken, redirectionConfig) => {
    let result;
    let redirection;
    let redirectUrl;
    const topLevelDomains = redirectionConfig.topLevelDomains;
    const redirections = redirectionConfig.environments;
    const suffix = topLevelDomains.find((suffix) => origin.endsWith(suffix));
    const environmentVariables = redirectionConfig.environmentVariables;
    if (suffix) {
        for (let i = 0; i < redirections.length; i++) {
            redirection = redirections[i];
            const tokenCriteriaMatched = containsKeys(decodedToken, redirection.criteria);
            if (tokenCriteriaMatched &&
                !!containsApplication(redirection.applications, origin)) {
                //* check whether suffix needed to change
                if (redirection.topLevelDomain !== suffix) {
                    //* we need to change the suffix of the origin
                    //* we gonna use `redirection.topLevelDomain` to replace the origin's suffix
                    redirectUrl = origin.replace(suffix, redirection.topLevelDomain);
                }
                //* check whether prefix needed to change
                const envVariables = environmentVariables[redirection.criteria.environment];
                if (envVariables) {
                    const prefixMappings = envVariables['prefixMappings'];
                    const keys = Object.keys(prefixMappings);
                    //* check whether the current origin with anything inside the prefixMappings
                    const needToUpdatePrefixKey = containsApplication(keys, origin);
                    if (needToUpdatePrefixKey) {
                        const prefixValue = prefixMappings[needToUpdatePrefixKey];
                        redirectUrl = redirectUrl
                            ? redirectUrl.replace(needToUpdatePrefixKey, prefixValue)
                            : origin.replace(needToUpdatePrefixKey, prefixValue);
                    }
                }
                break;
            }
        }
        if (!!redirection && !!redirectUrl) {
            result = `${redirection.authHost}/oauth/passthrough?jti=${decodedToken.jti}&redirect=${encodeURIComponent(redirectUrl)}`;
        }
    }
    return result;
};
const containsKeys = (obj1, obj2) => {
    let result = true;
    Object.keys(obj2).forEach((key) => {
        if (obj1[key] !== obj2[key]) {
            result = false;
        }
    });
    return result;
};
const containsApplication = (list, app) => {
    return list.find((appName) => app.startsWith(`http://${appName}`) ||
        app.startsWith(`https://${appName}`));
};
//# sourceMappingURL=redirections.js.map