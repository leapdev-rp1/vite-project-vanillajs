(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('uuid'), require('pubnub')) :
    typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'uuid', 'pubnub'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.AuthAgent = {}, global.lodash, global.uuid, global.Pubnub));
})(this, (function (exports, lodash, uuid, Pubnub) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Pubnub__default = /*#__PURE__*/_interopDefaultLegacy(Pubnub);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var check = function (it) {
      return it && it.Math == Math && it;
    };

    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$V =
      // eslint-disable-next-line es-x/no-global-this -- safe
      check(typeof globalThis == 'object' && globalThis) ||
      check(typeof window == 'object' && window) ||
      // eslint-disable-next-line no-restricted-globals -- safe
      check(typeof self == 'object' && self) ||
      check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
      // eslint-disable-next-line no-new-func -- fallback
      (function () { return this; })() || Function('return this')();

    var objectGetOwnPropertyDescriptor = {};

    var fails$q = function (exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };

    var fails$p = fails$q;

    // Detect IE8's incomplete defineProperty implementation
    var descriptors = !fails$p(function () {
      // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
      return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
    });

    var fails$o = fails$q;

    var functionBindNative = !fails$o(function () {
      // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
      var test = (function () { /* empty */ }).bind();
      // eslint-disable-next-line no-prototype-builtins -- safe
      return typeof test != 'function' || test.hasOwnProperty('prototype');
    });

    var NATIVE_BIND$3 = functionBindNative;

    var call$n = Function.prototype.call;

    var functionCall = NATIVE_BIND$3 ? call$n.bind(call$n) : function () {
      return call$n.apply(call$n, arguments);
    };

    var objectPropertyIsEnumerable = {};

    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$5 = Object.getOwnPropertyDescriptor;

    // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor$5 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

    // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
    objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor$5(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;

    var createPropertyDescriptor$6 = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    var NATIVE_BIND$2 = functionBindNative;

    var FunctionPrototype$2 = Function.prototype;
    var bind$8 = FunctionPrototype$2.bind;
    var call$m = FunctionPrototype$2.call;
    var uncurryThis$r = NATIVE_BIND$2 && bind$8.bind(call$m, call$m);

    var functionUncurryThis = NATIVE_BIND$2 ? function (fn) {
      return fn && uncurryThis$r(fn);
    } : function (fn) {
      return fn && function () {
        return call$m.apply(fn, arguments);
      };
    };

    var uncurryThis$q = functionUncurryThis;

    var toString$9 = uncurryThis$q({}.toString);
    var stringSlice$7 = uncurryThis$q(''.slice);

    var classofRaw$1 = function (it) {
      return stringSlice$7(toString$9(it), 8, -1);
    };

    var global$U = global$V;
    var uncurryThis$p = functionUncurryThis;
    var fails$n = fails$q;
    var classof$b = classofRaw$1;

    var Object$5 = global$U.Object;
    var split$1 = uncurryThis$p(''.split);

    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails$n(function () {
      // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
      // eslint-disable-next-line no-prototype-builtins -- safe
      return !Object$5('z').propertyIsEnumerable(0);
    }) ? function (it) {
      return classof$b(it) == 'String' ? split$1(it, '') : Object$5(it);
    } : Object$5;

    var global$T = global$V;

    var TypeError$i = global$T.TypeError;

    // `RequireObjectCoercible` abstract operation
    // https://tc39.es/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible$8 = function (it) {
      if (it == undefined) throw TypeError$i("Can't call method on " + it);
      return it;
    };

    // toObject with fallback for non-array-like ES3 strings
    var IndexedObject$2 = indexedObject;
    var requireObjectCoercible$7 = requireObjectCoercible$8;

    var toIndexedObject$6 = function (it) {
      return IndexedObject$2(requireObjectCoercible$7(it));
    };

    // `IsCallable` abstract operation
    // https://tc39.es/ecma262/#sec-iscallable
    var isCallable$p = function (argument) {
      return typeof argument == 'function';
    };

    var isCallable$o = isCallable$p;

    var isObject$e = function (it) {
      return typeof it == 'object' ? it !== null : isCallable$o(it);
    };

    var global$S = global$V;
    var isCallable$n = isCallable$p;

    var aFunction = function (argument) {
      return isCallable$n(argument) ? argument : undefined;
    };

    var getBuiltIn$8 = function (namespace, method) {
      return arguments.length < 2 ? aFunction(global$S[namespace]) : global$S[namespace] && global$S[namespace][method];
    };

    var uncurryThis$o = functionUncurryThis;

    var objectIsPrototypeOf = uncurryThis$o({}.isPrototypeOf);

    var getBuiltIn$7 = getBuiltIn$8;

    var engineUserAgent = getBuiltIn$7('navigator', 'userAgent') || '';

    var global$R = global$V;
    var userAgent$5 = engineUserAgent;

    var process$3 = global$R.process;
    var Deno$1 = global$R.Deno;
    var versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;
    var v8 = versions && versions.v8;
    var match, version;

    if (v8) {
      match = v8.split('.');
      // in old Chrome, versions of V8 isn't V8 = Chrome / 10
      // but their correct versions are not interesting for us
      version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }

    // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
    // so check `userAgent` even if `.v8` exists, but 0
    if (!version && userAgent$5) {
      match = userAgent$5.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent$5.match(/Chrome\/(\d+)/);
        if (match) version = +match[1];
      }
    }

    var engineV8Version = version;

    /* eslint-disable es-x/no-symbol -- required for testing */

    var V8_VERSION$1 = engineV8Version;
    var fails$m = fails$q;

    // eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$m(function () {
      var symbol = Symbol();
      // Chrome 38 Symbol has incorrect toString conversion
      // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
      return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
        // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && V8_VERSION$1 && V8_VERSION$1 < 41;
    });

    /* eslint-disable es-x/no-symbol -- required for testing */

    var NATIVE_SYMBOL$1 = nativeSymbol;

    var useSymbolAsUid = NATIVE_SYMBOL$1
      && !Symbol.sham
      && typeof Symbol.iterator == 'symbol';

    var global$Q = global$V;
    var getBuiltIn$6 = getBuiltIn$8;
    var isCallable$m = isCallable$p;
    var isPrototypeOf$4 = objectIsPrototypeOf;
    var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

    var Object$4 = global$Q.Object;

    var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      var $Symbol = getBuiltIn$6('Symbol');
      return isCallable$m($Symbol) && isPrototypeOf$4($Symbol.prototype, Object$4(it));
    };

    var global$P = global$V;

    var String$5 = global$P.String;

    var tryToString$5 = function (argument) {
      try {
        return String$5(argument);
      } catch (error) {
        return 'Object';
      }
    };

    var global$O = global$V;
    var isCallable$l = isCallable$p;
    var tryToString$4 = tryToString$5;

    var TypeError$h = global$O.TypeError;

    // `Assert: IsCallable(argument) is true`
    var aCallable$8 = function (argument) {
      if (isCallable$l(argument)) return argument;
      throw TypeError$h(tryToString$4(argument) + ' is not a function');
    };

    var aCallable$7 = aCallable$8;

    // `GetMethod` abstract operation
    // https://tc39.es/ecma262/#sec-getmethod
    var getMethod$6 = function (V, P) {
      var func = V[P];
      return func == null ? undefined : aCallable$7(func);
    };

    var global$N = global$V;
    var call$l = functionCall;
    var isCallable$k = isCallable$p;
    var isObject$d = isObject$e;

    var TypeError$g = global$N.TypeError;

    // `OrdinaryToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-ordinarytoprimitive
    var ordinaryToPrimitive$1 = function (input, pref) {
      var fn, val;
      if (pref === 'string' && isCallable$k(fn = input.toString) && !isObject$d(val = call$l(fn, input))) return val;
      if (isCallable$k(fn = input.valueOf) && !isObject$d(val = call$l(fn, input))) return val;
      if (pref !== 'string' && isCallable$k(fn = input.toString) && !isObject$d(val = call$l(fn, input))) return val;
      throw TypeError$g("Can't convert object to primitive value");
    };

    var shared$4 = {exports: {}};

    var isPure = false;

    var global$M = global$V;

    // eslint-disable-next-line es-x/no-object-defineproperty -- safe
    var defineProperty$7 = Object.defineProperty;

    var defineGlobalProperty$3 = function (key, value) {
      try {
        defineProperty$7(global$M, key, { value: value, configurable: true, writable: true });
      } catch (error) {
        global$M[key] = value;
      } return value;
    };

    var global$L = global$V;
    var defineGlobalProperty$2 = defineGlobalProperty$3;

    var SHARED = '__core-js_shared__';
    var store$3 = global$L[SHARED] || defineGlobalProperty$2(SHARED, {});

    var sharedStore = store$3;

    var store$2 = sharedStore;

    (shared$4.exports = function (key, value) {
      return store$2[key] || (store$2[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: '3.22.6',
      mode: 'global',
      copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
      license: 'https://github.com/zloirock/core-js/blob/v3.22.6/LICENSE',
      source: 'https://github.com/zloirock/core-js'
    });

    var global$K = global$V;
    var requireObjectCoercible$6 = requireObjectCoercible$8;

    var Object$3 = global$K.Object;

    // `ToObject` abstract operation
    // https://tc39.es/ecma262/#sec-toobject
    var toObject$7 = function (argument) {
      return Object$3(requireObjectCoercible$6(argument));
    };

    var uncurryThis$n = functionUncurryThis;
    var toObject$6 = toObject$7;

    var hasOwnProperty = uncurryThis$n({}.hasOwnProperty);

    // `HasOwnProperty` abstract operation
    // https://tc39.es/ecma262/#sec-hasownproperty
    // eslint-disable-next-line es-x/no-object-hasown -- safe
    var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty(toObject$6(it), key);
    };

    var uncurryThis$m = functionUncurryThis;

    var id = 0;
    var postfix = Math.random();
    var toString$8 = uncurryThis$m(1.0.toString);

    var uid$3 = function (key) {
      return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$8(++id + postfix, 36);
    };

    var global$J = global$V;
    var shared$3 = shared$4.exports;
    var hasOwn$c = hasOwnProperty_1;
    var uid$2 = uid$3;
    var NATIVE_SYMBOL = nativeSymbol;
    var USE_SYMBOL_AS_UID = useSymbolAsUid;

    var WellKnownSymbolsStore = shared$3('wks');
    var Symbol$1 = global$J.Symbol;
    var symbolFor = Symbol$1 && Symbol$1['for'];
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$2;

    var wellKnownSymbol$m = function (name) {
      if (!hasOwn$c(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
        var description = 'Symbol.' + name;
        if (NATIVE_SYMBOL && hasOwn$c(Symbol$1, name)) {
          WellKnownSymbolsStore[name] = Symbol$1[name];
        } else if (USE_SYMBOL_AS_UID && symbolFor) {
          WellKnownSymbolsStore[name] = symbolFor(description);
        } else {
          WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
        }
      } return WellKnownSymbolsStore[name];
    };

    var global$I = global$V;
    var call$k = functionCall;
    var isObject$c = isObject$e;
    var isSymbol$2 = isSymbol$3;
    var getMethod$5 = getMethod$6;
    var ordinaryToPrimitive = ordinaryToPrimitive$1;
    var wellKnownSymbol$l = wellKnownSymbol$m;

    var TypeError$f = global$I.TypeError;
    var TO_PRIMITIVE = wellKnownSymbol$l('toPrimitive');

    // `ToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-toprimitive
    var toPrimitive$1 = function (input, pref) {
      if (!isObject$c(input) || isSymbol$2(input)) return input;
      var exoticToPrim = getMethod$5(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === undefined) pref = 'default';
        result = call$k(exoticToPrim, input, pref);
        if (!isObject$c(result) || isSymbol$2(result)) return result;
        throw TypeError$f("Can't convert object to primitive value");
      }
      if (pref === undefined) pref = 'number';
      return ordinaryToPrimitive(input, pref);
    };

    var toPrimitive = toPrimitive$1;
    var isSymbol$1 = isSymbol$3;

    // `ToPropertyKey` abstract operation
    // https://tc39.es/ecma262/#sec-topropertykey
    var toPropertyKey$4 = function (argument) {
      var key = toPrimitive(argument, 'string');
      return isSymbol$1(key) ? key : key + '';
    };

    var global$H = global$V;
    var isObject$b = isObject$e;

    var document$3 = global$H.document;
    // typeof document.createElement is 'object' in old IE
    var EXISTS$1 = isObject$b(document$3) && isObject$b(document$3.createElement);

    var documentCreateElement$2 = function (it) {
      return EXISTS$1 ? document$3.createElement(it) : {};
    };

    var DESCRIPTORS$e = descriptors;
    var fails$l = fails$q;
    var createElement$1 = documentCreateElement$2;

    // Thanks to IE8 for its funny defineProperty
    var ie8DomDefine = !DESCRIPTORS$e && !fails$l(function () {
      // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
      return Object.defineProperty(createElement$1('div'), 'a', {
        get: function () { return 7; }
      }).a != 7;
    });

    var DESCRIPTORS$d = descriptors;
    var call$j = functionCall;
    var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
    var createPropertyDescriptor$5 = createPropertyDescriptor$6;
    var toIndexedObject$5 = toIndexedObject$6;
    var toPropertyKey$3 = toPropertyKey$4;
    var hasOwn$b = hasOwnProperty_1;
    var IE8_DOM_DEFINE$1 = ie8DomDefine;

    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    objectGetOwnPropertyDescriptor.f = DESCRIPTORS$d ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject$5(O);
      P = toPropertyKey$3(P);
      if (IE8_DOM_DEFINE$1) try {
        return $getOwnPropertyDescriptor$1(O, P);
      } catch (error) { /* empty */ }
      if (hasOwn$b(O, P)) return createPropertyDescriptor$5(!call$j(propertyIsEnumerableModule$1.f, O, P), O[P]);
    };

    var objectDefineProperty = {};

    var DESCRIPTORS$c = descriptors;
    var fails$k = fails$q;

    // V8 ~ Chrome 36-
    // https://bugs.chromium.org/p/v8/issues/detail?id=3334
    var v8PrototypeDefineBug = DESCRIPTORS$c && fails$k(function () {
      // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
      return Object.defineProperty(function () { /* empty */ }, 'prototype', {
        value: 42,
        writable: false
      }).prototype != 42;
    });

    var global$G = global$V;
    var isObject$a = isObject$e;

    var String$4 = global$G.String;
    var TypeError$e = global$G.TypeError;

    // `Assert: Type(argument) is Object`
    var anObject$h = function (argument) {
      if (isObject$a(argument)) return argument;
      throw TypeError$e(String$4(argument) + ' is not an object');
    };

    var global$F = global$V;
    var DESCRIPTORS$b = descriptors;
    var IE8_DOM_DEFINE = ie8DomDefine;
    var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
    var anObject$g = anObject$h;
    var toPropertyKey$2 = toPropertyKey$4;

    var TypeError$d = global$F.TypeError;
    // eslint-disable-next-line es-x/no-object-defineproperty -- safe
    var $defineProperty = Object.defineProperty;
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = 'enumerable';
    var CONFIGURABLE$1 = 'configurable';
    var WRITABLE = 'writable';

    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    objectDefineProperty.f = DESCRIPTORS$b ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
      anObject$g(O);
      P = toPropertyKey$2(P);
      anObject$g(Attributes);
      if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
          O[P] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      } return $defineProperty(O, P, Attributes);
    } : $defineProperty : function defineProperty(O, P, Attributes) {
      anObject$g(O);
      P = toPropertyKey$2(P);
      anObject$g(Attributes);
      if (IE8_DOM_DEFINE) try {
        return $defineProperty(O, P, Attributes);
      } catch (error) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError$d('Accessors not supported');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };

    var DESCRIPTORS$a = descriptors;
    var definePropertyModule$5 = objectDefineProperty;
    var createPropertyDescriptor$4 = createPropertyDescriptor$6;

    var createNonEnumerableProperty$9 = DESCRIPTORS$a ? function (object, key, value) {
      return definePropertyModule$5.f(object, key, createPropertyDescriptor$4(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };

    var makeBuiltIn$2 = {exports: {}};

    var DESCRIPTORS$9 = descriptors;
    var hasOwn$a = hasOwnProperty_1;

    var FunctionPrototype$1 = Function.prototype;
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    var getDescriptor = DESCRIPTORS$9 && Object.getOwnPropertyDescriptor;

    var EXISTS = hasOwn$a(FunctionPrototype$1, 'name');
    // additional protection from minified / mangled / dropped function names
    var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS$9 || (DESCRIPTORS$9 && getDescriptor(FunctionPrototype$1, 'name').configurable));

    var functionName = {
      EXISTS: EXISTS,
      PROPER: PROPER,
      CONFIGURABLE: CONFIGURABLE
    };

    var uncurryThis$l = functionUncurryThis;
    var isCallable$j = isCallable$p;
    var store$1 = sharedStore;

    var functionToString = uncurryThis$l(Function.toString);

    // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
    if (!isCallable$j(store$1.inspectSource)) {
      store$1.inspectSource = function (it) {
        return functionToString(it);
      };
    }

    var inspectSource$4 = store$1.inspectSource;

    var global$E = global$V;
    var isCallable$i = isCallable$p;
    var inspectSource$3 = inspectSource$4;

    var WeakMap$2 = global$E.WeakMap;

    var nativeWeakMap = isCallable$i(WeakMap$2) && /native code/.test(inspectSource$3(WeakMap$2));

    var shared$2 = shared$4.exports;
    var uid$1 = uid$3;

    var keys$1 = shared$2('keys');

    var sharedKey$3 = function (key) {
      return keys$1[key] || (keys$1[key] = uid$1(key));
    };

    var hiddenKeys$4 = {};

    var NATIVE_WEAK_MAP = nativeWeakMap;
    var global$D = global$V;
    var uncurryThis$k = functionUncurryThis;
    var isObject$9 = isObject$e;
    var createNonEnumerableProperty$8 = createNonEnumerableProperty$9;
    var hasOwn$9 = hasOwnProperty_1;
    var shared$1 = sharedStore;
    var sharedKey$2 = sharedKey$3;
    var hiddenKeys$3 = hiddenKeys$4;

    var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
    var TypeError$c = global$D.TypeError;
    var WeakMap$1 = global$D.WeakMap;
    var set$2, get$1, has;

    var enforce = function (it) {
      return has(it) ? get$1(it) : set$2(it, {});
    };

    var getterFor = function (TYPE) {
      return function (it) {
        var state;
        if (!isObject$9(it) || (state = get$1(it)).type !== TYPE) {
          throw TypeError$c('Incompatible receiver, ' + TYPE + ' required');
        } return state;
      };
    };

    if (NATIVE_WEAK_MAP || shared$1.state) {
      var store = shared$1.state || (shared$1.state = new WeakMap$1());
      var wmget = uncurryThis$k(store.get);
      var wmhas = uncurryThis$k(store.has);
      var wmset = uncurryThis$k(store.set);
      set$2 = function (it, metadata) {
        if (wmhas(store, it)) throw new TypeError$c(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset(store, it, metadata);
        return metadata;
      };
      get$1 = function (it) {
        return wmget(store, it) || {};
      };
      has = function (it) {
        return wmhas(store, it);
      };
    } else {
      var STATE = sharedKey$2('state');
      hiddenKeys$3[STATE] = true;
      set$2 = function (it, metadata) {
        if (hasOwn$9(it, STATE)) throw new TypeError$c(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty$8(it, STATE, metadata);
        return metadata;
      };
      get$1 = function (it) {
        return hasOwn$9(it, STATE) ? it[STATE] : {};
      };
      has = function (it) {
        return hasOwn$9(it, STATE);
      };
    }

    var internalState = {
      set: set$2,
      get: get$1,
      has: has,
      enforce: enforce,
      getterFor: getterFor
    };

    var fails$j = fails$q;
    var isCallable$h = isCallable$p;
    var hasOwn$8 = hasOwnProperty_1;
    var DESCRIPTORS$8 = descriptors;
    var CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;
    var inspectSource$2 = inspectSource$4;
    var InternalStateModule$5 = internalState;

    var enforceInternalState = InternalStateModule$5.enforce;
    var getInternalState$4 = InternalStateModule$5.get;
    // eslint-disable-next-line es-x/no-object-defineproperty -- safe
    var defineProperty$6 = Object.defineProperty;

    var CONFIGURABLE_LENGTH = DESCRIPTORS$8 && !fails$j(function () {
      return defineProperty$6(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
    });

    var TEMPLATE = String(String).split('String');

    var makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {
      if (String(name).slice(0, 7) === 'Symbol(') {
        name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
      }
      if (options && options.getter) name = 'get ' + name;
      if (options && options.setter) name = 'set ' + name;
      if (!hasOwn$8(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name)) {
        defineProperty$6(value, 'name', { value: name, configurable: true });
      }
      if (CONFIGURABLE_LENGTH && options && hasOwn$8(options, 'arity') && value.length !== options.arity) {
        defineProperty$6(value, 'length', { value: options.arity });
      }
      if (options && hasOwn$8(options, 'constructor') && options.constructor) {
        if (DESCRIPTORS$8) try {
          defineProperty$6(value, 'prototype', { writable: false });
        } catch (error) { /* empty */ }
      } else value.prototype = undefined;
      var state = enforceInternalState(value);
      if (!hasOwn$8(state, 'source')) {
        state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
      } return value;
    };

    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    // eslint-disable-next-line no-extend-native -- required
    Function.prototype.toString = makeBuiltIn$1(function toString() {
      return isCallable$h(this) && getInternalState$4(this).source || inspectSource$2(this);
    }, 'toString');

    var isCallable$g = isCallable$p;
    var createNonEnumerableProperty$7 = createNonEnumerableProperty$9;
    var makeBuiltIn = makeBuiltIn$2.exports;
    var defineGlobalProperty$1 = defineGlobalProperty$3;

    var defineBuiltIn$9 = function (O, key, value, options) {
      if (!options) options = {};
      var simple = options.enumerable;
      var name = options.name !== undefined ? options.name : key;
      if (isCallable$g(value)) makeBuiltIn(value, name, options);
      if (options.global) {
        if (simple) O[key] = value;
        else defineGlobalProperty$1(key, value);
      } else {
        if (!options.unsafe) delete O[key];
        else if (O[key]) simple = true;
        if (simple) O[key] = value;
        else createNonEnumerableProperty$7(O, key, value);
      } return O;
    };

    var objectGetOwnPropertyNames = {};

    var ceil = Math.ceil;
    var floor$4 = Math.floor;

    // `Math.trunc` method
    // https://tc39.es/ecma262/#sec-math.trunc
    // eslint-disable-next-line es-x/no-math-trunc -- safe
    var mathTrunc = Math.trunc || function trunc(x) {
      var n = +x;
      return (n > 0 ? floor$4 : ceil)(n);
    };

    var trunc = mathTrunc;

    // `ToIntegerOrInfinity` abstract operation
    // https://tc39.es/ecma262/#sec-tointegerorinfinity
    var toIntegerOrInfinity$7 = function (argument) {
      var number = +argument;
      // eslint-disable-next-line no-self-compare -- NaN check
      return number !== number || number === 0 ? 0 : trunc(number);
    };

    var toIntegerOrInfinity$6 = toIntegerOrInfinity$7;

    var max$2 = Math.max;
    var min$5 = Math.min;

    // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex$4 = function (index, length) {
      var integer = toIntegerOrInfinity$6(index);
      return integer < 0 ? max$2(integer + length, 0) : min$5(integer, length);
    };

    var toIntegerOrInfinity$5 = toIntegerOrInfinity$7;

    var min$4 = Math.min;

    // `ToLength` abstract operation
    // https://tc39.es/ecma262/#sec-tolength
    var toLength$9 = function (argument) {
      return argument > 0 ? min$4(toIntegerOrInfinity$5(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };

    var toLength$8 = toLength$9;

    // `LengthOfArrayLike` abstract operation
    // https://tc39.es/ecma262/#sec-lengthofarraylike
    var lengthOfArrayLike$7 = function (obj) {
      return toLength$8(obj.length);
    };

    var toIndexedObject$4 = toIndexedObject$6;
    var toAbsoluteIndex$3 = toAbsoluteIndex$4;
    var lengthOfArrayLike$6 = lengthOfArrayLike$7;

    // `Array.prototype.{ indexOf, includes }` methods implementation
    var createMethod$2 = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = toIndexedObject$4($this);
        var length = lengthOfArrayLike$6(O);
        var index = toAbsoluteIndex$3(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare -- NaN check
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare -- NaN check
          if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        } else for (;length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };

    var arrayIncludes = {
      // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes
      includes: createMethod$2(true),
      // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof
      indexOf: createMethod$2(false)
    };

    var uncurryThis$j = functionUncurryThis;
    var hasOwn$7 = hasOwnProperty_1;
    var toIndexedObject$3 = toIndexedObject$6;
    var indexOf$1 = arrayIncludes.indexOf;
    var hiddenKeys$2 = hiddenKeys$4;

    var push$4 = uncurryThis$j([].push);

    var objectKeysInternal = function (object, names) {
      var O = toIndexedObject$3(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) !hasOwn$7(hiddenKeys$2, key) && hasOwn$7(O, key) && push$4(result, key);
      // Don't enum bug & hidden keys
      while (names.length > i) if (hasOwn$7(O, key = names[i++])) {
        ~indexOf$1(result, key) || push$4(result, key);
      }
      return result;
    };

    // IE8- don't enum bug keys
    var enumBugKeys$3 = [
      'constructor',
      'hasOwnProperty',
      'isPrototypeOf',
      'propertyIsEnumerable',
      'toLocaleString',
      'toString',
      'valueOf'
    ];

    var internalObjectKeys$1 = objectKeysInternal;
    var enumBugKeys$2 = enumBugKeys$3;

    var hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');

    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    // eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
    objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys$1(O, hiddenKeys$1);
    };

    var objectGetOwnPropertySymbols = {};

    // eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
    objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

    var getBuiltIn$5 = getBuiltIn$8;
    var uncurryThis$i = functionUncurryThis;
    var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
    var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
    var anObject$f = anObject$h;

    var concat$2 = uncurryThis$i([].concat);

    // all object keys, includes non-enumerable and symbols
    var ownKeys$1 = getBuiltIn$5('Reflect', 'ownKeys') || function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject$f(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
      return getOwnPropertySymbols ? concat$2(keys, getOwnPropertySymbols(it)) : keys;
    };

    var hasOwn$6 = hasOwnProperty_1;
    var ownKeys = ownKeys$1;
    var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
    var definePropertyModule$4 = objectDefineProperty;

    var copyConstructorProperties$1 = function (target, source, exceptions) {
      var keys = ownKeys(source);
      var defineProperty = definePropertyModule$4.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwn$6(target, key) && !(exceptions && hasOwn$6(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };

    var fails$i = fails$q;
    var isCallable$f = isCallable$p;

    var replacement = /#|\.prototype\./;

    var isForced$2 = function (feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true
        : value == NATIVE ? false
        : isCallable$f(detection) ? fails$i(detection)
        : !!detection;
    };

    var normalize = isForced$2.normalize = function (string) {
      return String(string).replace(replacement, '.').toLowerCase();
    };

    var data = isForced$2.data = {};
    var NATIVE = isForced$2.NATIVE = 'N';
    var POLYFILL = isForced$2.POLYFILL = 'P';

    var isForced_1 = isForced$2;

    var global$C = global$V;
    var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
    var createNonEnumerableProperty$6 = createNonEnumerableProperty$9;
    var defineBuiltIn$8 = defineBuiltIn$9;
    var defineGlobalProperty = defineGlobalProperty$3;
    var copyConstructorProperties = copyConstructorProperties$1;
    var isForced$1 = isForced_1;

    /*
      options.target         - name of the target object
      options.global         - target is the global object
      options.stat           - export as static methods of target
      options.proto          - export as prototype methods of target
      options.real           - real prototype method for the `pure` version
      options.forced         - export even if the native feature is available
      options.bind           - bind methods to the target, required for the `pure` version
      options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
      options.unsafe         - use the simple assignment of property instead of delete + defineProperty
      options.sham           - add a flag to not completely full polyfills
      options.enumerable     - export as enumerable property
      options.dontCallGetSet - prevent calling a getter on target
      options.name           - the .name of the function if it does not match the key
    */
    var _export = function (options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var FORCED, target, key, targetProperty, sourceProperty, descriptor;
      if (GLOBAL) {
        target = global$C;
      } else if (STATIC) {
        target = global$C[TARGET] || defineGlobalProperty(TARGET, {});
      } else {
        target = (global$C[TARGET] || {}).prototype;
      }
      if (target) for (key in source) {
        sourceProperty = source[key];
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor$4(target, key);
          targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];
        FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
        // contained in target
        if (!FORCED && targetProperty !== undefined) {
          if (typeof sourceProperty == typeof targetProperty) continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        }
        // add a flag to not completely full polyfills
        if (options.sham || (targetProperty && targetProperty.sham)) {
          createNonEnumerableProperty$6(sourceProperty, 'sham', true);
        }
        defineBuiltIn$8(target, key, sourceProperty, options);
      }
    };

    var internalObjectKeys = objectKeysInternal;
    var enumBugKeys$1 = enumBugKeys$3;

    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    // eslint-disable-next-line es-x/no-object-keys -- safe
    var objectKeys$2 = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys$1);
    };

    var DESCRIPTORS$7 = descriptors;
    var uncurryThis$h = functionUncurryThis;
    var call$i = functionCall;
    var fails$h = fails$q;
    var objectKeys$1 = objectKeys$2;
    var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
    var propertyIsEnumerableModule = objectPropertyIsEnumerable;
    var toObject$5 = toObject$7;
    var IndexedObject$1 = indexedObject;

    // eslint-disable-next-line es-x/no-object-assign -- safe
    var $assign = Object.assign;
    // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
    var defineProperty$5 = Object.defineProperty;
    var concat$1 = uncurryThis$h([].concat);

    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    var objectAssign = !$assign || fails$h(function () {
      // should have correct order of operations (Edge bug)
      if (DESCRIPTORS$7 && $assign({ b: 1 }, $assign(defineProperty$5({}, 'a', {
        enumerable: true,
        get: function () {
          defineProperty$5(this, 'b', {
            value: 3,
            enumerable: false
          });
        }
      }), { b: 2 })).b !== 1) return true;
      // should work with symbols and should have deterministic property order (V8 bug)
      var A = {};
      var B = {};
      // eslint-disable-next-line es-x/no-symbol -- safe
      var symbol = Symbol();
      var alphabet = 'abcdefghijklmnopqrst';
      A[symbol] = 7;
      alphabet.split('').forEach(function (chr) { B[chr] = chr; });
      return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
      var T = toObject$5(target);
      var argumentsLength = arguments.length;
      var index = 1;
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      var propertyIsEnumerable = propertyIsEnumerableModule.f;
      while (argumentsLength > index) {
        var S = IndexedObject$1(arguments[index++]);
        var keys = getOwnPropertySymbols ? concat$1(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
        var length = keys.length;
        var j = 0;
        var key;
        while (length > j) {
          key = keys[j++];
          if (!DESCRIPTORS$7 || call$i(propertyIsEnumerable, S, key)) T[key] = S[key];
        }
      } return T;
    } : $assign;

    var $$d = _export;
    var assign = objectAssign;

    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    // eslint-disable-next-line es-x/no-object-assign -- required for testing
    $$d({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {
      assign: assign
    });

    var wellKnownSymbol$k = wellKnownSymbol$m;

    var TO_STRING_TAG$4 = wellKnownSymbol$k('toStringTag');
    var test = {};

    test[TO_STRING_TAG$4] = 'z';

    var toStringTagSupport = String(test) === '[object z]';

    var global$B = global$V;
    var TO_STRING_TAG_SUPPORT = toStringTagSupport;
    var isCallable$e = isCallable$p;
    var classofRaw = classofRaw$1;
    var wellKnownSymbol$j = wellKnownSymbol$m;

    var TO_STRING_TAG$3 = wellKnownSymbol$j('toStringTag');
    var Object$2 = global$B.Object;

    // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
      try {
        return it[key];
      } catch (error) { /* empty */ }
    };

    // getting tag from ES6+ `Object.prototype.toString`
    var classof$a = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
      var O, tag, result;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (tag = tryGet(O = Object$2(it), TO_STRING_TAG$3)) == 'string' ? tag
        // builtinTag case
        : CORRECT_ARGUMENTS ? classofRaw(O)
        // ES3 arguments fallback
        : (result = classofRaw(O)) == 'Object' && isCallable$e(O.callee) ? 'Arguments' : result;
    };

    var global$A = global$V;
    var classof$9 = classof$a;

    var String$3 = global$A.String;

    var toString$7 = function (argument) {
      if (classof$9(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
      return String$3(argument);
    };

    var anObject$e = anObject$h;

    // `RegExp.prototype.flags` getter implementation
    // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
    var regexpFlags$1 = function () {
      var that = anObject$e(this);
      var result = '';
      if (that.hasIndices) result += 'd';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.dotAll) result += 's';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };

    var fails$g = fails$q;
    var global$z = global$V;

    // babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
    var $RegExp$2 = global$z.RegExp;

    var UNSUPPORTED_Y$2 = fails$g(function () {
      var re = $RegExp$2('a', 'y');
      re.lastIndex = 2;
      return re.exec('abcd') != null;
    });

    // UC Browser bug
    // https://github.com/zloirock/core-js/issues/1008
    var MISSED_STICKY = UNSUPPORTED_Y$2 || fails$g(function () {
      return !$RegExp$2('a', 'y').sticky;
    });

    var BROKEN_CARET = UNSUPPORTED_Y$2 || fails$g(function () {
      // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
      var re = $RegExp$2('^r', 'gy');
      re.lastIndex = 2;
      return re.exec('str') != null;
    });

    var regexpStickyHelpers = {
      BROKEN_CARET: BROKEN_CARET,
      MISSED_STICKY: MISSED_STICKY,
      UNSUPPORTED_Y: UNSUPPORTED_Y$2
    };

    var objectDefineProperties = {};

    var DESCRIPTORS$6 = descriptors;
    var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
    var definePropertyModule$3 = objectDefineProperty;
    var anObject$d = anObject$h;
    var toIndexedObject$2 = toIndexedObject$6;
    var objectKeys = objectKeys$2;

    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es-x/no-object-defineproperties -- safe
    objectDefineProperties.f = DESCRIPTORS$6 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject$d(O);
      var props = toIndexedObject$2(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;
      while (length > index) definePropertyModule$3.f(O, key = keys[index++], props[key]);
      return O;
    };

    var getBuiltIn$4 = getBuiltIn$8;

    var html$2 = getBuiltIn$4('document', 'documentElement');

    /* global ActiveXObject -- old IE, WSH */

    var anObject$c = anObject$h;
    var definePropertiesModule = objectDefineProperties;
    var enumBugKeys = enumBugKeys$3;
    var hiddenKeys = hiddenKeys$4;
    var html$1 = html$2;
    var documentCreateElement$1 = documentCreateElement$2;
    var sharedKey$1 = sharedKey$3;

    var GT = '>';
    var LT = '<';
    var PROTOTYPE$1 = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO$1 = sharedKey$1('IE_PROTO');

    var EmptyConstructor = function () { /* empty */ };

    var scriptTag = function (content) {
      return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    };

    // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function (activeXDocument) {
      activeXDocument.write(scriptTag(''));
      activeXDocument.close();
      var temp = activeXDocument.parentWindow.Object;
      activeXDocument = null; // avoid memory leak
      return temp;
    };

    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function () {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = documentCreateElement$1('iframe');
      var JS = 'java' + SCRIPT + ':';
      var iframeDocument;
      iframe.style.display = 'none';
      html$1.appendChild(iframe);
      // https://github.com/zloirock/core-js/issues/475
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag('document.F=Object'));
      iframeDocument.close();
      return iframeDocument.F;
    };

    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function () {
      try {
        activeXDocument = new ActiveXObject('htmlfile');
      } catch (error) { /* ignore */ }
      NullProtoObject = typeof document != 'undefined'
        ? document.domain && activeXDocument
          ? NullProtoObjectViaActiveX(activeXDocument) // old IE
          : NullProtoObjectViaIFrame()
        : NullProtoObjectViaActiveX(activeXDocument); // WSH
      var length = enumBugKeys.length;
      while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];
      return NullProtoObject();
    };

    hiddenKeys[IE_PROTO$1] = true;

    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    // eslint-disable-next-line es-x/no-object-create -- safe
    var objectCreate = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE$1] = anObject$c(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE$1] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO$1] = O;
      } else result = NullProtoObject();
      return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
    };

    var fails$f = fails$q;
    var global$y = global$V;

    // babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
    var $RegExp$1 = global$y.RegExp;

    var regexpUnsupportedDotAll = fails$f(function () {
      var re = $RegExp$1('.', 's');
      return !(re.dotAll && re.exec('\n') && re.flags === 's');
    });

    var fails$e = fails$q;
    var global$x = global$V;

    // babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
    var $RegExp = global$x.RegExp;

    var regexpUnsupportedNcg = fails$e(function () {
      var re = $RegExp('(?<a>b)', 'g');
      return re.exec('b').groups.a !== 'b' ||
        'b'.replace(re, '$<a>c') !== 'bc';
    });

    /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
    /* eslint-disable regexp/no-useless-quantifier -- testing */
    var call$h = functionCall;
    var uncurryThis$g = functionUncurryThis;
    var toString$6 = toString$7;
    var regexpFlags = regexpFlags$1;
    var stickyHelpers$1 = regexpStickyHelpers;
    var shared = shared$4.exports;
    var create$4 = objectCreate;
    var getInternalState$3 = internalState.get;
    var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
    var UNSUPPORTED_NCG = regexpUnsupportedNcg;

    var nativeReplace = shared('native-string-replace', String.prototype.replace);
    var nativeExec = RegExp.prototype.exec;
    var patchedExec = nativeExec;
    var charAt$4 = uncurryThis$g(''.charAt);
    var indexOf = uncurryThis$g(''.indexOf);
    var replace$2 = uncurryThis$g(''.replace);
    var stringSlice$6 = uncurryThis$g(''.slice);

    var UPDATES_LAST_INDEX_WRONG = (function () {
      var re1 = /a/;
      var re2 = /b*/g;
      call$h(nativeExec, re1, 'a');
      call$h(nativeExec, re2, 'a');
      return re1.lastIndex !== 0 || re2.lastIndex !== 0;
    })();

    var UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;

    // nonparticipating capturing group, copied from es5-shim's String#split patch.
    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

    if (PATCH) {
      patchedExec = function exec(string) {
        var re = this;
        var state = getInternalState$3(re);
        var str = toString$6(string);
        var raw = state.raw;
        var result, reCopy, lastIndex, match, i, object, group;

        if (raw) {
          raw.lastIndex = re.lastIndex;
          result = call$h(patchedExec, raw, str);
          re.lastIndex = raw.lastIndex;
          return result;
        }

        var groups = state.groups;
        var sticky = UNSUPPORTED_Y$1 && re.sticky;
        var flags = call$h(regexpFlags, re);
        var source = re.source;
        var charsAdded = 0;
        var strCopy = str;

        if (sticky) {
          flags = replace$2(flags, 'y', '');
          if (indexOf(flags, 'g') === -1) {
            flags += 'g';
          }

          strCopy = stringSlice$6(str, re.lastIndex);
          // Support anchored sticky behavior.
          if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$4(str, re.lastIndex - 1) !== '\n')) {
            source = '(?: ' + source + ')';
            strCopy = ' ' + strCopy;
            charsAdded++;
          }
          // ^(? + rx + ) is needed, in combination with some str slicing, to
          // simulate the 'y' flag.
          reCopy = new RegExp('^(?:' + source + ')', flags);
        }

        if (NPCG_INCLUDED) {
          reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
        }
        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

        match = call$h(nativeExec, sticky ? reCopy : re, strCopy);

        if (sticky) {
          if (match) {
            match.input = stringSlice$6(match.input, charsAdded);
            match[0] = stringSlice$6(match[0], charsAdded);
            match.index = re.lastIndex;
            re.lastIndex += match[0].length;
          } else re.lastIndex = 0;
        } else if (UPDATES_LAST_INDEX_WRONG && match) {
          re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
        }
        if (NPCG_INCLUDED && match && match.length > 1) {
          // Fix browsers whose `exec` methods don't consistently return `undefined`
          // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
          call$h(nativeReplace, match[0], reCopy, function () {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
        }

        if (match && groups) {
          match.groups = object = create$4(null);
          for (i = 0; i < groups.length; i++) {
            group = groups[i];
            object[group[0]] = match[group[1]];
          }
        }

        return match;
      };
    }

    var regexpExec$3 = patchedExec;

    var $$c = _export;
    var exec$2 = regexpExec$3;

    // `RegExp.prototype.exec` method
    // https://tc39.es/ecma262/#sec-regexp.prototype.exec
    $$c({ target: 'RegExp', proto: true, forced: /./.exec !== exec$2 }, {
      exec: exec$2
    });

    // TODO: Remove from `core-js@4` since it's moved to entry points

    var uncurryThis$f = functionUncurryThis;
    var defineBuiltIn$7 = defineBuiltIn$9;
    var regexpExec$2 = regexpExec$3;
    var fails$d = fails$q;
    var wellKnownSymbol$i = wellKnownSymbol$m;
    var createNonEnumerableProperty$5 = createNonEnumerableProperty$9;

    var SPECIES$4 = wellKnownSymbol$i('species');
    var RegExpPrototype = RegExp.prototype;

    var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
      var SYMBOL = wellKnownSymbol$i(KEY);

      var DELEGATES_TO_SYMBOL = !fails$d(function () {
        // String methods call symbol-named RegEp methods
        var O = {};
        O[SYMBOL] = function () { return 7; };
        return ''[KEY](O) != 7;
      });

      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$d(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;

        if (KEY === 'split') {
          // We can't use real regex here since it causes deoptimization
          // and serious performance degradation in V8
          // https://github.com/zloirock/core-js/issues/306
          re = {};
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};
          re.constructor[SPECIES$4] = function () { return re; };
          re.flags = '';
          re[SYMBOL] = /./[SYMBOL];
        }

        re.exec = function () { execCalled = true; return null; };

        re[SYMBOL]('');
        return !execCalled;
      });

      if (
        !DELEGATES_TO_SYMBOL ||
        !DELEGATES_TO_EXEC ||
        FORCED
      ) {
        var uncurriedNativeRegExpMethod = uncurryThis$f(/./[SYMBOL]);
        var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
          var uncurriedNativeMethod = uncurryThis$f(nativeMethod);
          var $exec = regexp.exec;
          if ($exec === regexpExec$2 || $exec === RegExpPrototype.exec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              // The native String method already delegates to @@method (this
              // polyfilled function), leasing to infinite recursion.
              // We avoid it by directly calling the native @@method method.
              return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
            }
            return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
          }
          return { done: false };
        });

        defineBuiltIn$7(String.prototype, KEY, methods[0]);
        defineBuiltIn$7(RegExpPrototype, SYMBOL, methods[1]);
      }

      if (SHAM) createNonEnumerableProperty$5(RegExpPrototype[SYMBOL], 'sham', true);
    };

    // `SameValue` abstract operation
    // https://tc39.es/ecma262/#sec-samevalue
    // eslint-disable-next-line es-x/no-object-is -- safe
    var sameValue$1 = Object.is || function is(x, y) {
      // eslint-disable-next-line no-self-compare -- NaN check
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };

    var global$w = global$V;
    var call$g = functionCall;
    var anObject$b = anObject$h;
    var isCallable$d = isCallable$p;
    var classof$8 = classofRaw$1;
    var regexpExec$1 = regexpExec$3;

    var TypeError$b = global$w.TypeError;

    // `RegExpExec` abstract operation
    // https://tc39.es/ecma262/#sec-regexpexec
    var regexpExecAbstract = function (R, S) {
      var exec = R.exec;
      if (isCallable$d(exec)) {
        var result = call$g(exec, R, S);
        if (result !== null) anObject$b(result);
        return result;
      }
      if (classof$8(R) === 'RegExp') return call$g(regexpExec$1, R, S);
      throw TypeError$b('RegExp#exec called on incompatible receiver');
    };

    var call$f = functionCall;
    var fixRegExpWellKnownSymbolLogic$2 = fixRegexpWellKnownSymbolLogic;
    var anObject$a = anObject$h;
    var requireObjectCoercible$5 = requireObjectCoercible$8;
    var sameValue = sameValue$1;
    var toString$5 = toString$7;
    var getMethod$4 = getMethod$6;
    var regExpExec$1 = regexpExecAbstract;

    // @@search logic
    fixRegExpWellKnownSymbolLogic$2('search', function (SEARCH, nativeSearch, maybeCallNative) {
      return [
        // `String.prototype.search` method
        // https://tc39.es/ecma262/#sec-string.prototype.search
        function search(regexp) {
          var O = requireObjectCoercible$5(this);
          var searcher = regexp == undefined ? undefined : getMethod$4(regexp, SEARCH);
          return searcher ? call$f(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString$5(O));
        },
        // `RegExp.prototype[@@search]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
        function (string) {
          var rx = anObject$a(this);
          var S = toString$5(string);
          var res = maybeCallNative(nativeSearch, rx, S);

          if (res.done) return res.value;

          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
          var result = regExpExec$1(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }
      ];
    });

    var wellKnownSymbol$h = wellKnownSymbol$m;
    var create$3 = objectCreate;
    var defineProperty$4 = objectDefineProperty.f;

    var UNSCOPABLES = wellKnownSymbol$h('unscopables');
    var ArrayPrototype$1 = Array.prototype;

    // Array.prototype[@@unscopables]
    // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
      defineProperty$4(ArrayPrototype$1, UNSCOPABLES, {
        configurable: true,
        value: create$3(null)
      });
    }

    // add a key to Array.prototype[@@unscopables]
    var addToUnscopables$1 = function (key) {
      ArrayPrototype$1[UNSCOPABLES][key] = true;
    };

    var iterators = {};

    var fails$c = fails$q;

    var correctPrototypeGetter = !fails$c(function () {
      function F() { /* empty */ }
      F.prototype.constructor = null;
      // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
      return Object.getPrototypeOf(new F()) !== F.prototype;
    });

    var global$v = global$V;
    var hasOwn$5 = hasOwnProperty_1;
    var isCallable$c = isCallable$p;
    var toObject$4 = toObject$7;
    var sharedKey = sharedKey$3;
    var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

    var IE_PROTO = sharedKey('IE_PROTO');
    var Object$1 = global$v.Object;
    var ObjectPrototype$2 = Object$1.prototype;

    // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? Object$1.getPrototypeOf : function (O) {
      var object = toObject$4(O);
      if (hasOwn$5(object, IE_PROTO)) return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable$c(constructor) && object instanceof constructor) {
        return constructor.prototype;
      } return object instanceof Object$1 ? ObjectPrototype$2 : null;
    };

    var fails$b = fails$q;
    var isCallable$b = isCallable$p;
    var getPrototypeOf$3 = objectGetPrototypeOf;
    var defineBuiltIn$6 = defineBuiltIn$9;
    var wellKnownSymbol$g = wellKnownSymbol$m;

    var ITERATOR$7 = wellKnownSymbol$g('iterator');
    var BUGGY_SAFARI_ITERATORS$1 = false;

    // `%IteratorPrototype%` object
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

    /* eslint-disable es-x/no-array-prototype-keys -- safe */
    if ([].keys) {
      arrayIterator = [].keys();
      // Safari 8 has buggy iterators w/o `next`
      if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf$3(getPrototypeOf$3(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
      }
    }

    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$b(function () {
      var test = {};
      // FF44- legacy iterators case
      return IteratorPrototype$2[ITERATOR$7].call(test) !== test;
    });

    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

    // `%IteratorPrototype%[@@iterator]()` method
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
    if (!isCallable$b(IteratorPrototype$2[ITERATOR$7])) {
      defineBuiltIn$6(IteratorPrototype$2, ITERATOR$7, function () {
        return this;
      });
    }

    var iteratorsCore = {
      IteratorPrototype: IteratorPrototype$2,
      BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
    };

    var defineProperty$3 = objectDefineProperty.f;
    var hasOwn$4 = hasOwnProperty_1;
    var wellKnownSymbol$f = wellKnownSymbol$m;

    var TO_STRING_TAG$2 = wellKnownSymbol$f('toStringTag');

    var setToStringTag$5 = function (target, TAG, STATIC) {
      if (target && !STATIC) target = target.prototype;
      if (target && !hasOwn$4(target, TO_STRING_TAG$2)) {
        defineProperty$3(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
      }
    };

    var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
    var create$2 = objectCreate;
    var createPropertyDescriptor$3 = createPropertyDescriptor$6;
    var setToStringTag$4 = setToStringTag$5;
    var Iterators$4 = iterators;

    var returnThis$1 = function () { return this; };

    var createIteratorConstructor$2 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + ' Iterator';
      IteratorConstructor.prototype = create$2(IteratorPrototype$1, { next: createPropertyDescriptor$3(+!ENUMERABLE_NEXT, next) });
      setToStringTag$4(IteratorConstructor, TO_STRING_TAG, false);
      Iterators$4[TO_STRING_TAG] = returnThis$1;
      return IteratorConstructor;
    };

    var global$u = global$V;
    var isCallable$a = isCallable$p;

    var String$2 = global$u.String;
    var TypeError$a = global$u.TypeError;

    var aPossiblePrototype$1 = function (argument) {
      if (typeof argument == 'object' || isCallable$a(argument)) return argument;
      throw TypeError$a("Can't set " + String$2(argument) + ' as a prototype');
    };

    /* eslint-disable no-proto -- safe */

    var uncurryThis$e = functionUncurryThis;
    var anObject$9 = anObject$h;
    var aPossiblePrototype = aPossiblePrototype$1;

    // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    // eslint-disable-next-line es-x/no-object-setprototypeof -- safe
    var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
        setter = uncurryThis$e(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) { /* empty */ }
      return function setPrototypeOf(O, proto) {
        anObject$9(O);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER) setter(O, proto);
        else O.__proto__ = proto;
        return O;
      };
    }() : undefined);

    var $$b = _export;
    var call$e = functionCall;
    var FunctionName$1 = functionName;
    var isCallable$9 = isCallable$p;
    var createIteratorConstructor$1 = createIteratorConstructor$2;
    var getPrototypeOf$2 = objectGetPrototypeOf;
    var setPrototypeOf$5 = objectSetPrototypeOf;
    var setToStringTag$3 = setToStringTag$5;
    var createNonEnumerableProperty$4 = createNonEnumerableProperty$9;
    var defineBuiltIn$5 = defineBuiltIn$9;
    var wellKnownSymbol$e = wellKnownSymbol$m;
    var Iterators$3 = iterators;
    var IteratorsCore = iteratorsCore;

    var PROPER_FUNCTION_NAME$1 = FunctionName$1.PROPER;
    var CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$6 = wellKnownSymbol$e('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES = 'entries';

    var returnThis = function () { return this; };

    var defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor$1(IteratorConstructor, NAME, next);

      var getIterationMethod = function (KIND) {
        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
          case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
          case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
        } return function () { return new IteratorConstructor(this); };
      };

      var TO_STRING_TAG = NAME + ' Iterator';
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR$6]
        || IterablePrototype['@@iterator']
        || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;

      // fix native
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf$2(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (getPrototypeOf$2(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf$5) {
              setPrototypeOf$5(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable$9(CurrentIteratorPrototype[ITERATOR$6])) {
              defineBuiltIn$5(CurrentIteratorPrototype, ITERATOR$6, returnThis);
            }
          }
          // Set @@toStringTag to native iterators
          setToStringTag$3(CurrentIteratorPrototype, TO_STRING_TAG, true);
        }
      }

      // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
      if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (CONFIGURABLE_FUNCTION_NAME$1) {
          createNonEnumerableProperty$4(IterablePrototype, 'name', VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() { return call$e(nativeIterator, this); };
        }
      }

      // export additional methods
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED) for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            defineBuiltIn$5(IterablePrototype, KEY, methods[KEY]);
          }
        } else $$b({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }

      // define iterator
      if (IterablePrototype[ITERATOR$6] !== defaultIterator) {
        defineBuiltIn$5(IterablePrototype, ITERATOR$6, defaultIterator, { name: DEFAULT });
      }
      Iterators$3[NAME] = defaultIterator;

      return methods;
    };

    var toIndexedObject$1 = toIndexedObject$6;
    var addToUnscopables = addToUnscopables$1;
    var Iterators$2 = iterators;
    var InternalStateModule$4 = internalState;
    var defineProperty$2 = objectDefineProperty.f;
    var defineIterator = defineIterator$1;
    var DESCRIPTORS$5 = descriptors;

    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState$4 = InternalStateModule$4.set;
    var getInternalState$2 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);

    // `Array.prototype.entries` method
    // https://tc39.es/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.es/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.es/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.es/ecma262/#sec-createarrayiterator
    var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
      setInternalState$4(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject$1(iterated), // target
        index: 0,                          // next index
        kind: kind                         // kind
      });
    // `%ArrayIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
    }, function () {
      var state = getInternalState$2(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = undefined;
        return { value: undefined, done: true };
      }
      if (kind == 'keys') return { value: index, done: false };
      if (kind == 'values') return { value: target[index], done: false };
      return { value: [index, target[index]], done: false };
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.es/ecma262/#sec-createmappedargumentsobject
    var values = Iterators$2.Arguments = Iterators$2.Array;

    // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');

    // V8 ~ Chrome 45- bug
    if (DESCRIPTORS$5 && values.name !== 'values') try {
      defineProperty$2(values, 'name', { value: 'values' });
    } catch (error) { /* empty */ }

    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };

    // in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
    var documentCreateElement = documentCreateElement$2;

    var classList = documentCreateElement('span').classList;
    var DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;

    var domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? undefined : DOMTokenListPrototype$1;

    var global$t = global$V;
    var DOMIterables = domIterables;
    var DOMTokenListPrototype = domTokenListPrototype;
    var ArrayIteratorMethods = es_array_iterator;
    var createNonEnumerableProperty$3 = createNonEnumerableProperty$9;
    var wellKnownSymbol$d = wellKnownSymbol$m;

    var ITERATOR$5 = wellKnownSymbol$d('iterator');
    var TO_STRING_TAG$1 = wellKnownSymbol$d('toStringTag');
    var ArrayValues = ArrayIteratorMethods.values;

    var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
      if (CollectionPrototype) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[ITERATOR$5] !== ArrayValues) try {
          createNonEnumerableProperty$3(CollectionPrototype, ITERATOR$5, ArrayValues);
        } catch (error) {
          CollectionPrototype[ITERATOR$5] = ArrayValues;
        }
        if (!CollectionPrototype[TO_STRING_TAG$1]) {
          createNonEnumerableProperty$3(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);
        }
        if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
            createNonEnumerableProperty$3(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
          } catch (error) {
            CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
          }
        }
      }
    };

    for (var COLLECTION_NAME in DOMIterables) {
      handlePrototype(global$t[COLLECTION_NAME] && global$t[COLLECTION_NAME].prototype, COLLECTION_NAME);
    }

    handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

    var fails$a = fails$q;
    var wellKnownSymbol$c = wellKnownSymbol$m;
    var IS_PURE = isPure;

    var ITERATOR$4 = wellKnownSymbol$c('iterator');

    var nativeUrl = !fails$a(function () {
      // eslint-disable-next-line unicorn/relative-url-style -- required for testing
      var url = new URL('b?a=1&b=2&c=3', 'http://a');
      var searchParams = url.searchParams;
      var result = '';
      url.pathname = 'c%20d';
      searchParams.forEach(function (value, key) {
        searchParams['delete']('b');
        result += key + value;
      });
      return (IS_PURE && !url.toJSON)
        || !searchParams.sort
        || url.href !== 'http://a/c%20d?a=1&c=3'
        || searchParams.get('c') !== '3'
        || String(new URLSearchParams('?a=1')) !== 'a=1'
        || !searchParams[ITERATOR$4]
        // throws in Edge
        || new URL('https://a@b').username !== 'a'
        || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
        // not punycoded in Edge
        || new URL('http://тест').host !== 'xn--e1aybc'
        // not escaped in Chrome 62-
        || new URL('http://a#б').hash !== '#%D0%B1'
        // fails in Chrome 66-
        || result !== 'a1c3'
        // throws in Safari
        || new URL('http://x', undefined).host !== 'x';
    });

    var defineBuiltIn$4 = defineBuiltIn$9;

    var defineBuiltIns$2 = function (target, src, options) {
      for (var key in src) defineBuiltIn$4(target, key, src[key], options);
      return target;
    };

    var global$s = global$V;
    var isPrototypeOf$3 = objectIsPrototypeOf;

    var TypeError$9 = global$s.TypeError;

    var anInstance$4 = function (it, Prototype) {
      if (isPrototypeOf$3(Prototype, it)) return it;
      throw TypeError$9('Incorrect invocation');
    };

    var uncurryThis$d = functionUncurryThis;
    var aCallable$6 = aCallable$8;
    var NATIVE_BIND$1 = functionBindNative;

    var bind$7 = uncurryThis$d(uncurryThis$d.bind);

    // optional / simple context binding
    var functionBindContext = function (fn, that) {
      aCallable$6(fn);
      return that === undefined ? fn : NATIVE_BIND$1 ? bind$7(fn, that) : function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };

    var classof$7 = classof$a;
    var getMethod$3 = getMethod$6;
    var Iterators$1 = iterators;
    var wellKnownSymbol$b = wellKnownSymbol$m;

    var ITERATOR$3 = wellKnownSymbol$b('iterator');

    var getIteratorMethod$4 = function (it) {
      if (it != undefined) return getMethod$3(it, ITERATOR$3)
        || getMethod$3(it, '@@iterator')
        || Iterators$1[classof$7(it)];
    };

    var global$r = global$V;
    var call$d = functionCall;
    var aCallable$5 = aCallable$8;
    var anObject$8 = anObject$h;
    var tryToString$3 = tryToString$5;
    var getIteratorMethod$3 = getIteratorMethod$4;

    var TypeError$8 = global$r.TypeError;

    var getIterator$3 = function (argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod$3(argument) : usingIterator;
      if (aCallable$5(iteratorMethod)) return anObject$8(call$d(iteratorMethod, argument));
      throw TypeError$8(tryToString$3(argument) + ' is not iterable');
    };

    var global$q = global$V;

    var TypeError$7 = global$q.TypeError;

    var validateArgumentsLength$2 = function (passed, required) {
      if (passed < required) throw TypeError$7('Not enough arguments');
      return passed;
    };

    var toPropertyKey$1 = toPropertyKey$4;
    var definePropertyModule$2 = objectDefineProperty;
    var createPropertyDescriptor$2 = createPropertyDescriptor$6;

    var createProperty$1 = function (object, key, value) {
      var propertyKey = toPropertyKey$1(key);
      if (propertyKey in object) definePropertyModule$2.f(object, propertyKey, createPropertyDescriptor$2(0, value));
      else object[propertyKey] = value;
    };

    var global$p = global$V;
    var toAbsoluteIndex$2 = toAbsoluteIndex$4;
    var lengthOfArrayLike$5 = lengthOfArrayLike$7;
    var createProperty = createProperty$1;

    var Array$4 = global$p.Array;
    var max$1 = Math.max;

    var arraySliceSimple = function (O, start, end) {
      var length = lengthOfArrayLike$5(O);
      var k = toAbsoluteIndex$2(start, length);
      var fin = toAbsoluteIndex$2(end === undefined ? length : end, length);
      var result = Array$4(max$1(fin - k, 0));
      for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
      result.length = n;
      return result;
    };

    var arraySlice$5 = arraySliceSimple;

    var floor$3 = Math.floor;

    var mergeSort = function (array, comparefn) {
      var length = array.length;
      var middle = floor$3(length / 2);
      return length < 8 ? insertionSort(array, comparefn) : merge(
        array,
        mergeSort(arraySlice$5(array, 0, middle), comparefn),
        mergeSort(arraySlice$5(array, middle), comparefn),
        comparefn
      );
    };

    var insertionSort = function (array, comparefn) {
      var length = array.length;
      var i = 1;
      var element, j;

      while (i < length) {
        j = i;
        element = array[i];
        while (j && comparefn(array[j - 1], element) > 0) {
          array[j] = array[--j];
        }
        if (j !== i++) array[j] = element;
      } return array;
    };

    var merge = function (array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;

      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = (lindex < llength && rindex < rlength)
          ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
          : lindex < llength ? left[lindex++] : right[rindex++];
      } return array;
    };

    var arraySort$1 = mergeSort;

    // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

    var $$a = _export;
    var global$o = global$V;
    var call$c = functionCall;
    var uncurryThis$c = functionUncurryThis;
    var DESCRIPTORS$4 = descriptors;
    var USE_NATIVE_URL = nativeUrl;
    var defineBuiltIn$3 = defineBuiltIn$9;
    var defineBuiltIns$1 = defineBuiltIns$2;
    var setToStringTag$2 = setToStringTag$5;
    var createIteratorConstructor = createIteratorConstructor$2;
    var InternalStateModule$3 = internalState;
    var anInstance$3 = anInstance$4;
    var isCallable$8 = isCallable$p;
    var hasOwn$3 = hasOwnProperty_1;
    var bind$6 = functionBindContext;
    var classof$6 = classof$a;
    var anObject$7 = anObject$h;
    var isObject$8 = isObject$e;
    var $toString = toString$7;
    var create$1 = objectCreate;
    var createPropertyDescriptor$1 = createPropertyDescriptor$6;
    var getIterator$2 = getIterator$3;
    var getIteratorMethod$2 = getIteratorMethod$4;
    var validateArgumentsLength$1 = validateArgumentsLength$2;
    var wellKnownSymbol$a = wellKnownSymbol$m;
    var arraySort = arraySort$1;

    var ITERATOR$2 = wellKnownSymbol$a('iterator');
    var URL_SEARCH_PARAMS = 'URLSearchParams';
    var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
    var setInternalState$3 = InternalStateModule$3.set;
    var getInternalParamsState = InternalStateModule$3.getterFor(URL_SEARCH_PARAMS);
    var getInternalIteratorState = InternalStateModule$3.getterFor(URL_SEARCH_PARAMS_ITERATOR);
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$3 = Object.getOwnPropertyDescriptor;

    // Avoid NodeJS experimental warning
    var safeGetBuiltIn = function (name) {
      if (!DESCRIPTORS$4) return global$o[name];
      var descriptor = getOwnPropertyDescriptor$3(global$o, name);
      return descriptor && descriptor.value;
    };

    var nativeFetch = safeGetBuiltIn('fetch');
    var NativeRequest = safeGetBuiltIn('Request');
    var Headers = safeGetBuiltIn('Headers');
    var RequestPrototype = NativeRequest && NativeRequest.prototype;
    var HeadersPrototype = Headers && Headers.prototype;
    var RegExp$1 = global$o.RegExp;
    var TypeError$6 = global$o.TypeError;
    var decodeURIComponent$1 = global$o.decodeURIComponent;
    var encodeURIComponent$1 = global$o.encodeURIComponent;
    var charAt$3 = uncurryThis$c(''.charAt);
    var join = uncurryThis$c([].join);
    var push$3 = uncurryThis$c([].push);
    var replace$1 = uncurryThis$c(''.replace);
    var shift = uncurryThis$c([].shift);
    var splice = uncurryThis$c([].splice);
    var split = uncurryThis$c(''.split);
    var stringSlice$5 = uncurryThis$c(''.slice);

    var plus = /\+/g;
    var sequences = Array(4);

    var percentSequence = function (bytes) {
      return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp$1('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
    };

    var percentDecode = function (sequence) {
      try {
        return decodeURIComponent$1(sequence);
      } catch (error) {
        return sequence;
      }
    };

    var deserialize = function (it) {
      var result = replace$1(it, plus, ' ');
      var bytes = 4;
      try {
        return decodeURIComponent$1(result);
      } catch (error) {
        while (bytes) {
          result = replace$1(result, percentSequence(bytes--), percentDecode);
        }
        return result;
      }
    };

    var find = /[!'()~]|%20/g;

    var replacements = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+'
    };

    var replacer = function (match) {
      return replacements[match];
    };

    var serialize = function (it) {
      return replace$1(encodeURIComponent$1(it), find, replacer);
    };

    var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
      setInternalState$3(this, {
        type: URL_SEARCH_PARAMS_ITERATOR,
        iterator: getIterator$2(getInternalParamsState(params).entries),
        kind: kind
      });
    }, 'Iterator', function next() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var step = state.iterator.next();
      var entry = step.value;
      if (!step.done) {
        step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
      } return step;
    }, true);

    var URLSearchParamsState = function (init) {
      this.entries = [];
      this.url = null;

      if (init !== undefined) {
        if (isObject$8(init)) this.parseObject(init);
        else this.parseQuery(typeof init == 'string' ? charAt$3(init, 0) === '?' ? stringSlice$5(init, 1) : init : $toString(init));
      }
    };

    URLSearchParamsState.prototype = {
      type: URL_SEARCH_PARAMS,
      bindURL: function (url) {
        this.url = url;
        this.update();
      },
      parseObject: function (object) {
        var iteratorMethod = getIteratorMethod$2(object);
        var iterator, next, step, entryIterator, entryNext, first, second;

        if (iteratorMethod) {
          iterator = getIterator$2(object, iteratorMethod);
          next = iterator.next;
          while (!(step = call$c(next, iterator)).done) {
            entryIterator = getIterator$2(anObject$7(step.value));
            entryNext = entryIterator.next;
            if (
              (first = call$c(entryNext, entryIterator)).done ||
              (second = call$c(entryNext, entryIterator)).done ||
              !call$c(entryNext, entryIterator).done
            ) throw TypeError$6('Expected sequence with length 2');
            push$3(this.entries, { key: $toString(first.value), value: $toString(second.value) });
          }
        } else for (var key in object) if (hasOwn$3(object, key)) {
          push$3(this.entries, { key: key, value: $toString(object[key]) });
        }
      },
      parseQuery: function (query) {
        if (query) {
          var attributes = split(query, '&');
          var index = 0;
          var attribute, entry;
          while (index < attributes.length) {
            attribute = attributes[index++];
            if (attribute.length) {
              entry = split(attribute, '=');
              push$3(this.entries, {
                key: deserialize(shift(entry)),
                value: deserialize(join(entry, '='))
              });
            }
          }
        }
      },
      serialize: function () {
        var entries = this.entries;
        var result = [];
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          push$3(result, serialize(entry.key) + '=' + serialize(entry.value));
        } return join(result, '&');
      },
      update: function () {
        this.entries.length = 0;
        this.parseQuery(this.url.query);
      },
      updateURL: function () {
        if (this.url) this.url.update();
      }
    };

    // `URLSearchParams` constructor
    // https://url.spec.whatwg.org/#interface-urlsearchparams
    var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
      anInstance$3(this, URLSearchParamsPrototype);
      var init = arguments.length > 0 ? arguments[0] : undefined;
      setInternalState$3(this, new URLSearchParamsState(init));
    };

    var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

    defineBuiltIns$1(URLSearchParamsPrototype, {
      // `URLSearchParams.prototype.append` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-append
      append: function append(name, value) {
        validateArgumentsLength$1(arguments.length, 2);
        var state = getInternalParamsState(this);
        push$3(state.entries, { key: $toString(name), value: $toString(value) });
        state.updateURL();
      },
      // `URLSearchParams.prototype.delete` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
      'delete': function (name) {
        validateArgumentsLength$1(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var key = $toString(name);
        var index = 0;
        while (index < entries.length) {
          if (entries[index].key === key) splice(entries, index, 1);
          else index++;
        }
        state.updateURL();
      },
      // `URLSearchParams.prototype.get` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-get
      get: function get(name) {
        validateArgumentsLength$1(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key) return entries[index].value;
        }
        return null;
      },
      // `URLSearchParams.prototype.getAll` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
      getAll: function getAll(name) {
        validateArgumentsLength$1(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var result = [];
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key) push$3(result, entries[index].value);
        }
        return result;
      },
      // `URLSearchParams.prototype.has` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-has
      has: function has(name) {
        validateArgumentsLength$1(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var index = 0;
        while (index < entries.length) {
          if (entries[index++].key === key) return true;
        }
        return false;
      },
      // `URLSearchParams.prototype.set` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-set
      set: function set(name, value) {
        validateArgumentsLength$1(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var found = false;
        var key = $toString(name);
        var val = $toString(value);
        var index = 0;
        var entry;
        for (; index < entries.length; index++) {
          entry = entries[index];
          if (entry.key === key) {
            if (found) splice(entries, index--, 1);
            else {
              found = true;
              entry.value = val;
            }
          }
        }
        if (!found) push$3(entries, { key: key, value: val });
        state.updateURL();
      },
      // `URLSearchParams.prototype.sort` method
      // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
      sort: function sort() {
        var state = getInternalParamsState(this);
        arraySort(state.entries, function (a, b) {
          return a.key > b.key ? 1 : -1;
        });
        state.updateURL();
      },
      // `URLSearchParams.prototype.forEach` method
      forEach: function forEach(callback /* , thisArg */) {
        var entries = getInternalParamsState(this).entries;
        var boundFunction = bind$6(callback, arguments.length > 1 ? arguments[1] : undefined);
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          boundFunction(entry.value, entry.key, this);
        }
      },
      // `URLSearchParams.prototype.keys` method
      keys: function keys() {
        return new URLSearchParamsIterator(this, 'keys');
      },
      // `URLSearchParams.prototype.values` method
      values: function values() {
        return new URLSearchParamsIterator(this, 'values');
      },
      // `URLSearchParams.prototype.entries` method
      entries: function entries() {
        return new URLSearchParamsIterator(this, 'entries');
      }
    }, { enumerable: true });

    // `URLSearchParams.prototype[@@iterator]` method
    defineBuiltIn$3(URLSearchParamsPrototype, ITERATOR$2, URLSearchParamsPrototype.entries, { name: 'entries' });

    // `URLSearchParams.prototype.toString` method
    // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
    defineBuiltIn$3(URLSearchParamsPrototype, 'toString', function toString() {
      return getInternalParamsState(this).serialize();
    }, { enumerable: true });

    setToStringTag$2(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

    $$a({ global: true, constructor: true, forced: !USE_NATIVE_URL }, {
      URLSearchParams: URLSearchParamsConstructor
    });

    // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
    if (!USE_NATIVE_URL && isCallable$8(Headers)) {
      var headersHas = uncurryThis$c(HeadersPrototype.has);
      var headersSet = uncurryThis$c(HeadersPrototype.set);

      var wrapRequestOptions = function (init) {
        if (isObject$8(init)) {
          var body = init.body;
          var headers;
          if (classof$6(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headersHas(headers, 'content-type')) {
              headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            return create$1(init, {
              body: createPropertyDescriptor$1(0, $toString(body)),
              headers: createPropertyDescriptor$1(0, headers)
            });
          }
        } return init;
      };

      if (isCallable$8(nativeFetch)) {
        $$a({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, {
          fetch: function fetch(input /* , init */) {
            return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          }
        });
      }

      if (isCallable$8(NativeRequest)) {
        var RequestConstructor = function Request(input /* , init */) {
          anInstance$3(this, RequestPrototype);
          return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
        };

        RequestPrototype.constructor = RequestConstructor;
        RequestConstructor.prototype = RequestPrototype;

        $$a({ global: true, constructor: true, dontCallGetSet: true, forced: true }, {
          Request: RequestConstructor
        });
      }
    }

    var classof$5 = classofRaw$1;
    var global$n = global$V;

    var engineIsNode = classof$5(global$n.process) == 'process';

    var getBuiltIn$3 = getBuiltIn$8;
    var definePropertyModule$1 = objectDefineProperty;
    var wellKnownSymbol$9 = wellKnownSymbol$m;
    var DESCRIPTORS$3 = descriptors;

    var SPECIES$3 = wellKnownSymbol$9('species');

    var setSpecies$2 = function (CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn$3(CONSTRUCTOR_NAME);
      var defineProperty = definePropertyModule$1.f;

      if (DESCRIPTORS$3 && Constructor && !Constructor[SPECIES$3]) {
        defineProperty(Constructor, SPECIES$3, {
          configurable: true,
          get: function () { return this; }
        });
      }
    };

    var uncurryThis$b = functionUncurryThis;
    var fails$9 = fails$q;
    var isCallable$7 = isCallable$p;
    var classof$4 = classof$a;
    var getBuiltIn$2 = getBuiltIn$8;
    var inspectSource$1 = inspectSource$4;

    var noop = function () { /* empty */ };
    var empty = [];
    var construct = getBuiltIn$2('Reflect', 'construct');
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec$1 = uncurryThis$b(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable$7(argument)) return false;
      try {
        construct(noop, empty, argument);
        return true;
      } catch (error) {
        return false;
      }
    };

    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable$7(argument)) return false;
      switch (classof$4(argument)) {
        case 'AsyncFunction':
        case 'GeneratorFunction':
        case 'AsyncGeneratorFunction': return false;
      }
      try {
        // we can't check .prototype since constructors produced by .bind haven't it
        // `Function#toString` throws on some built-it function in some legacy engines
        // (for example, `DOMQuad` and similar in FF41-)
        return INCORRECT_TO_STRING || !!exec$1(constructorRegExp, inspectSource$1(argument));
      } catch (error) {
        return true;
      }
    };

    isConstructorLegacy.sham = true;

    // `IsConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-isconstructor
    var isConstructor$2 = !construct || fails$9(function () {
      var called;
      return isConstructorModern(isConstructorModern.call)
        || !isConstructorModern(Object)
        || !isConstructorModern(function () { called = true; })
        || called;
    }) ? isConstructorLegacy : isConstructorModern;

    var global$m = global$V;
    var isConstructor$1 = isConstructor$2;
    var tryToString$2 = tryToString$5;

    var TypeError$5 = global$m.TypeError;

    // `Assert: IsConstructor(argument) is true`
    var aConstructor$2 = function (argument) {
      if (isConstructor$1(argument)) return argument;
      throw TypeError$5(tryToString$2(argument) + ' is not a constructor');
    };

    var anObject$6 = anObject$h;
    var aConstructor$1 = aConstructor$2;
    var wellKnownSymbol$8 = wellKnownSymbol$m;

    var SPECIES$2 = wellKnownSymbol$8('species');

    // `SpeciesConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-speciesconstructor
    var speciesConstructor$3 = function (O, defaultConstructor) {
      var C = anObject$6(O).constructor;
      var S;
      return C === undefined || (S = anObject$6(C)[SPECIES$2]) == undefined ? defaultConstructor : aConstructor$1(S);
    };

    var NATIVE_BIND = functionBindNative;

    var FunctionPrototype = Function.prototype;
    var apply$4 = FunctionPrototype.apply;
    var call$b = FunctionPrototype.call;

    // eslint-disable-next-line es-x/no-reflect -- safe
    var functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call$b.bind(apply$4) : function () {
      return call$b.apply(apply$4, arguments);
    });

    var uncurryThis$a = functionUncurryThis;

    var arraySlice$4 = uncurryThis$a([].slice);

    var userAgent$4 = engineUserAgent;

    var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);

    var global$l = global$V;
    var apply$3 = functionApply;
    var bind$5 = functionBindContext;
    var isCallable$6 = isCallable$p;
    var hasOwn$2 = hasOwnProperty_1;
    var fails$8 = fails$q;
    var html = html$2;
    var arraySlice$3 = arraySlice$4;
    var createElement = documentCreateElement$2;
    var validateArgumentsLength = validateArgumentsLength$2;
    var IS_IOS$1 = engineIsIos;
    var IS_NODE$2 = engineIsNode;

    var set$1 = global$l.setImmediate;
    var clear = global$l.clearImmediate;
    var process$2 = global$l.process;
    var Dispatch = global$l.Dispatch;
    var Function$1 = global$l.Function;
    var MessageChannel = global$l.MessageChannel;
    var String$1 = global$l.String;
    var counter = 0;
    var queue$1 = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var location, defer, channel, port;

    try {
      // Deno throws a ReferenceError on `location` access without `--location` flag
      location = global$l.location;
    } catch (error) { /* empty */ }

    var run = function (id) {
      if (hasOwn$2(queue$1, id)) {
        var fn = queue$1[id];
        delete queue$1[id];
        fn();
      }
    };

    var runner = function (id) {
      return function () {
        run(id);
      };
    };

    var listener = function (event) {
      run(event.data);
    };

    var post = function (id) {
      // old engines have not location.origin
      global$l.postMessage(String$1(id), location.protocol + '//' + location.host);
    };

    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!set$1 || !clear) {
      set$1 = function setImmediate(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn = isCallable$6(handler) ? handler : Function$1(handler);
        var args = arraySlice$3(arguments, 1);
        queue$1[++counter] = function () {
          apply$3(fn, undefined, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id) {
        delete queue$1[id];
      };
      // Node.js 0.8-
      if (IS_NODE$2) {
        defer = function (id) {
          process$2.nextTick(runner(id));
        };
      // Sphere (JS game engine) Dispatch API
      } else if (Dispatch && Dispatch.now) {
        defer = function (id) {
          Dispatch.now(runner(id));
        };
      // Browsers with MessageChannel, includes WebWorkers
      // except iOS - https://github.com/zloirock/core-js/issues/624
      } else if (MessageChannel && !IS_IOS$1) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind$5(port.postMessage, port);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (
        global$l.addEventListener &&
        isCallable$6(global$l.postMessage) &&
        !global$l.importScripts &&
        location && location.protocol !== 'file:' &&
        !fails$8(post)
      ) {
        defer = post;
        global$l.addEventListener('message', listener, false);
      // IE8-
      } else if (ONREADYSTATECHANGE in createElement('script')) {
        defer = function (id) {
          html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
            html.removeChild(this);
            run(id);
          };
        };
      // Rest old browsers
      } else {
        defer = function (id) {
          setTimeout(runner(id), 0);
        };
      }
    }

    var task$1 = {
      set: set$1,
      clear: clear
    };

    var userAgent$3 = engineUserAgent;
    var global$k = global$V;

    var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$k.Pebble !== undefined;

    var userAgent$2 = engineUserAgent;

    var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);

    var global$j = global$V;
    var bind$4 = functionBindContext;
    var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
    var macrotask = task$1.set;
    var IS_IOS = engineIsIos;
    var IS_IOS_PEBBLE = engineIsIosPebble;
    var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
    var IS_NODE$1 = engineIsNode;

    var MutationObserver = global$j.MutationObserver || global$j.WebKitMutationObserver;
    var document$2 = global$j.document;
    var process$1 = global$j.process;
    var Promise$1 = global$j.Promise;
    // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global$j, 'queueMicrotask');
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

    var flush, head, last, notify$1, toggle, node, promise, then;

    // modern engines have queueMicrotask method
    if (!queueMicrotask) {
      flush = function () {
        var parent, fn;
        if (IS_NODE$1 && (parent = process$1.domain)) parent.exit();
        while (head) {
          fn = head.fn;
          head = head.next;
          try {
            fn();
          } catch (error) {
            if (head) notify$1();
            else last = undefined;
            throw error;
          }
        } last = undefined;
        if (parent) parent.enter();
      };

      // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
      // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
      if (!IS_IOS && !IS_NODE$1 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
        toggle = true;
        node = document$2.createTextNode('');
        new MutationObserver(flush).observe(node, { characterData: true });
        notify$1 = function () {
          node.data = toggle = !toggle;
        };
      // environments with maybe non-completely correct, but existent Promise
      } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        promise = Promise$1.resolve(undefined);
        // workaround of WebKit ~ iOS Safari 10.1 bug
        promise.constructor = Promise$1;
        then = bind$4(promise.then, promise);
        notify$1 = function () {
          then(flush);
        };
      // Node.js without promises
      } else if (IS_NODE$1) {
        notify$1 = function () {
          process$1.nextTick(flush);
        };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessage
      // - onreadystatechange
      // - setTimeout
      } else {
        // strange IE + webpack dev server bug - use .bind(global)
        macrotask = bind$4(macrotask, global$j);
        notify$1 = function () {
          macrotask(flush);
        };
      }
    }

    var microtask$1 = queueMicrotask || function (fn) {
      var task = { fn: fn, next: undefined };
      if (last) last.next = task;
      if (!head) {
        head = task;
        notify$1();
      } last = task;
    };

    var global$i = global$V;

    var hostReportErrors$1 = function (a, b) {
      var console = global$i.console;
      if (console && console.error) {
        arguments.length == 1 ? console.error(a) : console.error(a, b);
      }
    };

    var perform$3 = function (exec) {
      try {
        return { error: false, value: exec() };
      } catch (error) {
        return { error: true, value: error };
      }
    };

    var Queue$1 = function () {
      this.head = null;
      this.tail = null;
    };

    Queue$1.prototype = {
      add: function (item) {
        var entry = { item: item, next: null };
        if (this.head) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
      },
      get: function () {
        var entry = this.head;
        if (entry) {
          this.head = entry.next;
          if (this.tail === entry) this.tail = null;
          return entry.item;
        }
      }
    };

    var queue = Queue$1;

    var global$h = global$V;

    var promiseNativeConstructor = global$h.Promise;

    var engineIsBrowser = typeof window == 'object' && typeof Deno != 'object';

    var global$g = global$V;
    var NativePromiseConstructor$3 = promiseNativeConstructor;
    var isCallable$5 = isCallable$p;
    var isForced = isForced_1;
    var inspectSource = inspectSource$4;
    var wellKnownSymbol$7 = wellKnownSymbol$m;
    var IS_BROWSER = engineIsBrowser;
    var V8_VERSION = engineV8Version;

    NativePromiseConstructor$3 && NativePromiseConstructor$3.prototype;
    var SPECIES$1 = wellKnownSymbol$7('species');
    var SUBCLASSING = false;
    var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$5(global$g.PromiseRejectionEvent);

    var FORCED_PROMISE_CONSTRUCTOR$5 = isForced('Promise', function () {
      var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$3);
      var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$3);
      // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // We can't detect it synchronously, so just check versions
      if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
      // We can't use @@species feature detection in V8 since it causes
      // deoptimization and performance degradation
      // https://github.com/zloirock/core-js/issues/679
      if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
      // Detect correctness of subclassing with @@species support
      var promise = new NativePromiseConstructor$3(function (resolve) { resolve(1); });
      var FakePromise = function (exec) {
        exec(function () { /* empty */ }, function () { /* empty */ });
      };
      var constructor = promise.constructor = {};
      constructor[SPECIES$1] = FakePromise;
      SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
      if (!SUBCLASSING) return true;
      // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT$1;
    });

    var promiseConstructorDetection = {
      CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
      REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
      SUBCLASSING: SUBCLASSING
    };

    var newPromiseCapability$2 = {};

    var aCallable$4 = aCallable$8;

    var PromiseCapability = function (C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aCallable$4(resolve);
      this.reject = aCallable$4(reject);
    };

    // `NewPromiseCapability` abstract operation
    // https://tc39.es/ecma262/#sec-newpromisecapability
    newPromiseCapability$2.f = function (C) {
      return new PromiseCapability(C);
    };

    var $$9 = _export;
    var IS_NODE = engineIsNode;
    var global$f = global$V;
    var call$a = functionCall;
    var defineBuiltIn$2 = defineBuiltIn$9;
    var setPrototypeOf$4 = objectSetPrototypeOf;
    var setToStringTag$1 = setToStringTag$5;
    var setSpecies$1 = setSpecies$2;
    var aCallable$3 = aCallable$8;
    var isCallable$4 = isCallable$p;
    var isObject$7 = isObject$e;
    var anInstance$2 = anInstance$4;
    var speciesConstructor$2 = speciesConstructor$3;
    var task = task$1.set;
    var microtask = microtask$1;
    var hostReportErrors = hostReportErrors$1;
    var perform$2 = perform$3;
    var Queue = queue;
    var InternalStateModule$2 = internalState;
    var NativePromiseConstructor$2 = promiseNativeConstructor;
    var PromiseConstructorDetection = promiseConstructorDetection;
    var newPromiseCapabilityModule$3 = newPromiseCapability$2;

    var PROMISE = 'Promise';
    var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
    var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
    var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
    var getInternalPromiseState = InternalStateModule$2.getterFor(PROMISE);
    var setInternalState$2 = InternalStateModule$2.set;
    var NativePromisePrototype$1 = NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
    var PromiseConstructor = NativePromiseConstructor$2;
    var PromisePrototype = NativePromisePrototype$1;
    var TypeError$4 = global$f.TypeError;
    var document$1 = global$f.document;
    var process = global$f.process;
    var newPromiseCapability$1 = newPromiseCapabilityModule$3.f;
    var newGenericPromiseCapability = newPromiseCapability$1;

    var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$f.dispatchEvent);
    var UNHANDLED_REJECTION = 'unhandledrejection';
    var REJECTION_HANDLED = 'rejectionhandled';
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;

    var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

    // helpers
    var isThenable = function (it) {
      var then;
      return isObject$7(it) && isCallable$4(then = it.then) ? then : false;
    };

    var callReaction = function (reaction, state) {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError$4('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            call$a(then, result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    };

    var notify = function (state, isReject) {
      if (state.notified) return;
      state.notified = true;
      microtask(function () {
        var reactions = state.reactions;
        var reaction;
        while (reaction = reactions.get()) {
          callReaction(reaction, state);
        }
        state.notified = false;
        if (isReject && !state.rejection) onUnhandled(state);
      });
    };

    var dispatchEvent = function (name, promise, reason) {
      var event, handler;
      if (DISPATCH_EVENT) {
        event = document$1.createEvent('Event');
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name, false, true);
        global$f.dispatchEvent(event);
      } else event = { promise: promise, reason: reason };
      if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$f['on' + name])) handler(event);
      else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
    };

    var onUnhandled = function (state) {
      call$a(task, global$f, function () {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
          result = perform$2(function () {
            if (IS_NODE) {
              process.emit('unhandledRejection', value, promise);
            } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
          });
          // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error) throw result.value;
        }
      });
    };

    var isUnhandled = function (state) {
      return state.rejection !== HANDLED && !state.parent;
    };

    var onHandleUnhandled = function (state) {
      call$a(task, global$f, function () {
        var promise = state.facade;
        if (IS_NODE) {
          process.emit('rejectionHandled', promise);
        } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };

    var bind$3 = function (fn, state, unwrap) {
      return function (value) {
        fn(state, value, unwrap);
      };
    };

    var internalReject = function (state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(state, true);
    };

    var internalResolve = function (state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;
      try {
        if (state.facade === value) throw TypeError$4("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) {
          microtask(function () {
            var wrapper = { done: false };
            try {
              call$a(then, value,
                bind$3(internalResolve, wrapper, state),
                bind$3(internalReject, wrapper, state)
              );
            } catch (error) {
              internalReject(wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(state, false);
        }
      } catch (error) {
        internalReject({ done: false }, error, state);
      }
    };

    // constructor polyfill
    if (FORCED_PROMISE_CONSTRUCTOR$4) {
      // 25.4.3.1 Promise(executor)
      PromiseConstructor = function Promise(executor) {
        anInstance$2(this, PromisePrototype);
        aCallable$3(executor);
        call$a(Internal, this);
        var state = getInternalPromiseState(this);
        try {
          executor(bind$3(internalResolve, state), bind$3(internalReject, state));
        } catch (error) {
          internalReject(state, error);
        }
      };

      PromisePrototype = PromiseConstructor.prototype;

      // eslint-disable-next-line no-unused-vars -- required for `.length`
      Internal = function Promise(executor) {
        setInternalState$2(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: new Queue(),
          rejection: false,
          state: PENDING,
          value: undefined
        });
      };

      // `Promise.prototype.then` method
      // https://tc39.es/ecma262/#sec-promise.prototype.then
      Internal.prototype = defineBuiltIn$2(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability$1(speciesConstructor$2(this, PromiseConstructor));
        state.parent = true;
        reaction.ok = isCallable$4(onFulfilled) ? onFulfilled : true;
        reaction.fail = isCallable$4(onRejected) && onRejected;
        reaction.domain = IS_NODE ? process.domain : undefined;
        if (state.state == PENDING) state.reactions.add(reaction);
        else microtask(function () {
          callReaction(reaction, state);
        });
        return reaction.promise;
      });

      OwnPromiseCapability = function () {
        var promise = new Internal();
        var state = getInternalPromiseState(promise);
        this.promise = promise;
        this.resolve = bind$3(internalResolve, state);
        this.reject = bind$3(internalReject, state);
      };

      newPromiseCapabilityModule$3.f = newPromiseCapability$1 = function (C) {
        return C === PromiseConstructor || C === PromiseWrapper
          ? new OwnPromiseCapability(C)
          : newGenericPromiseCapability(C);
      };

      if (isCallable$4(NativePromiseConstructor$2) && NativePromisePrototype$1 !== Object.prototype) {
        nativeThen = NativePromisePrototype$1.then;

        if (!NATIVE_PROMISE_SUBCLASSING) {
          // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
          defineBuiltIn$2(NativePromisePrototype$1, 'then', function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function (resolve, reject) {
              call$a(nativeThen, that, resolve, reject);
            }).then(onFulfilled, onRejected);
          // https://github.com/zloirock/core-js/issues/640
          }, { unsafe: true });
        }

        // make `.constructor === Promise` work for native promise-based APIs
        try {
          delete NativePromisePrototype$1.constructor;
        } catch (error) { /* empty */ }

        // make `instanceof Promise` work for native promise-based APIs
        if (setPrototypeOf$4) {
          setPrototypeOf$4(NativePromisePrototype$1, PromisePrototype);
        }
      }
    }

    $$9({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
      Promise: PromiseConstructor
    });

    setToStringTag$1(PromiseConstructor, PROMISE, false);
    setSpecies$1(PROMISE);

    var wellKnownSymbol$6 = wellKnownSymbol$m;
    var Iterators = iterators;

    var ITERATOR$1 = wellKnownSymbol$6('iterator');
    var ArrayPrototype = Array.prototype;

    // check on default Array iterator
    var isArrayIteratorMethod$2 = function (it) {
      return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR$1] === it);
    };

    var call$9 = functionCall;
    var anObject$5 = anObject$h;
    var getMethod$2 = getMethod$6;

    var iteratorClose$1 = function (iterator, kind, value) {
      var innerResult, innerError;
      anObject$5(iterator);
      try {
        innerResult = getMethod$2(iterator, 'return');
        if (!innerResult) {
          if (kind === 'throw') throw value;
          return value;
        }
        innerResult = call$9(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === 'throw') throw value;
      if (innerError) throw innerResult;
      anObject$5(innerResult);
      return value;
    };

    var global$e = global$V;
    var bind$2 = functionBindContext;
    var call$8 = functionCall;
    var anObject$4 = anObject$h;
    var tryToString$1 = tryToString$5;
    var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
    var lengthOfArrayLike$4 = lengthOfArrayLike$7;
    var isPrototypeOf$2 = objectIsPrototypeOf;
    var getIterator$1 = getIterator$3;
    var getIteratorMethod$1 = getIteratorMethod$4;
    var iteratorClose = iteratorClose$1;

    var TypeError$3 = global$e.TypeError;

    var Result = function (stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };

    var ResultPrototype = Result.prototype;

    var iterate$2 = function (iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn = bind$2(unboundFunction, that);
      var iterator, iterFn, index, length, result, next, step;

      var stop = function (condition) {
        if (iterator) iteratorClose(iterator, 'normal', condition);
        return new Result(true, condition);
      };

      var callFn = function (value) {
        if (AS_ENTRIES) {
          anObject$4(value);
          return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
        } return INTERRUPTED ? fn(value, stop) : fn(value);
      };

      if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod$1(iterable);
        if (!iterFn) throw TypeError$3(tryToString$1(iterable) + ' is not iterable');
        // optimisation for array iterators
        if (isArrayIteratorMethod$1(iterFn)) {
          for (index = 0, length = lengthOfArrayLike$4(iterable); length > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf$2(ResultPrototype, result)) return result;
          } return new Result(false);
        }
        iterator = getIterator$1(iterable, iterFn);
      }

      next = iterator.next;
      while (!(step = call$8(next, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, 'throw', error);
        }
        if (typeof result == 'object' && result && isPrototypeOf$2(ResultPrototype, result)) return result;
      } return new Result(false);
    };

    var wellKnownSymbol$5 = wellKnownSymbol$m;

    var ITERATOR = wellKnownSymbol$5('iterator');
    var SAFE_CLOSING = false;

    try {
      var called = 0;
      var iteratorWithReturn = {
        next: function () {
          return { done: !!called++ };
        },
        'return': function () {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function () {
        return this;
      };
      // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
      Array.from(iteratorWithReturn, function () { throw 2; });
    } catch (error) { /* empty */ }

    var checkCorrectnessOfIteration$2 = function (exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function () {
          return {
            next: function () {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) { /* empty */ }
      return ITERATION_SUPPORT;
    };

    var NativePromiseConstructor$1 = promiseNativeConstructor;
    var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;
    var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;

    var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration$1(function (iterable) {
      NativePromiseConstructor$1.all(iterable).then(undefined, function () { /* empty */ });
    });

    var $$8 = _export;
    var call$7 = functionCall;
    var aCallable$2 = aCallable$8;
    var newPromiseCapabilityModule$2 = newPromiseCapability$2;
    var perform$1 = perform$3;
    var iterate$1 = iterate$2;
    var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;

    // `Promise.all` method
    // https://tc39.es/ecma262/#sec-promise.all
    $$8({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule$2.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform$1(function () {
          var $promiseResolve = aCallable$2(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate$1(iterable, function (promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call$7($promiseResolve, C, promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error) reject(result.value);
        return capability.promise;
      }
    });

    var $$7 = _export;
    var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
    var NativePromiseConstructor = promiseNativeConstructor;
    var getBuiltIn$1 = getBuiltIn$8;
    var isCallable$3 = isCallable$p;
    var defineBuiltIn$1 = defineBuiltIn$9;

    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

    // `Promise.prototype.catch` method
    // https://tc39.es/ecma262/#sec-promise.prototype.catch
    $$7({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });

    // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
    if (isCallable$3(NativePromiseConstructor)) {
      var method = getBuiltIn$1('Promise').prototype['catch'];
      if (NativePromisePrototype['catch'] !== method) {
        defineBuiltIn$1(NativePromisePrototype, 'catch', method, { unsafe: true });
      }
    }

    var $$6 = _export;
    var call$6 = functionCall;
    var aCallable$1 = aCallable$8;
    var newPromiseCapabilityModule$1 = newPromiseCapability$2;
    var perform = perform$3;
    var iterate = iterate$2;
    var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;

    // `Promise.race` method
    // https://tc39.es/ecma262/#sec-promise.race
    $$6({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule$1.f(C);
        var reject = capability.reject;
        var result = perform(function () {
          var $promiseResolve = aCallable$1(C.resolve);
          iterate(iterable, function (promise) {
            call$6($promiseResolve, C, promise).then(capability.resolve, reject);
          });
        });
        if (result.error) reject(result.value);
        return capability.promise;
      }
    });

    var $$5 = _export;
    var call$5 = functionCall;
    var newPromiseCapabilityModule = newPromiseCapability$2;
    var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;

    // `Promise.reject` method
    // https://tc39.es/ecma262/#sec-promise.reject
    $$5({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
      reject: function reject(r) {
        var capability = newPromiseCapabilityModule.f(this);
        call$5(capability.reject, undefined, r);
        return capability.promise;
      }
    });

    var anObject$3 = anObject$h;
    var isObject$6 = isObject$e;
    var newPromiseCapability = newPromiseCapability$2;

    var promiseResolve$1 = function (C, x) {
      anObject$3(C);
      if (isObject$6(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };

    var $$4 = _export;
    var getBuiltIn = getBuiltIn$8;
    var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
    var promiseResolve = promiseResolve$1;

    getBuiltIn('Promise');

    // `Promise.resolve` method
    // https://tc39.es/ecma262/#sec-promise.resolve
    $$4({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
      resolve: function resolve(x) {
        return promiseResolve(this, x);
      }
    });

    var isObject$5 = isObject$e;
    var classof$3 = classofRaw$1;
    var wellKnownSymbol$4 = wellKnownSymbol$m;

    var MATCH$1 = wellKnownSymbol$4('match');

    // `IsRegExp` abstract operation
    // https://tc39.es/ecma262/#sec-isregexp
    var isRegexp = function (it) {
      var isRegExp;
      return isObject$5(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$3(it) == 'RegExp');
    };

    var uncurryThis$9 = functionUncurryThis;
    var toIntegerOrInfinity$4 = toIntegerOrInfinity$7;
    var toString$4 = toString$7;
    var requireObjectCoercible$4 = requireObjectCoercible$8;

    var charAt$2 = uncurryThis$9(''.charAt);
    var charCodeAt = uncurryThis$9(''.charCodeAt);
    var stringSlice$4 = uncurryThis$9(''.slice);

    var createMethod$1 = function (CONVERT_TO_STRING) {
      return function ($this, pos) {
        var S = toString$4(requireObjectCoercible$4($this));
        var position = toIntegerOrInfinity$4(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
        first = charCodeAt(S, position);
        return first < 0xD800 || first > 0xDBFF || position + 1 === size
          || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
            ? CONVERT_TO_STRING
              ? charAt$2(S, position)
              : first
            : CONVERT_TO_STRING
              ? stringSlice$4(S, position, position + 2)
              : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
      };
    };

    var stringMultibyte = {
      // `String.prototype.codePointAt` method
      // https://tc39.es/ecma262/#sec-string.prototype.codepointat
      codeAt: createMethod$1(false),
      // `String.prototype.at` method
      // https://github.com/mathiasbynens/String.prototype.at
      charAt: createMethod$1(true)
    };

    var charAt$1 = stringMultibyte.charAt;

    // `AdvanceStringIndex` abstract operation
    // https://tc39.es/ecma262/#sec-advancestringindex
    var advanceStringIndex$2 = function (S, index, unicode) {
      return index + (unicode ? charAt$1(S, index).length : 1);
    };

    var apply$2 = functionApply;
    var call$4 = functionCall;
    var uncurryThis$8 = functionUncurryThis;
    var fixRegExpWellKnownSymbolLogic$1 = fixRegexpWellKnownSymbolLogic;
    var isRegExp$1 = isRegexp;
    var anObject$2 = anObject$h;
    var requireObjectCoercible$3 = requireObjectCoercible$8;
    var speciesConstructor$1 = speciesConstructor$3;
    var advanceStringIndex$1 = advanceStringIndex$2;
    var toLength$7 = toLength$9;
    var toString$3 = toString$7;
    var getMethod$1 = getMethod$6;
    var arraySlice$2 = arraySliceSimple;
    var callRegExpExec = regexpExecAbstract;
    var regexpExec = regexpExec$3;
    var stickyHelpers = regexpStickyHelpers;
    var fails$7 = fails$q;

    var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
    var MAX_UINT32 = 0xFFFFFFFF;
    var min$3 = Math.min;
    var $push = [].push;
    var exec = uncurryThis$8(/./.exec);
    var push$2 = uncurryThis$8($push);
    var stringSlice$3 = uncurryThis$8(''.slice);

    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    // Weex JS has frozen built-in prototypes, so use try / catch wrapper
    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$7(function () {
      // eslint-disable-next-line regexp/no-empty-group -- required for testing
      var re = /(?:)/;
      var originalExec = re.exec;
      re.exec = function () { return originalExec.apply(this, arguments); };
      var result = 'ab'.split(re);
      return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
    });

    // @@split logic
    fixRegExpWellKnownSymbolLogic$1('split', function (SPLIT, nativeSplit, maybeCallNative) {
      var internalSplit;
      if (
        'abbc'.split(/(b)*/)[1] == 'c' ||
        // eslint-disable-next-line regexp/no-empty-group -- required for testing
        'test'.split(/(?:)/, -1).length != 4 ||
        'ab'.split(/(?:ab)*/).length != 2 ||
        '.'.split(/(.?)(.?)/).length != 4 ||
        // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
        '.'.split(/()()/).length > 1 ||
        ''.split(/.?/).length
      ) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function (separator, limit) {
          var string = toString$3(requireObjectCoercible$3(this));
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (separator === undefined) return [string];
          // If `separator` is not a regex, use native split
          if (!isRegExp$1(separator)) {
            return call$4(nativeSplit, string, separator, lim);
          }
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;
          while (match = call$4(regexpExec, separatorCopy, string)) {
            lastIndex = separatorCopy.lastIndex;
            if (lastIndex > lastLastIndex) {
              push$2(output, stringSlice$3(string, lastLastIndex, match.index));
              if (match.length > 1 && match.index < string.length) apply$2($push, output, arraySlice$2(match, 1));
              lastLength = match[0].length;
              lastLastIndex = lastIndex;
              if (output.length >= lim) break;
            }
            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
          }
          if (lastLastIndex === string.length) {
            if (lastLength || !exec(separatorCopy, '')) push$2(output, '');
          } else push$2(output, stringSlice$3(string, lastLastIndex));
          return output.length > lim ? arraySlice$2(output, 0, lim) : output;
        };
      // Chakra, V8
      } else if ('0'.split(undefined, 0).length) {
        internalSplit = function (separator, limit) {
          return separator === undefined && limit === 0 ? [] : call$4(nativeSplit, this, separator, limit);
        };
      } else internalSplit = nativeSplit;

      return [
        // `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible$3(this);
          var splitter = separator == undefined ? undefined : getMethod$1(separator, SPLIT);
          return splitter
            ? call$4(splitter, separator, O, limit)
            : call$4(internalSplit, toString$3(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (string, limit) {
          var rx = anObject$2(this);
          var S = toString$3(string);
          var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

          if (res.done) return res.value;

          var C = speciesConstructor$1(rx, RegExp);

          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') +
                      (rx.multiline ? 'm' : '') +
                      (rx.unicode ? 'u' : '') +
                      (UNSUPPORTED_Y ? 'g' : 'y');

          // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.
          var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];
          while (q < S.length) {
            splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
            var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice$3(S, q) : S);
            var e;
            if (
              z === null ||
              (e = min$3(toLength$7(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
            ) {
              q = advanceStringIndex$1(S, q, unicodeMatching);
            } else {
              push$2(A, stringSlice$3(S, p, q));
              if (A.length === lim) return A;
              for (var i = 1; i <= z.length - 1; i++) {
                push$2(A, z[i]);
                if (A.length === lim) return A;
              }
              q = p = e;
            }
          }
          push$2(A, stringSlice$3(S, p));
          return A;
        }
      ];
    }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

    const DEFAULT_CONFIG = {
      autoLogin: true,
      autoLogout: true,
      autoRefreshToken: false,
      idleTimeoutInMinutes: 30,
      uniqueSession: true,
      hooks: {}
    };
    const requiredParams = ['authHost', 'clientId', 'scopes'];
    const init$1 = options => {
      lodash.forEach(requiredParams, p => {
        if (!lodash.has(options, p)) {
          throw Error('Missing config parameter : ' + p);
        }
      });

      if (!lodash.isArray(options.scopes)) {
        throw Error('Scopes must be an array with string values');
      }

      const config = Object.assign(Object.assign({}, DEFAULT_CONFIG), options);
      return config;
    };

    var _LeapAuthService_authHost, _LeapAuthService_clientId, _LeapAuthService_xhr, _LeapAuthService_redirectUrl;
    const LEAP_AUTH_CLOSE_WINDOW_URL = '/oauth/close';
    class LeapAuthService {
      constructor(authHost, clientId) {
        _LeapAuthService_authHost.set(this, void 0);

        _LeapAuthService_clientId.set(this, void 0);

        this.getAccessTokenByJti = jti => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'POST',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
              options: {
                body: {
                  assertion: jti,
                  grant_type: "urn:ietf:params:oauth:grant-type:jti",
                  client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f")
                }
              },
              accessToken: undefined
            }, (response, status) => {
              if (status === 200) return resolve(response.access_token);else return reject(response);
            });
          });
        };

        this.getRedirections = () => {
          //* local development
          //return import('../../config/redirections_v2.json');
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: 'https://cdn.leap.com.au/leap_auth/auth_agent/redirections_v2.json',
              options: null,
              accessToken: undefined
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.exchangeAuthCodeForAccessToken = params => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'POST',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
              options: {
                body: {
                  grant_type: 'authorization_code',
                  code: params.code,
                  code_verifier: params.verifier,
                  client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f"),
                  redirect_uri: params.redirectUri
                }
              },
              accessToken: undefined
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.renewAccessToken = params => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'POST',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/oauth/token`,
              options: {
                body: {
                  grant_type: 'refresh_token',
                  refresh_token: params.refreshToken,
                  code_verifier: params.verifier,
                  client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f")
                }
              },
              accessToken: undefined
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.userInfo = token => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/api/userinfo`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.linkUser = params => {
          const {
            jti,
            newWindow,
            callback
          } = params;
          const redirectUrl = newWindow ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL : params.redirectUrl;
          const requestUrl = `/cloudprovider/link?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&prompt=none&jti=${jti}&callback=${redirectUrl}`;

          __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
            requestUrl,
            newWindow,
            callback
          });
        };

        this.unlinkUser = params => {
          const {
            jti,
            newWindow,
            callback
          } = params;
          const redirectUrl = newWindow ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL : params.redirectUrl;
          const requestUrl = `/cloudprovider/unlink?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&jti=${jti}&callback=${redirectUrl}`;

          __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
            requestUrl,
            newWindow,
            callback
          });
        };

        this.getCloudProviderToken = (token, jti) => {
          const url = `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/accesstoken` + (jti ? '/' + jti : '');
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: url,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.cloudProviderUserInfo = token => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/userinfo`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.cloudProviderReauthenticate = params => {
          const {
            nonce,
            newWindow,
            callback
          } = params;
          const redirectUrl = newWindow ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL : params.redirectUrl;
          const requestUrl = `/cloudprovider/reauthenticate?nonce=${nonce}&redirectUrl=${redirectUrl}`;

          __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
            requestUrl,
            newWindow,
            callback
          });
        };

        this.cloudProviderReauthenticateLink = token => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/reauthenticate/link`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.cloudProviderUpdate = params => {
          const {
            firmId,
            cloudProviderId,
            token
          } = params;
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'PUT',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/api/firms/${firmId}`,
              options: {
                body: {
                  id: firmId,
                  cloudProviderId: cloudProviderId
                }
              },
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.statusAdminConsent = token => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/adminconsent/status?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.getAdminConsent = params => {
          const {
            domain,
            newWindow,
            callback
          } = params;
          const redirectUrl = newWindow ? __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL : params.redirectUrl;
          const requestUrl = `/cloudprovider/adminconsent?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}&redirectUrl=${redirectUrl}${domain ? '&domain=' + domain : ''}`;

          __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
            requestUrl,
            newWindow,
            callback
          });
        };

        this.revokeAdminConsent = token => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'DELETE',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/adminconsent?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 204) return resolve(response);else return reject(response);
            });
          });
        };

        this.getLinkMap = (token, allUsers) => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'GET',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/linkmap?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}${allUsers ? '&allUsers=true' : ''}`,
              options: null,
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.setLinkMap = (token, linkMap) => {
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'PUT',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/cloudprovider/linkmap?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`,
              options: {
                body: linkMap
              },
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.authoriseSupport = (token, params) => {
          const {
            code,
            duration
          } = params;
          return new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _LeapAuthService_xhr, "f").call(this, {
              method: 'POST',
              endpoint: `${__classPrivateFieldGet(this, _LeapAuthService_authHost, "f")}/support/authorization`,
              options: {
                body: {
                  requestCode: code,
                  duration,
                  client_id: __classPrivateFieldGet(this, _LeapAuthService_clientId, "f")
                }
              },
              accessToken: token
            }, (response, status) => {
              if (status === 200) return resolve(response);else return reject(response);
            });
          });
        };

        this.changePassword = params => {
          const {
            newWindow,
            callback,
            redirectUrl
          } = params;
          let changePasswordUrl = `/oauth/changepassword?client_id=${__classPrivateFieldGet(this, _LeapAuthService_clientId, "f")}`;
          let redirect_uri = '';
          let noListener = false;

          if (newWindow) {
            if (!!callback && typeof callback === 'function') {
              redirect_uri = __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + LEAP_AUTH_CLOSE_WINDOW_URL;
            } else {
              redirect_uri = '';
              noListener = true; // open a new tab for changing password without adding an message event listener in this window
            }
          } else {
            redirect_uri = __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + '/oauth/logout?force=true' + '&redirect_uri=' + (redirectUrl || window.location.href);
          }

          if (redirect_uri) {
            changePasswordUrl += `&redirect_uri=${encodeURIComponent(redirect_uri)}`;
          }

          __classPrivateFieldGet(this, _LeapAuthService_redirectUrl, "f").call(this, {
            requestUrl: changePasswordUrl,
            newWindow,
            callback,
            noListener
          });
        };

        _LeapAuthService_xhr.set(this, (params, onload) => {
          const {
            method,
            endpoint,
            accessToken
          } = params;
          let {
            options
          } = params;
          options = lodash.merge({}, {
            contentType: 'application/json',
            accessControlAllowOrigin: '*',
            body: undefined
          }, options || {});
          const xhr = new XMLHttpRequest();
          xhr.open(method, endpoint, true);
          xhr.setRequestHeader('Content-type', options.contentType);
          xhr.setRequestHeader('Access-Control-Allow-Origin', options.accessControlAllowOrigin);
          if (accessToken) xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);

          xhr.onload = () => {
            try {
              let resp;
              if (xhr.response) resp = JSON.parse(xhr.response);
              onload(resp, xhr.status);
            } catch (e) {
              onload(xhr.response, xhr.status);
            }
          };

          if (options.body) options.body = JSON.stringify(options.body);
          xhr.send(options.body);
        });

        _LeapAuthService_redirectUrl.set(this, params => {
          const {
            requestUrl,
            newWindow,
            callback,
            noListener
          } = params;
          const fullUrl = __classPrivateFieldGet(this, _LeapAuthService_authHost, "f") + requestUrl;

          if (newWindow) {
            const childWindow = window.open(fullUrl, '_blank');

            const eventHandler = event => {
              if (event && event.data === 'closeMe' && childWindow) {
                childWindow.close();

                if (lodash.isFunction(callback)) {
                  callback();
                  window.removeEventListener('message', eventHandler, false);
                }
              }
            };

            if (!noListener) {
              window.addEventListener('message', eventHandler, false);
            }
          } else {
            window.location.href = fullUrl;
          }
        });

        __classPrivateFieldSet(this, _LeapAuthService_authHost, authHost, "f");

        __classPrivateFieldSet(this, _LeapAuthService_clientId, clientId, "f");
      }

    }
    _LeapAuthService_authHost = new WeakMap(), _LeapAuthService_clientId = new WeakMap(), _LeapAuthService_xhr = new WeakMap(), _LeapAuthService_redirectUrl = new WeakMap();

    var HookName;

    (function (HookName) {
      HookName["afterLogin"] = "afterLogin";
      HookName["beforeLogout"] = "beforeLogout";
      HookName["uniqueSessionTrigger"] = "uniqueSessionTrigger";
      HookName["afterRefreshToken"] = "afterRefreshToken";
    })(HookName || (HookName = {}));

    var _Notification_pubnubKeys, _Notification_pubnub, _Notification_eventListeners, _Notification_uniqueSessionTriggerHook, _Notification_initFirmChannel, _Notification_initUserChannel, _Notification_initUniqueSessionChannel;
    const EMPTY_GUID = '00000000-0000-0000-0000-000000000000';
    const USER_ACTION = {
      USERNAME_CHANGED: '1',
      PASSWORD_CHANGED: '2',
      USER_DISABLED: '3' //     3 - User has been disabled

    };
    class Notification {
      constructor() {
        _Notification_pubnubKeys.set(this, void 0);

        _Notification_pubnub.set(this, void 0);

        _Notification_eventListeners.set(this, []);

        _Notification_uniqueSessionTriggerHook.set(this, undefined);

        this.init = params => __awaiter(this, void 0, void 0, function* () {
          const {
            authHost,
            clientId,
            firmId,
            userId,
            uniqueSession,
            hooks
          } = params;

          if (!!hooks && hooks.uniqueSessionTrigger) {
            __classPrivateFieldSet(this, _Notification_uniqueSessionTriggerHook, hooks.uniqueSessionTrigger, "f");
          }

          __classPrivateFieldGet(this, _Notification_initFirmChannel, "f").call(this, firmId, userId);

          __classPrivateFieldGet(this, _Notification_initUserChannel, "f").call(this, userId);

          if (uniqueSession) {
            yield __classPrivateFieldGet(this, _Notification_initUniqueSessionChannel, "f").call(this, {
              authHost,
              clientId
            });
          }
        });

        this.destroy = () => {
          if (__classPrivateFieldGet(this, _Notification_pubnub, "f")) {
            __classPrivateFieldGet(this, _Notification_pubnub, "f").unsubscribeAll();

            __classPrivateFieldSet(this, _Notification_eventListeners, [], "f");
          }
        };

        this.registerEventListenerForUserChannel = params => {
          const {
            topic,
            messageType,
            callback
          } = params;

          if (!lodash.isFunction(callback)) {
            throw Error(`Registering Event Listener ${topic} ${messageType}: callback needs to be a function`);
          }

          __classPrivateFieldGet(this, _Notification_eventListeners, "f").push({
            topic,
            messageType,
            callback
          });
        };

        this.setUniqueSessionTriggerHook = hook => {
          __classPrivateFieldSet(this, _Notification_uniqueSessionTriggerHook, hook, "f");
        };

        _Notification_initFirmChannel.set(this, (firmId, userId) => {
          __classPrivateFieldGet(this, _Notification_pubnub, "f").addListener({
            presence: presenceEvent => {
              //* handle presence
              const {
                action,
                uuid
              } = presenceEvent; //* the message was sent from the current pubnub instance

              if (uuid === __classPrivateFieldGet(this, _Notification_pubnubKeys, "f").uuid) {
                return;
              } //* handle action 'leave' and 'timeout'


              if (action === 'leave' || action === 'timeout') {
                const valuesUUID = uuid.split('~');
                const userIdFromPresence = valuesUUID[0] || '';
                const instanceGuidFromPresence = valuesUUID[1] || '';
                const userActionFromPresence = valuesUUID[2] || '';
                const isUserActionRequiredLogout = userActionFromPresence === USER_ACTION.USERNAME_CHANGED || userActionFromPresence === USER_ACTION.PASSWORD_CHANGED || userActionFromPresence === USER_ACTION.USER_DISABLED;

                if (userIdFromPresence === userId && instanceGuidFromPresence === EMPTY_GUID && isUserActionRequiredLogout) {
                  //* User Information has been changed, force user to logout
                  AuthAgent.logout(true); // call logout with force=true (because the logout is forced)
                }
              }
            }
          });

          __classPrivateFieldGet(this, _Notification_pubnub, "f").subscribe({
            channels: [firmId],
            withPresence: true
          });
        });

        _Notification_initUserChannel.set(this, userId => {
          __classPrivateFieldGet(this, _Notification_pubnub, "f").addListener({
            message: data => {
              const {
                content
              } = data.message;

              if (content && content.topic && content.messageType && content.data) {
                for (const eventListener of __classPrivateFieldGet(this, _Notification_eventListeners, "f")) {
                  if (eventListener.topic === content.topic && eventListener.messageType === content.messageType && eventListener.callback && lodash.isFunction(eventListener.callback)) {
                    return eventListener.callback(content.data);
                  }
                }
              }
            }
          });

          __classPrivateFieldGet(this, _Notification_pubnub, "f").subscribe({
            channels: [`user_${userId}`],
            withPresence: false
          });
        });

        _Notification_initUniqueSessionChannel.set(this, params => __awaiter(this, void 0, void 0, function* () {
          const decodedToken = yield AuthAgent.getDecodedAccessToken();
          const {
            authHost: myAuthHost,
            clientId: myClientId
          } = params;
          const {
            userId: myUserId,
            sessionId: mySessionId,
            impersonatorId: myImpersonatorId
          } = decodedToken;

          if (!decodedToken) {
            return;
          }

          const channel = `auth-session-${myUserId}`;

          __classPrivateFieldGet(this, _Notification_pubnub, "f").addListener({
            message: data => __awaiter(this, void 0, void 0, function* () {
              const decodedToken = yield AuthAgent.getDecodedAccessToken();

              if (!decodedToken) {
                AuthAgent.logout(true); // call logout with force=true (because the logout is forced)
              }

              const {
                sessionId: mySessionId,
                impersonatorId: myImpersonatorId,
                userId: myUserId
              } = decodedToken;
              const myAgentId = localStorage.getItem('leap-auth-agent-id');

              if (myAgentId && data && data.message) {
                data.message.sessionId;
                      const authHost = data.message.authHost,
                      clientId = data.message.clientId,
                      logout = data.message.logout,
                      agentId = data.message.agentId,
                      impersonatorId = myImpersonatorId ? myImpersonatorId : data.message.impersonatorId;

                if (authHost === myAuthHost) {
                  if (clientId === myClientId && agentId !== myAgentId || // same application, different browser => logout (unique session feature)
                  clientId !== myClientId && agentId === myAgentId && logout // different application, same browser, logout asked by user => logout (unique logout feature)
                  ) {
                    if (impersonatorId !== undefined && impersonatorId !== '') {
                      // I'm impersonating someone who is being logged in or out so I don't want to be logged out
                      console.log('user ' + impersonatorId + ' impersonating user ' + myUserId);
                    } else {
                      if (!!__classPrivateFieldGet(this, _Notification_uniqueSessionTriggerHook, "f") && lodash.isFunction(__classPrivateFieldGet(this, _Notification_uniqueSessionTriggerHook, "f"))) {
                        __classPrivateFieldGet(this, _Notification_uniqueSessionTriggerHook, "f").call(this);
                      } else {
                        AuthAgent.logout(true); // call logout with force=true (because the logout is forced)
                      }
                    }
                  }
                }
              }
            })
          });

          __classPrivateFieldGet(this, _Notification_pubnub, "f").subscribe({
            channels: [channel],
            withPresence: true
          });

          let agentId = localStorage.getItem('leap-auth-agent-id');

          if (!agentId) {
            agentId = uuid.v4();
            localStorage.setItem('leap-auth-agent-id', agentId);
          }

          __classPrivateFieldGet(this, _Notification_pubnub, "f").publish({
            message: {
              authHost: myAuthHost,
              clientId: myClientId,
              sessionId: mySessionId,
              agentId: agentId,
              impersonatorId: myImpersonatorId
            },
            channel: channel
          }, status => {
            if (status.error) {
              console.log('pubnub error');
            }
          });
        }));

        __classPrivateFieldSet(this, _Notification_pubnubKeys, {
          publishKey: 'pub-13f5288e-cd88-4ef9-9e68-0c11cd03ddb8',
          subscribeKey: 'sub-a456f002-0095-11e2-9638-9581afc33ebf',
          uuid: uuid.v4()
        }, "f");

        __classPrivateFieldSet(this, _Notification_pubnub, new Pubnub__default["default"](__classPrivateFieldGet(this, _Notification_pubnubKeys, "f")), "f");
      }

    }
    _Notification_pubnubKeys = new WeakMap(), _Notification_pubnub = new WeakMap(), _Notification_eventListeners = new WeakMap(), _Notification_uniqueSessionTriggerHook = new WeakMap(), _Notification_initFirmChannel = new WeakMap(), _Notification_initUserChannel = new WeakMap(), _Notification_initUniqueSessionChannel = new WeakMap();

    var uncurryThis$7 = functionUncurryThis;
    var toObject$3 = toObject$7;

    var floor$2 = Math.floor;
    var charAt = uncurryThis$7(''.charAt);
    var replace = uncurryThis$7(''.replace);
    var stringSlice$2 = uncurryThis$7(''.slice);
    var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

    // `GetSubstitution` abstract operation
    // https://tc39.es/ecma262/#sec-getsubstitution
    var getSubstitution$1 = function (matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== undefined) {
        namedCaptures = toObject$3(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return replace(replacement, symbols, function (match, ch) {
        var capture;
        switch (charAt(ch, 0)) {
          case '$': return '$';
          case '&': return matched;
          case '`': return stringSlice$2(str, 0, position);
          case "'": return stringSlice$2(str, tailPos);
          case '<':
            capture = namedCaptures[stringSlice$2(ch, 1, -1)];
            break;
          default: // \d\d?
            var n = +ch;
            if (n === 0) return match;
            if (n > m) {
              var f = floor$2(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
      });
    };

    var apply$1 = functionApply;
    var call$3 = functionCall;
    var uncurryThis$6 = functionUncurryThis;
    var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
    var fails$6 = fails$q;
    var anObject$1 = anObject$h;
    var isCallable$2 = isCallable$p;
    var toIntegerOrInfinity$3 = toIntegerOrInfinity$7;
    var toLength$6 = toLength$9;
    var toString$2 = toString$7;
    var requireObjectCoercible$2 = requireObjectCoercible$8;
    var advanceStringIndex = advanceStringIndex$2;
    var getMethod = getMethod$6;
    var getSubstitution = getSubstitution$1;
    var regExpExec = regexpExecAbstract;
    var wellKnownSymbol$3 = wellKnownSymbol$m;

    var REPLACE = wellKnownSymbol$3('replace');
    var max = Math.max;
    var min$2 = Math.min;
    var concat = uncurryThis$6([].concat);
    var push$1 = uncurryThis$6([].push);
    var stringIndexOf = uncurryThis$6(''.indexOf);
    var stringSlice$1 = uncurryThis$6(''.slice);

    var maybeToString = function (it) {
      return it === undefined ? it : String(it);
    };

    // IE <= 11 replaces $0 with the whole match, as if it was $&
    // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
    var REPLACE_KEEPS_$0 = (function () {
      // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
      return 'a'.replace(/./, '$0') === '$0';
    })();

    // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
      if (/./[REPLACE]) {
        return /./[REPLACE]('a', '$0') === '';
      }
      return false;
    })();

    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$6(function () {
      var re = /./;
      re.exec = function () {
        var result = [];
        result.groups = { a: '7' };
        return result;
      };
      // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
      return ''.replace(re, '$<a>') !== '7';
    });

    // @@replace logic
    fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
      var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

      return [
        // `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible$2(this);
          var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
          return replacer
            ? call$3(replacer, searchValue, O, replaceValue)
            : call$3(nativeReplace, toString$2(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function (string, replaceValue) {
          var rx = anObject$1(this);
          var S = toString$2(string);

          if (
            typeof replaceValue == 'string' &&
            stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
            stringIndexOf(replaceValue, '$<') === -1
          ) {
            var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
            if (res.done) return res.value;
          }

          var functionalReplace = isCallable$2(replaceValue);
          if (!functionalReplace) replaceValue = toString$2(replaceValue);

          var global = rx.global;
          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;

            push$1(results, result);
            if (!global) break;

            var matchStr = toString$2(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength$6(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];

            var matched = toString$2(result[0]);
            var position = max(min$2(toIntegerOrInfinity$3(result.index), S.length), 0);
            var captures = [];
            // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
            for (var j = 1; j < result.length; j++) push$1(captures, maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = concat([matched], captures, position, S);
              if (namedCaptures !== undefined) push$1(replacerArgs, namedCaptures);
              var replacement = toString$2(apply$1(replaceValue, undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += stringSlice$1(S, nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + stringSlice$1(S, nextSourcePosition);
        }
      ];
    }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);

    // eslint-disable-next-line es-x/no-typed-arrays -- safe
    var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

    var global$d = global$V;
    var toIntegerOrInfinity$2 = toIntegerOrInfinity$7;
    var toLength$5 = toLength$9;

    var RangeError$5 = global$d.RangeError;

    // `ToIndex` abstract operation
    // https://tc39.es/ecma262/#sec-toindex
    var toIndex$2 = function (it) {
      if (it === undefined) return 0;
      var number = toIntegerOrInfinity$2(it);
      var length = toLength$5(number);
      if (number !== length) throw RangeError$5('Wrong length or index');
      return length;
    };

    // IEEE754 conversions based on https://github.com/feross/ieee754
    var global$c = global$V;

    var Array$3 = global$c.Array;
    var abs = Math.abs;
    var pow = Math.pow;
    var floor$1 = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;

    var pack = function (number, mantissaLength, bytes) {
      var buffer = Array$3(bytes);
      var exponentLength = bytes * 8 - mantissaLength - 1;
      var eMax = (1 << exponentLength) - 1;
      var eBias = eMax >> 1;
      var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
      var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
      var index = 0;
      var exponent, mantissa, c;
      number = abs(number);
      // eslint-disable-next-line no-self-compare -- NaN check
      if (number != number || number === Infinity) {
        // eslint-disable-next-line no-self-compare -- NaN check
        mantissa = number != number ? 1 : 0;
        exponent = eMax;
      } else {
        exponent = floor$1(log(number) / LN2);
        c = pow(2, -exponent);
        if (number * c < 1) {
          exponent--;
          c *= 2;
        }
        if (exponent + eBias >= 1) {
          number += rt / c;
        } else {
          number += rt * pow(2, 1 - eBias);
        }
        if (number * c >= 2) {
          exponent++;
          c /= 2;
        }
        if (exponent + eBias >= eMax) {
          mantissa = 0;
          exponent = eMax;
        } else if (exponent + eBias >= 1) {
          mantissa = (number * c - 1) * pow(2, mantissaLength);
          exponent = exponent + eBias;
        } else {
          mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
          exponent = 0;
        }
      }
      while (mantissaLength >= 8) {
        buffer[index++] = mantissa & 255;
        mantissa /= 256;
        mantissaLength -= 8;
      }
      exponent = exponent << mantissaLength | mantissa;
      exponentLength += mantissaLength;
      while (exponentLength > 0) {
        buffer[index++] = exponent & 255;
        exponent /= 256;
        exponentLength -= 8;
      }
      buffer[--index] |= sign * 128;
      return buffer;
    };

    var unpack = function (buffer, mantissaLength) {
      var bytes = buffer.length;
      var exponentLength = bytes * 8 - mantissaLength - 1;
      var eMax = (1 << exponentLength) - 1;
      var eBias = eMax >> 1;
      var nBits = exponentLength - 7;
      var index = bytes - 1;
      var sign = buffer[index--];
      var exponent = sign & 127;
      var mantissa;
      sign >>= 7;
      while (nBits > 0) {
        exponent = exponent * 256 + buffer[index--];
        nBits -= 8;
      }
      mantissa = exponent & (1 << -nBits) - 1;
      exponent >>= -nBits;
      nBits += mantissaLength;
      while (nBits > 0) {
        mantissa = mantissa * 256 + buffer[index--];
        nBits -= 8;
      }
      if (exponent === 0) {
        exponent = 1 - eBias;
      } else if (exponent === eMax) {
        return mantissa ? NaN : sign ? -Infinity : Infinity;
      } else {
        mantissa = mantissa + pow(2, mantissaLength);
        exponent = exponent - eBias;
      } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
    };

    var ieee754 = {
      pack: pack,
      unpack: unpack
    };

    var toObject$2 = toObject$7;
    var toAbsoluteIndex$1 = toAbsoluteIndex$4;
    var lengthOfArrayLike$3 = lengthOfArrayLike$7;

    // `Array.prototype.fill` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.fill
    var arrayFill$1 = function fill(value /* , start = 0, end = @length */) {
      var O = toObject$2(this);
      var length = lengthOfArrayLike$3(O);
      var argumentsLength = arguments.length;
      var index = toAbsoluteIndex$1(argumentsLength > 1 ? arguments[1] : undefined, length);
      var end = argumentsLength > 2 ? arguments[2] : undefined;
      var endPos = end === undefined ? length : toAbsoluteIndex$1(end, length);
      while (endPos > index) O[index++] = value;
      return O;
    };

    var global$b = global$V;
    var uncurryThis$5 = functionUncurryThis;
    var DESCRIPTORS$2 = descriptors;
    var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
    var FunctionName = functionName;
    var createNonEnumerableProperty$2 = createNonEnumerableProperty$9;
    var defineBuiltIns = defineBuiltIns$2;
    var fails$5 = fails$q;
    var anInstance$1 = anInstance$4;
    var toIntegerOrInfinity$1 = toIntegerOrInfinity$7;
    var toLength$4 = toLength$9;
    var toIndex$1 = toIndex$2;
    var IEEE754 = ieee754;
    var getPrototypeOf$1 = objectGetPrototypeOf;
    var setPrototypeOf$3 = objectSetPrototypeOf;
    var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
    var defineProperty$1 = objectDefineProperty.f;
    var arrayFill = arrayFill$1;
    var arraySlice$1 = arraySliceSimple;
    var setToStringTag = setToStringTag$5;
    var InternalStateModule$1 = internalState;

    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var getInternalState$1 = InternalStateModule$1.get;
    var setInternalState$1 = InternalStateModule$1.set;
    var ARRAY_BUFFER = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE = 'prototype';
    var WRONG_LENGTH$1 = 'Wrong length';
    var WRONG_INDEX = 'Wrong index';
    var NativeArrayBuffer = global$b[ARRAY_BUFFER];
    var $ArrayBuffer = NativeArrayBuffer;
    var ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
    var $DataView = global$b[DATA_VIEW];
    var DataViewPrototype$1 = $DataView && $DataView[PROTOTYPE];
    var ObjectPrototype$1 = Object.prototype;
    var Array$2 = global$b.Array;
    var RangeError$4 = global$b.RangeError;
    var fill = uncurryThis$5(arrayFill);
    var reverse = uncurryThis$5([].reverse);

    var packIEEE754 = IEEE754.pack;
    var unpackIEEE754 = IEEE754.unpack;

    var packInt8 = function (number) {
      return [number & 0xFF];
    };

    var packInt16 = function (number) {
      return [number & 0xFF, number >> 8 & 0xFF];
    };

    var packInt32 = function (number) {
      return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
    };

    var unpackInt32 = function (buffer) {
      return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
    };

    var packFloat32 = function (number) {
      return packIEEE754(number, 23, 4);
    };

    var packFloat64 = function (number) {
      return packIEEE754(number, 52, 8);
    };

    var addGetter$1 = function (Constructor, key) {
      defineProperty$1(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$1(this)[key]; } });
    };

    var get = function (view, count, index, isLittleEndian) {
      var intIndex = toIndex$1(index);
      var store = getInternalState$1(view);
      if (intIndex + count > store.byteLength) throw RangeError$4(WRONG_INDEX);
      var bytes = getInternalState$1(store.buffer).bytes;
      var start = intIndex + store.byteOffset;
      var pack = arraySlice$1(bytes, start, start + count);
      return isLittleEndian ? pack : reverse(pack);
    };

    var set = function (view, count, index, conversion, value, isLittleEndian) {
      var intIndex = toIndex$1(index);
      var store = getInternalState$1(view);
      if (intIndex + count > store.byteLength) throw RangeError$4(WRONG_INDEX);
      var bytes = getInternalState$1(store.buffer).bytes;
      var start = intIndex + store.byteOffset;
      var pack = conversion(+value);
      for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
    };

    if (!NATIVE_ARRAY_BUFFER$1) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance$1(this, ArrayBufferPrototype$1);
        var byteLength = toIndex$1(length);
        setInternalState$1(this, {
          bytes: fill(Array$2(byteLength), 0),
          byteLength: byteLength
        });
        if (!DESCRIPTORS$2) this.byteLength = byteLength;
      };

      ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];

      $DataView = function DataView(buffer, byteOffset, byteLength) {
        anInstance$1(this, DataViewPrototype$1);
        anInstance$1(buffer, ArrayBufferPrototype$1);
        var bufferLength = getInternalState$1(buffer).byteLength;
        var offset = toIntegerOrInfinity$1(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError$4('Wrong offset');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength$4(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError$4(WRONG_LENGTH$1);
        setInternalState$1(this, {
          buffer: buffer,
          byteLength: byteLength,
          byteOffset: offset
        });
        if (!DESCRIPTORS$2) {
          this.buffer = buffer;
          this.byteLength = byteLength;
          this.byteOffset = offset;
        }
      };

      DataViewPrototype$1 = $DataView[PROTOTYPE];

      if (DESCRIPTORS$2) {
        addGetter$1($ArrayBuffer, 'byteLength');
        addGetter$1($DataView, 'buffer');
        addGetter$1($DataView, 'byteLength');
        addGetter$1($DataView, 'byteOffset');
      }

      defineBuiltIns(DataViewPrototype$1, {
        getInt8: function getInt8(byteOffset) {
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset /* , littleEndian */) {
          return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
        },
        getUint32: function getUint32(byteOffset /* , littleEndian */) {
          return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
        },
        getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
        },
        setInt8: function setInt8(byteOffset, value) {
          set(this, 1, byteOffset, packInt8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
          set(this, 1, byteOffset, packInt8, value);
        },
        setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
        },
        setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
          set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
        }
      });
    } else {
      var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;
      /* eslint-disable no-new -- required for testing */
      if (!fails$5(function () {
        NativeArrayBuffer(1);
      }) || !fails$5(function () {
        new NativeArrayBuffer(-1);
      }) || fails$5(function () {
        new NativeArrayBuffer();
        new NativeArrayBuffer(1.5);
        new NativeArrayBuffer(NaN);
        return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
      })) {
      /* eslint-enable no-new -- required for testing */
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance$1(this, ArrayBufferPrototype$1);
          return new NativeArrayBuffer(toIndex$1(length));
        };

        $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;

        for (var keys = getOwnPropertyNames$1(NativeArrayBuffer), j = 0, key; keys.length > j;) {
          if (!((key = keys[j++]) in $ArrayBuffer)) {
            createNonEnumerableProperty$2($ArrayBuffer, key, NativeArrayBuffer[key]);
          }
        }

        ArrayBufferPrototype$1.constructor = $ArrayBuffer;
      } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
        createNonEnumerableProperty$2(NativeArrayBuffer, 'name', ARRAY_BUFFER);
      }

      // WebKit bug - the same parent prototype for typed arrays and data view
      if (setPrototypeOf$3 && getPrototypeOf$1(DataViewPrototype$1) !== ObjectPrototype$1) {
        setPrototypeOf$3(DataViewPrototype$1, ObjectPrototype$1);
      }

      // iOS Safari 7.x bug
      var testView = new $DataView(new $ArrayBuffer(2));
      var $setInt8 = uncurryThis$5(DataViewPrototype$1.setInt8);
      testView.setInt8(0, 2147483648);
      testView.setInt8(1, 2147483649);
      if (testView.getInt8(0) || !testView.getInt8(1)) defineBuiltIns(DataViewPrototype$1, {
        setInt8: function setInt8(byteOffset, value) {
          $setInt8(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
          $setInt8(this, byteOffset, value << 24 >> 24);
        }
      }, { unsafe: true });
    }

    setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    setToStringTag($DataView, DATA_VIEW);

    var arrayBuffer = {
      ArrayBuffer: $ArrayBuffer,
      DataView: $DataView
    };

    var $$3 = _export;
    var uncurryThis$4 = functionUncurryThis;
    var fails$4 = fails$q;
    var ArrayBufferModule$1 = arrayBuffer;
    var anObject = anObject$h;
    var toAbsoluteIndex = toAbsoluteIndex$4;
    var toLength$3 = toLength$9;
    var speciesConstructor = speciesConstructor$3;

    var ArrayBuffer$3 = ArrayBufferModule$1.ArrayBuffer;
    var DataView$2 = ArrayBufferModule$1.DataView;
    var DataViewPrototype = DataView$2.prototype;
    var un$ArrayBufferSlice = uncurryThis$4(ArrayBuffer$3.prototype.slice);
    var getUint8 = uncurryThis$4(DataViewPrototype.getUint8);
    var setUint8 = uncurryThis$4(DataViewPrototype.setUint8);

    var INCORRECT_SLICE = fails$4(function () {
      return !new ArrayBuffer$3(2).slice(1, undefined).byteLength;
    });

    // `ArrayBuffer.prototype.slice` method
    // https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
    $$3({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
      slice: function slice(start, end) {
        if (un$ArrayBufferSlice && end === undefined) {
          return un$ArrayBufferSlice(anObject(this), start); // FF fix
        }
        var length = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === undefined ? length : end, length);
        var result = new (speciesConstructor(this, ArrayBuffer$3))(toLength$3(fin - first));
        var viewSource = new DataView$2(this);
        var viewTarget = new DataView$2(result);
        var index = 0;
        while (first < fin) {
          setUint8(viewTarget, index++, getUint8(viewSource, first++));
        } return result;
      }
    });

    var typedArrayConstructor = {exports: {}};

    var NATIVE_ARRAY_BUFFER = arrayBufferNative;
    var DESCRIPTORS$1 = descriptors;
    var global$a = global$V;
    var isCallable$1 = isCallable$p;
    var isObject$4 = isObject$e;
    var hasOwn$1 = hasOwnProperty_1;
    var classof$2 = classof$a;
    var tryToString = tryToString$5;
    var createNonEnumerableProperty$1 = createNonEnumerableProperty$9;
    var defineBuiltIn = defineBuiltIn$9;
    var defineProperty = objectDefineProperty.f;
    var isPrototypeOf$1 = objectIsPrototypeOf;
    var getPrototypeOf = objectGetPrototypeOf;
    var setPrototypeOf$2 = objectSetPrototypeOf;
    var wellKnownSymbol$2 = wellKnownSymbol$m;
    var uid = uid$3;

    var Int8Array$3 = global$a.Int8Array;
    var Int8ArrayPrototype$1 = Int8Array$3 && Int8Array$3.prototype;
    var Uint8ClampedArray$1 = global$a.Uint8ClampedArray;
    var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
    var TypedArray$1 = Int8Array$3 && getPrototypeOf(Int8Array$3);
    var TypedArrayPrototype$1 = Int8ArrayPrototype$1 && getPrototypeOf(Int8ArrayPrototype$1);
    var ObjectPrototype = Object.prototype;
    var TypeError$2 = global$a.TypeError;

    var TO_STRING_TAG = wellKnownSymbol$2('toStringTag');
    var TYPED_ARRAY_TAG$1 = uid('TYPED_ARRAY_TAG');
    var TYPED_ARRAY_CONSTRUCTOR$1 = uid('TYPED_ARRAY_CONSTRUCTOR');
    // Fixing native typed arrays in Opera Presto crashes the browser, see #595
    var NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER && !!setPrototypeOf$2 && classof$2(global$a.opera) !== 'Opera';
    var TYPED_ARRAY_TAG_REQUIRED = false;
    var NAME, Constructor, Prototype;

    var TypedArrayConstructorsList = {
      Int8Array: 1,
      Uint8Array: 1,
      Uint8ClampedArray: 1,
      Int16Array: 2,
      Uint16Array: 2,
      Int32Array: 4,
      Uint32Array: 4,
      Float32Array: 4,
      Float64Array: 8
    };

    var BigIntArrayConstructorsList = {
      BigInt64Array: 8,
      BigUint64Array: 8
    };

    var isView = function isView(it) {
      if (!isObject$4(it)) return false;
      var klass = classof$2(it);
      return klass === 'DataView'
        || hasOwn$1(TypedArrayConstructorsList, klass)
        || hasOwn$1(BigIntArrayConstructorsList, klass);
    };

    var isTypedArray$1 = function (it) {
      if (!isObject$4(it)) return false;
      var klass = classof$2(it);
      return hasOwn$1(TypedArrayConstructorsList, klass)
        || hasOwn$1(BigIntArrayConstructorsList, klass);
    };

    var aTypedArray$3 = function (it) {
      if (isTypedArray$1(it)) return it;
      throw TypeError$2('Target is not a typed array');
    };

    var aTypedArrayConstructor$2 = function (C) {
      if (isCallable$1(C) && (!setPrototypeOf$2 || isPrototypeOf$1(TypedArray$1, C))) return C;
      throw TypeError$2(tryToString(C) + ' is not a typed array constructor');
    };

    var exportTypedArrayMethod$3 = function (KEY, property, forced, options) {
      if (!DESCRIPTORS$1) return;
      if (forced) for (var ARRAY in TypedArrayConstructorsList) {
        var TypedArrayConstructor = global$a[ARRAY];
        if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor.prototype, KEY)) try {
          delete TypedArrayConstructor.prototype[KEY];
        } catch (error) {
          // old WebKit bug - some methods are non-configurable
          try {
            TypedArrayConstructor.prototype[KEY] = property;
          } catch (error2) { /* empty */ }
        }
      }
      if (!TypedArrayPrototype$1[KEY] || forced) {
        defineBuiltIn(TypedArrayPrototype$1, KEY, forced ? property
          : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype$1[KEY] || property, options);
      }
    };

    var exportTypedArrayStaticMethod = function (KEY, property, forced) {
      var ARRAY, TypedArrayConstructor;
      if (!DESCRIPTORS$1) return;
      if (setPrototypeOf$2) {
        if (forced) for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global$a[ARRAY];
          if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor, KEY)) try {
            delete TypedArrayConstructor[KEY];
          } catch (error) { /* empty */ }
        }
        if (!TypedArray$1[KEY] || forced) {
          // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
          try {
            return defineBuiltIn(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);
          } catch (error) { /* empty */ }
        } else return;
      }
      for (ARRAY in TypedArrayConstructorsList) {
        TypedArrayConstructor = global$a[ARRAY];
        if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
          defineBuiltIn(TypedArrayConstructor, KEY, property);
        }
      }
    };

    for (NAME in TypedArrayConstructorsList) {
      Constructor = global$a[NAME];
      Prototype = Constructor && Constructor.prototype;
      if (Prototype) createNonEnumerableProperty$1(Prototype, TYPED_ARRAY_CONSTRUCTOR$1, Constructor);
      else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;
    }

    for (NAME in BigIntArrayConstructorsList) {
      Constructor = global$a[NAME];
      Prototype = Constructor && Constructor.prototype;
      if (Prototype) createNonEnumerableProperty$1(Prototype, TYPED_ARRAY_CONSTRUCTOR$1, Constructor);
    }

    // WebKit bug - typed arrays constructors prototype is Object.prototype
    if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !isCallable$1(TypedArray$1) || TypedArray$1 === Function.prototype) {
      // eslint-disable-next-line no-shadow -- safe
      TypedArray$1 = function TypedArray() {
        throw TypeError$2('Incorrect invocation');
      };
      if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
        if (global$a[NAME]) setPrototypeOf$2(global$a[NAME], TypedArray$1);
      }
    }

    if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype) {
      TypedArrayPrototype$1 = TypedArray$1.prototype;
      if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
        if (global$a[NAME]) setPrototypeOf$2(global$a[NAME].prototype, TypedArrayPrototype$1);
      }
    }

    // WebKit bug - one more object in Uint8ClampedArray prototype chain
    if (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {
      setPrototypeOf$2(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);
    }

    if (DESCRIPTORS$1 && !hasOwn$1(TypedArrayPrototype$1, TO_STRING_TAG)) {
      TYPED_ARRAY_TAG_REQUIRED = true;
      defineProperty(TypedArrayPrototype$1, TO_STRING_TAG, { get: function () {
        return isObject$4(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
      } });
      for (NAME in TypedArrayConstructorsList) if (global$a[NAME]) {
        createNonEnumerableProperty$1(global$a[NAME], TYPED_ARRAY_TAG$1, NAME);
      }
    }

    var arrayBufferViewCore = {
      NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,
      TYPED_ARRAY_CONSTRUCTOR: TYPED_ARRAY_CONSTRUCTOR$1,
      TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,
      aTypedArray: aTypedArray$3,
      aTypedArrayConstructor: aTypedArrayConstructor$2,
      exportTypedArrayMethod: exportTypedArrayMethod$3,
      exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
      isView: isView,
      isTypedArray: isTypedArray$1,
      TypedArray: TypedArray$1,
      TypedArrayPrototype: TypedArrayPrototype$1
    };

    /* eslint-disable no-new -- required for testing */

    var global$9 = global$V;
    var fails$3 = fails$q;
    var checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;
    var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

    var ArrayBuffer$2 = global$9.ArrayBuffer;
    var Int8Array$2 = global$9.Int8Array;

    var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$3(function () {
      Int8Array$2(1);
    }) || !fails$3(function () {
      new Int8Array$2(-1);
    }) || !checkCorrectnessOfIteration(function (iterable) {
      new Int8Array$2();
      new Int8Array$2(null);
      new Int8Array$2(1.5);
      new Int8Array$2(iterable);
    }, true) || fails$3(function () {
      // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
      return new Int8Array$2(new ArrayBuffer$2(2), 1, undefined).length !== 1;
    });

    var isObject$3 = isObject$e;

    var floor = Math.floor;

    // `IsIntegralNumber` abstract operation
    // https://tc39.es/ecma262/#sec-isintegralnumber
    // eslint-disable-next-line es-x/no-number-isinteger -- safe
    var isIntegralNumber$1 = Number.isInteger || function isInteger(it) {
      return !isObject$3(it) && isFinite(it) && floor(it) === it;
    };

    var global$8 = global$V;
    var toIntegerOrInfinity = toIntegerOrInfinity$7;

    var RangeError$3 = global$8.RangeError;

    var toPositiveInteger$1 = function (it) {
      var result = toIntegerOrInfinity(it);
      if (result < 0) throw RangeError$3("The argument can't be less than 0");
      return result;
    };

    var global$7 = global$V;
    var toPositiveInteger = toPositiveInteger$1;

    var RangeError$2 = global$7.RangeError;

    var toOffset$2 = function (it, BYTES) {
      var offset = toPositiveInteger(it);
      if (offset % BYTES) throw RangeError$2('Wrong offset');
      return offset;
    };

    var bind$1 = functionBindContext;
    var call$2 = functionCall;
    var aConstructor = aConstructor$2;
    var toObject$1 = toObject$7;
    var lengthOfArrayLike$2 = lengthOfArrayLike$7;
    var getIterator = getIterator$3;
    var getIteratorMethod = getIteratorMethod$4;
    var isArrayIteratorMethod = isArrayIteratorMethod$2;
    var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

    var typedArrayFrom$1 = function from(source /* , mapfn, thisArg */) {
      var C = aConstructor(this);
      var O = toObject$1(source);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var iteratorMethod = getIteratorMethod(O);
      var i, length, result, step, iterator, next;
      if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
        iterator = getIterator(O, iteratorMethod);
        next = iterator.next;
        O = [];
        while (!(step = call$2(next, iterator)).done) {
          O.push(step.value);
        }
      }
      if (mapping && argumentsLength > 2) {
        mapfn = bind$1(mapfn, arguments[2]);
      }
      length = lengthOfArrayLike$2(O);
      result = new (aTypedArrayConstructor$1(C))(length);
      for (i = 0; length > i; i++) {
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
      return result;
    };

    var classof$1 = classofRaw$1;

    // `IsArray` abstract operation
    // https://tc39.es/ecma262/#sec-isarray
    // eslint-disable-next-line es-x/no-array-isarray -- safe
    var isArray$1 = Array.isArray || function isArray(argument) {
      return classof$1(argument) == 'Array';
    };

    var global$6 = global$V;
    var isArray = isArray$1;
    var isConstructor = isConstructor$2;
    var isObject$2 = isObject$e;
    var wellKnownSymbol$1 = wellKnownSymbol$m;

    var SPECIES = wellKnownSymbol$1('species');
    var Array$1 = global$6.Array;

    // a part of `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesConstructor$1 = function (originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        // cross-realm fallback
        if (isConstructor(C) && (C === Array$1 || isArray(C.prototype))) C = undefined;
        else if (isObject$2(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      } return C === undefined ? Array$1 : C;
    };

    var arraySpeciesConstructor = arraySpeciesConstructor$1;

    // `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate$1 = function (originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };

    var bind = functionBindContext;
    var uncurryThis$3 = functionUncurryThis;
    var IndexedObject = indexedObject;
    var toObject = toObject$7;
    var lengthOfArrayLike$1 = lengthOfArrayLike$7;
    var arraySpeciesCreate = arraySpeciesCreate$1;

    var push = uncurryThis$3([].push);

    // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
    var createMethod = function (TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_REJECT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function ($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self = IndexedObject(O);
        var boundFunction = bind(callbackfn, that);
        var length = lengthOfArrayLike$1(self);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
        var value, result;
        for (;length > index; index++) if (NO_HOLES || index in self) {
          value = self[index];
          result = boundFunction(value, index, O);
          if (TYPE) {
            if (IS_MAP) target[index] = result; // map
            else if (result) switch (TYPE) {
              case 3: return true;              // some
              case 5: return value;             // find
              case 6: return index;             // findIndex
              case 2: push(target, value);      // filter
            } else switch (TYPE) {
              case 4: return false;             // every
              case 7: push(target, value);      // filterReject
            }
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };

    var arrayIteration = {
      // `Array.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-array.prototype.foreach
      forEach: createMethod(0),
      // `Array.prototype.map` method
      // https://tc39.es/ecma262/#sec-array.prototype.map
      map: createMethod(1),
      // `Array.prototype.filter` method
      // https://tc39.es/ecma262/#sec-array.prototype.filter
      filter: createMethod(2),
      // `Array.prototype.some` method
      // https://tc39.es/ecma262/#sec-array.prototype.some
      some: createMethod(3),
      // `Array.prototype.every` method
      // https://tc39.es/ecma262/#sec-array.prototype.every
      every: createMethod(4),
      // `Array.prototype.find` method
      // https://tc39.es/ecma262/#sec-array.prototype.find
      find: createMethod(5),
      // `Array.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-array.prototype.findIndex
      findIndex: createMethod(6),
      // `Array.prototype.filterReject` method
      // https://github.com/tc39/proposal-array-filtering
      filterReject: createMethod(7)
    };

    var isCallable = isCallable$p;
    var isObject$1 = isObject$e;
    var setPrototypeOf$1 = objectSetPrototypeOf;

    // makes subclassing work correct for wrapped built-ins
    var inheritIfRequired$1 = function ($this, dummy, Wrapper) {
      var NewTarget, NewTargetPrototype;
      if (
        // it can work only with native `setPrototypeOf`
        setPrototypeOf$1 &&
        // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
        isCallable(NewTarget = dummy.constructor) &&
        NewTarget !== Wrapper &&
        isObject$1(NewTargetPrototype = NewTarget.prototype) &&
        NewTargetPrototype !== Wrapper.prototype
      ) setPrototypeOf$1($this, NewTargetPrototype);
      return $this;
    };

    var $$2 = _export;
    var global$5 = global$V;
    var call$1 = functionCall;
    var DESCRIPTORS = descriptors;
    var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;
    var ArrayBufferViewCore$3 = arrayBufferViewCore;
    var ArrayBufferModule = arrayBuffer;
    var anInstance = anInstance$4;
    var createPropertyDescriptor = createPropertyDescriptor$6;
    var createNonEnumerableProperty = createNonEnumerableProperty$9;
    var isIntegralNumber = isIntegralNumber$1;
    var toLength$2 = toLength$9;
    var toIndex = toIndex$2;
    var toOffset$1 = toOffset$2;
    var toPropertyKey = toPropertyKey$4;
    var hasOwn = hasOwnProperty_1;
    var classof = classof$a;
    var isObject = isObject$e;
    var isSymbol = isSymbol$3;
    var create = objectCreate;
    var isPrototypeOf = objectIsPrototypeOf;
    var setPrototypeOf = objectSetPrototypeOf;
    var getOwnPropertyNames = objectGetOwnPropertyNames.f;
    var typedArrayFrom = typedArrayFrom$1;
    var forEach = arrayIteration.forEach;
    var setSpecies = setSpecies$2;
    var definePropertyModule = objectDefineProperty;
    var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
    var InternalStateModule = internalState;
    var inheritIfRequired = inheritIfRequired$1;

    var getInternalState = InternalStateModule.get;
    var setInternalState = InternalStateModule.set;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var round = Math.round;
    var RangeError$1 = global$5.RangeError;
    var ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;
    var ArrayBufferPrototype = ArrayBuffer$1.prototype;
    var DataView$1 = ArrayBufferModule.DataView;
    var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$3.NATIVE_ARRAY_BUFFER_VIEWS;
    var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore$3.TYPED_ARRAY_CONSTRUCTOR;
    var TYPED_ARRAY_TAG = ArrayBufferViewCore$3.TYPED_ARRAY_TAG;
    var TypedArray = ArrayBufferViewCore$3.TypedArray;
    var TypedArrayPrototype = ArrayBufferViewCore$3.TypedArrayPrototype;
    var aTypedArrayConstructor = ArrayBufferViewCore$3.aTypedArrayConstructor;
    var isTypedArray = ArrayBufferViewCore$3.isTypedArray;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var WRONG_LENGTH = 'Wrong length';

    var fromList = function (C, list) {
      aTypedArrayConstructor(C);
      var index = 0;
      var length = list.length;
      var result = new C(length);
      while (length > index) result[index] = list[index++];
      return result;
    };

    var addGetter = function (it, key) {
      nativeDefineProperty(it, key, { get: function () {
        return getInternalState(this)[key];
      } });
    };

    var isArrayBuffer = function (it) {
      var klass;
      return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
    };

    var isTypedArrayIndex = function (target, key) {
      return isTypedArray(target)
        && !isSymbol(key)
        && key in target
        && isIntegralNumber(+key)
        && key >= 0;
    };

    var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
      key = toPropertyKey(key);
      return isTypedArrayIndex(target, key)
        ? createPropertyDescriptor(2, target[key])
        : nativeGetOwnPropertyDescriptor(target, key);
    };

    var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
      key = toPropertyKey(key);
      if (isTypedArrayIndex(target, key)
        && isObject(descriptor)
        && hasOwn(descriptor, 'value')
        && !hasOwn(descriptor, 'get')
        && !hasOwn(descriptor, 'set')
        // TODO: add validation descriptor w/o calling accessors
        && !descriptor.configurable
        && (!hasOwn(descriptor, 'writable') || descriptor.writable)
        && (!hasOwn(descriptor, 'enumerable') || descriptor.enumerable)
      ) {
        target[key] = descriptor.value;
        return target;
      } return nativeDefineProperty(target, key, descriptor);
    };

    if (DESCRIPTORS) {
      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
        getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
        definePropertyModule.f = wrappedDefineProperty;
        addGetter(TypedArrayPrototype, 'buffer');
        addGetter(TypedArrayPrototype, 'byteOffset');
        addGetter(TypedArrayPrototype, 'byteLength');
        addGetter(TypedArrayPrototype, 'length');
      }

      $$2({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
        getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
        defineProperty: wrappedDefineProperty
      });

      typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {
        var BYTES = TYPE.match(/\d+$/)[0] / 8;
        var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + TYPE;
        var SETTER = 'set' + TYPE;
        var NativeTypedArrayConstructor = global$5[CONSTRUCTOR_NAME];
        var TypedArrayConstructor = NativeTypedArrayConstructor;
        var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
        var exported = {};

        var getter = function (that, index) {
          var data = getInternalState(that);
          return data.view[GETTER](index * BYTES + data.byteOffset, true);
        };

        var setter = function (that, index, value) {
          var data = getInternalState(that);
          if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
          data.view[SETTER](index * BYTES + data.byteOffset, value, true);
        };

        var addElement = function (that, index) {
          nativeDefineProperty(that, index, {
            get: function () {
              return getter(this, index);
            },
            set: function (value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };

        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
            anInstance(that, TypedArrayConstructorPrototype);
            var index = 0;
            var byteOffset = 0;
            var buffer, byteLength, length;
            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new ArrayBuffer$1(byteLength);
            } else if (isArrayBuffer(data)) {
              buffer = data;
              byteOffset = toOffset$1(offset, BYTES);
              var $len = data.byteLength;
              if ($length === undefined) {
                if ($len % BYTES) throw RangeError$1(WRONG_LENGTH);
                byteLength = $len - byteOffset;
                if (byteLength < 0) throw RangeError$1(WRONG_LENGTH);
              } else {
                byteLength = toLength$2($length) * BYTES;
                if (byteLength + byteOffset > $len) throw RangeError$1(WRONG_LENGTH);
              }
              length = byteLength / BYTES;
            } else if (isTypedArray(data)) {
              return fromList(TypedArrayConstructor, data);
            } else {
              return call$1(typedArrayFrom, TypedArrayConstructor, data);
            }
            setInternalState(that, {
              buffer: buffer,
              byteOffset: byteOffset,
              byteLength: byteLength,
              length: length,
              view: new DataView$1(buffer)
            });
            while (index < length) addElement(that, index++);
          });

          if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
          TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
        } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
          TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
            anInstance(dummy, TypedArrayConstructorPrototype);
            return inheritIfRequired(function () {
              if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
              if (isArrayBuffer(data)) return $length !== undefined
                ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)
                : typedArrayOffset !== undefined
                  ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))
                  : new NativeTypedArrayConstructor(data);
              if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
              return call$1(typedArrayFrom, TypedArrayConstructor, data);
            }(), dummy, TypedArrayConstructor);
          });

          if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
          forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
            if (!(key in TypedArrayConstructor)) {
              createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
            }
          });
          TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
        }

        if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
        }

        createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR, TypedArrayConstructor);

        if (TYPED_ARRAY_TAG) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
        }

        var FORCED = TypedArrayConstructor != NativeTypedArrayConstructor;

        exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

        $$2({ global: true, constructor: true, forced: FORCED, sham: !NATIVE_ARRAY_BUFFER_VIEWS }, exported);

        if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
        }

        if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
          createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
        }

        setSpecies(CONSTRUCTOR_NAME);
      };
    } else typedArrayConstructor.exports = function () { /* empty */ };

    var createTypedArrayConstructor = typedArrayConstructor.exports;

    // `Uint8Array` constructor
    // https://tc39.es/ecma262/#sec-typedarray-objects
    createTypedArrayConstructor('Uint8', function (init) {
      return function Uint8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });

    var global$4 = global$V;
    var call = functionCall;
    var ArrayBufferViewCore$2 = arrayBufferViewCore;
    var lengthOfArrayLike = lengthOfArrayLike$7;
    var toOffset = toOffset$2;
    var toIndexedObject = toObject$7;
    var fails$2 = fails$q;

    var RangeError = global$4.RangeError;
    var Int8Array$1 = global$4.Int8Array;
    var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
    var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
    var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
    var exportTypedArrayMethod$2 = ArrayBufferViewCore$2.exportTypedArrayMethod;

    var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$2(function () {
      // eslint-disable-next-line es-x/no-typed-arrays -- required for testing
      var array = new Uint8ClampedArray(2);
      call($set, array, { length: 1, 0: 3 }, 1);
      return array[1] !== 3;
    });

    // https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other
    var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$2.NATIVE_ARRAY_BUFFER_VIEWS && fails$2(function () {
      var array = new Int8Array$1(2);
      array.set(1);
      array.set('2', 1);
      return array[0] !== 0 || array[1] !== 2;
    });

    // `%TypedArray%.prototype.set` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
    exportTypedArrayMethod$2('set', function set(arrayLike /* , offset */) {
      aTypedArray$2(this);
      var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
      var src = toIndexedObject(arrayLike);
      if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call($set, this, src, offset);
      var length = this.length;
      var len = lengthOfArrayLike(src);
      var index = 0;
      if (len + offset > length) throw RangeError('Wrong length');
      while (index < len) this[offset + index] = src[index++];
    }, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

    var userAgent$1 = engineUserAgent;

    var firefox = userAgent$1.match(/firefox\/(\d+)/i);

    var engineFfVersion = !!firefox && +firefox[1];

    var UA = engineUserAgent;

    var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

    var userAgent = engineUserAgent;

    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

    var engineWebkitVersion = !!webkit && +webkit[1];

    var global$3 = global$V;
    var uncurryThis$2 = functionUncurryThis;
    var fails$1 = fails$q;
    var aCallable = aCallable$8;
    var internalSort = arraySort$1;
    var ArrayBufferViewCore$1 = arrayBufferViewCore;
    var FF = engineFfVersion;
    var IE_OR_EDGE = engineIsIeOrEdge;
    var V8 = engineV8Version;
    var WEBKIT = engineWebkitVersion;

    var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
    var exportTypedArrayMethod$1 = ArrayBufferViewCore$1.exportTypedArrayMethod;
    var Uint16Array = global$3.Uint16Array;
    var un$Sort = Uint16Array && uncurryThis$2(Uint16Array.prototype.sort);

    // WebKit
    var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$1(function () {
      un$Sort(new Uint16Array(2), null);
    }) && fails$1(function () {
      un$Sort(new Uint16Array(2), {});
    }));

    var STABLE_SORT = !!un$Sort && !fails$1(function () {
      // feature detection can be too slow, so check engines versions
      if (V8) return V8 < 74;
      if (FF) return FF < 67;
      if (IE_OR_EDGE) return true;
      if (WEBKIT) return WEBKIT < 602;

      var array = new Uint16Array(516);
      var expected = Array(516);
      var index, mod;

      for (index = 0; index < 516; index++) {
        mod = index % 4;
        array[index] = 515 - index;
        expected[index] = index - 2 * mod + 3;
      }

      un$Sort(array, function (a, b) {
        return (a / 4 | 0) - (b / 4 | 0);
      });

      for (index = 0; index < 516; index++) {
        if (array[index] !== expected[index]) return true;
      }
    });

    var getSortCompare = function (comparefn) {
      return function (x, y) {
        if (comparefn !== undefined) return +comparefn(x, y) || 0;
        // eslint-disable-next-line no-self-compare -- NaN check
        if (y !== y) return -1;
        // eslint-disable-next-line no-self-compare -- NaN check
        if (x !== x) return 1;
        if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
        return x > y;
      };
    };

    // `%TypedArray%.prototype.sort` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
    exportTypedArrayMethod$1('sort', function sort(comparefn) {
      if (comparefn !== undefined) aCallable(comparefn);
      if (STABLE_SORT) return un$Sort(this, comparefn);

      return internalSort(aTypedArray$1(this), getSortCompare(comparefn));
    }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

    var global$2 = global$V;
    var apply = functionApply;
    var ArrayBufferViewCore = arrayBufferViewCore;
    var fails = fails$q;
    var arraySlice = arraySlice$4;

    var Int8Array = global$2.Int8Array;
    var aTypedArray = ArrayBufferViewCore.aTypedArray;
    var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
    var $toLocaleString = [].toLocaleString;

    // iOS Safari 6.x fails here
    var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
      $toLocaleString.call(new Int8Array(1));
    });

    var FORCED = fails(function () {
      return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
    }) || !fails(function () {
      Int8Array.prototype.toLocaleString.call([1, 2]);
    });

    // `%TypedArray%.prototype.toLocaleString` method
    // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
    exportTypedArrayMethod('toLocaleString', function toLocaleString() {
      return apply(
        $toLocaleString,
        TO_LOCALE_STRING_BUG ? arraySlice(aTypedArray(this)) : aTypedArray(this),
        arraySlice(arguments)
      );
    }, FORCED);

    const deleteQueryParameter = (windowLocation, name, value) => {
      const nameValue = name + '=' + value;
      let toReplace = nameValue;

      if (windowLocation.indexOf('?' + nameValue) >= 0) {
        if (windowLocation.indexOf('?' + nameValue + '&') >= 0) {
          // first param
          toReplace += '&';
        } else {
          // first and unique param
          toReplace = '?' + toReplace;
        }
      } else if (windowLocation.indexOf('&' + nameValue) >= 0) {
        // not first param (maybe last)
        toReplace = '&' + toReplace;
      }

      return windowLocation.replace(toReplace, '');
    };
    const getQueryParameter = name => {
      const paramsForSearch = parseParams(window.location.search.substring(1));

      if (paramsForSearch[name]) {
        return paramsForSearch[name];
      }

      return undefined;
    };
    const createCodeChallenge = verifier => __awaiter(void 0, void 0, void 0, function* () {
      if (getCryptoSubtle()) {
        const code_challengeBuffer = yield sha256(verifier);
        const code_challenge = bufferToBase64UrlEncoded(code_challengeBuffer);
        return {
          code_challenge,
          code_challenge_method: 'S256'
        };
      } else {
        return {
          code_challenge: verifier,
          code_challenge_method: undefined
        };
      }
    });
    const getCrypto = () => {
      //ie 11.x uses msCrypto
      return window.crypto || window.msCrypto;
    };
    const createRandomString = size => {
      const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
      let random = '';
      const randomValues = Array.from(getCrypto().getRandomValues(new Uint8Array(size)));
      randomValues.forEach(v => random += charset[v % charset.length]);
      return random;
    };

    const sha256 = s => __awaiter(void 0, void 0, void 0, function* () {
      const digestOp = getCryptoSubtle().digest({
        name: 'SHA-256'
      }, new TextEncoder().encode(s)); // msCrypto (IE11) uses the old spec, which is not Promise based
      // https://msdn.microsoft.com/en-us/expression/dn904640(v=vs.71)
      // Instead of returning a promise, it returns a CryptoOperation
      // with a result property in it.
      // As a result, the various events need to be handled in the event that we're
      // working in IE11 (hence the msCrypto check). These events just call resolve
      // or reject depending on their intention.

      if (window.msCrypto) {
        return new Promise((res, rej) => {
          digestOp.oncomplete = e => {
            res(e.target.result);
          };

          digestOp.onerror = e => {
            rej(e.error);
          };

          digestOp.onabort = () => {
            rej('The digest operation was aborted');
          };
        });
      }

      return yield digestOp;
    });

    const getCryptoSubtle = () => {
      const crypto = getCrypto(); //safari 10.x uses webkitSubtle

      return crypto.subtle || crypto.webkitSubtle;
    };

    const bufferToBase64UrlEncoded = input => {
      const ie11SafeInput = new Uint8Array(input);
      return urlEncodeB64(window.btoa(String.fromCharCode(...Array.from(ie11SafeInput))));
    };

    const urlEncodeB64 = input => {
      const b64Chars = {
        '+': '-',
        '/': '_',
        '=': ''
      };
      return input.replace(/[+/=]/g, m => b64Chars[m]);
    };

    const parseParams = url => {
      const result = {};
      const params = url.split('&');

      for (let i = 0; i < params.length; i++) {
        const param = params[i].split('=', 2);
        if (param.length !== 2) continue;
        result[param[0]] = decodeURIComponent(param[1].replace(/\+/g, " "));
      }

      return result;
    };

    var global$1 = global$V;
    var isRegExp = isRegexp;

    var TypeError$1 = global$1.TypeError;

    var notARegexp = function (it) {
      if (isRegExp(it)) {
        throw TypeError$1("The method doesn't accept regular expressions");
      } return it;
    };

    var wellKnownSymbol = wellKnownSymbol$m;

    var MATCH = wellKnownSymbol('match');

    var correctIsRegexpLogic = function (METHOD_NAME) {
      var regexp = /./;
      try {
        '/./'[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return '/./'[METHOD_NAME](regexp);
        } catch (error2) { /* empty */ }
      } return false;
    };

    var $$1 = _export;
    var uncurryThis$1 = functionUncurryThis;
    var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var toLength$1 = toLength$9;
    var toString$1 = toString$7;
    var notARegExp$1 = notARegexp;
    var requireObjectCoercible$1 = requireObjectCoercible$8;
    var correctIsRegExpLogic$1 = correctIsRegexpLogic;

    // eslint-disable-next-line es-x/no-string-prototype-endswith -- safe
    var un$EndsWith = uncurryThis$1(''.endsWith);
    var slice = uncurryThis$1(''.slice);
    var min$1 = Math.min;

    var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegExpLogic$1('endsWith');
    // https://github.com/zloirock/core-js/pull/702
    var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
      var descriptor = getOwnPropertyDescriptor$1(String.prototype, 'endsWith');
      return descriptor && !descriptor.writable;
    }();

    // `String.prototype.endsWith` method
    // https://tc39.es/ecma262/#sec-string.prototype.endswith
    $$1({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1 }, {
      endsWith: function endsWith(searchString /* , endPosition = @length */) {
        var that = toString$1(requireObjectCoercible$1(this));
        notARegExp$1(searchString);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = that.length;
        var end = endPosition === undefined ? len : min$1(toLength$1(endPosition), len);
        var search = toString$1(searchString);
        return un$EndsWith
          ? un$EndsWith(that, search, end)
          : slice(that, end - search.length, end) === search;
      }
    });

    var $ = _export;
    var uncurryThis = functionUncurryThis;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var toLength = toLength$9;
    var toString = toString$7;
    var notARegExp = notARegexp;
    var requireObjectCoercible = requireObjectCoercible$8;
    var correctIsRegExpLogic = correctIsRegexpLogic;

    // eslint-disable-next-line es-x/no-string-prototype-startswith -- safe
    var un$StartsWith = uncurryThis(''.startsWith);
    var stringSlice = uncurryThis(''.slice);
    var min = Math.min;

    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
    // https://github.com/zloirock/core-js/pull/702
    var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
      var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
      return descriptor && !descriptor.writable;
    }();

    // `String.prototype.startsWith` method
    // https://tc39.es/ecma262/#sec-string.prototype.startswith
    $({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      startsWith: function startsWith(searchString /* , position = 0 */) {
        var that = toString(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = toString(searchString);
        return un$StartsWith
          ? un$StartsWith(that, search, index)
          : stringSlice(that, index, index + search.length) === search;
      }
    });

    const getRedirectUri = (origin, decodedToken, redirectionConfig) => {
      let result;
      let redirection;
      let redirectUrl;
      const topLevelDomains = redirectionConfig.topLevelDomains;
      const redirections = redirectionConfig.environments;
      const suffix = topLevelDomains.find(suffix => origin.endsWith(suffix));
      const environmentVariables = redirectionConfig.environmentVariables;

      if (suffix) {
        for (let i = 0; i < redirections.length; i++) {
          redirection = redirections[i];
          const tokenCriteriaMatched = containsKeys(decodedToken, redirection.criteria);

          if (tokenCriteriaMatched && !!containsApplication(redirection.applications, origin)) {
            //* check whether suffix needed to change
            if (redirection.topLevelDomain !== suffix) {
              //* we need to change the suffix of the origin
              //* we gonna use `redirection.topLevelDomain` to replace the origin's suffix
              redirectUrl = origin.replace(suffix, redirection.topLevelDomain);
            } //* check whether prefix needed to change


            const envVariables = environmentVariables[redirection.criteria.environment];

            if (envVariables) {
              const prefixMappings = envVariables['prefixMappings'];
              const keys = Object.keys(prefixMappings); //* check whether the current origin with anything inside the prefixMappings

              const needToUpdatePrefixKey = containsApplication(keys, origin);

              if (needToUpdatePrefixKey) {
                const prefixValue = prefixMappings[needToUpdatePrefixKey];
                redirectUrl = redirectUrl ? redirectUrl.replace(needToUpdatePrefixKey, prefixValue) : origin.replace(needToUpdatePrefixKey, prefixValue);
              }
            }

            break;
          }
        }

        if (!!redirection && !!redirectUrl) {
          result = `${redirection.authHost}/oauth/passthrough?jti=${decodedToken.jti}&redirect=${encodeURIComponent(redirectUrl)}`;
        }
      }

      return result;
    };

    const containsKeys = (obj1, obj2) => {
      let result = true;
      Object.keys(obj2).forEach(key => {
        if (obj1[key] !== obj2[key]) {
          result = false;
        }
      });
      return result;
    };

    const containsApplication = (list, app) => {
      return list.find(appName => app.startsWith(`http://${appName}`) || app.startsWith(`https://${appName}`));
    };

    var _Authentication_accessToken, _Authentication_config, _Authentication_leapAuthService, _Authentication_notification, _Authentication_refreshInfo, _Authentication_exchangeAuthCodeForAccessToken, _Authentication_verifyAndPerformRedirections, _Authentication_startRefreshAccessTokenProcess, _Authentication_destroyRefreshAccessTokenProcess, _Authentication_decodeAccessToken;
    const SECONDS_BEFORE_EXPIRE = 30;
    const MAX_SETTIME_OUT = 2147483647;
    const DEFAULT_AUTHORIZE_TIMEOUT_IN_SECONDS = 60;
    const CLEANUP_IFRAME_TIMEOUT_IN_SECONDS = 2;
    class Authentication {
      constructor(options) {
        _Authentication_accessToken.set(this, void 0);

        _Authentication_config.set(this, void 0);

        _Authentication_leapAuthService.set(this, void 0);

        _Authentication_notification.set(this, void 0);

        _Authentication_refreshInfo.set(this, void 0);

        this.registerEventListenerForUserChannel = params => {
          const {
            topic,
            messageType,
            callback
          } = params;

          __classPrivateFieldGet(this, _Authentication_notification, "f").registerEventListenerForUserChannel({
            topic,
            messageType,
            callback
          });
        };

        this.initNotification = () => __awaiter(this, void 0, void 0, function* () {
          const decodedToken = yield this.getDecodedRefreshedAccessToken();

          if (decodedToken) {
            yield __classPrivateFieldGet(this, _Authentication_notification, "f").init({
              authHost: __classPrivateFieldGet(this, _Authentication_config, "f").authHost,
              clientId: __classPrivateFieldGet(this, _Authentication_config, "f").clientId,
              firmId: decodedToken.firmId,
              userId: decodedToken.userId,
              uniqueSession: !!__classPrivateFieldGet(this, _Authentication_config, "f").uniqueSession,
              hooks: __classPrivateFieldGet(this, _Authentication_config, "f").hooks
            });
          }
        });

        this.destroyNotification = () => {
          __classPrivateFieldGet(this, _Authentication_notification, "f").destroy();
        };

        this.login = noPrompt => __awaiter(this, void 0, void 0, function* () {
          const done = yield this.checkAuthCode();

          if (done && !!__classPrivateFieldGet(this, _Authentication_accessToken, "f")) {
            return __classPrivateFieldGet(this, _Authentication_accessToken, "f");
          } else {
            const code_verifier = createRandomString(64);
            const state = createRandomString(6); //* store verifier into browser session for later auth-code exchange

            window.sessionStorage.setItem(state, code_verifier);
            const {
              code_challenge,
              code_challenge_method
            } = yield createCodeChallenge(code_verifier);

            const scope = __classPrivateFieldGet(this, _Authentication_config, "f").scopes.join(',');

            const prompt = noPrompt ? 'none' : '';
            const url = `${__classPrivateFieldGet(this, _Authentication_config, "f").authHost}/oauth/authorize?response_type=code&scope=${scope}&client_id=${__classPrivateFieldGet(this, _Authentication_config, "f").clientId}&redirect_uri=${encodeURIComponent(window.location.href)}&code_challenge=${encodeURIComponent(code_challenge)}&code_challenge_method=${code_challenge_method}&state=${state}&prompt=${prompt}`;
            window.location.assign(url);
            return;
          }
        });

        this.logout = (force = false, redirectUrl) => {
          __classPrivateFieldSet(this, _Authentication_accessToken, undefined, "f");

          const redirectUri = encodeURIComponent(redirectUrl || window.location.href);
          window.location.href = `${__classPrivateFieldGet(this, _Authentication_config, "f").authHost}/oauth/logout?force=${force}&redirect_uri=${redirectUri}`;

          __classPrivateFieldGet(this, _Authentication_destroyRefreshAccessTokenProcess, "f").call(this);
        };

        this.getAccessToken = () => {
          if (__classPrivateFieldGet(this, _Authentication_accessToken, "f") === undefined || !__classPrivateFieldGet(this, _Authentication_accessToken, "f")) {
            return '';
          } else {
            return __classPrivateFieldGet(this, _Authentication_accessToken, "f");
          }
        };

        this.getRefreshedAccessToken = () => __awaiter(this, void 0, void 0, function* () {
          if (__classPrivateFieldGet(this, _Authentication_accessToken, "f") === undefined || !__classPrivateFieldGet(this, _Authentication_accessToken, "f")) {
            return '';
          } else {
            //* check whether there is a refresh token and whether access token is expired
            //* if it does, we refresh the token
            if (__classPrivateFieldGet(this, _Authentication_refreshInfo, "f") && __classPrivateFieldGet(this, _Authentication_refreshInfo, "f").accessTokenExpireIn) {
              const decoded = __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, __classPrivateFieldGet(this, _Authentication_accessToken, "f"));

              if (!!decoded && (decoded.exp - SECONDS_BEFORE_EXPIRE) * 1000 < Date.now()) {
                const data = yield __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").renewAccessToken({
                  refreshToken: __classPrivateFieldGet(this, _Authentication_refreshInfo, "f").refreshToken,
                  verifier: __classPrivateFieldGet(this, _Authentication_refreshInfo, "f").verifier
                });

                if (data) {
                  if (data.refresh_token && data.expires_in) {
                    __classPrivateFieldSet(this, _Authentication_refreshInfo, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_refreshInfo, "f")), {
                      refreshToken: data.refresh_token,
                      accessTokenExpireIn: data.expires_in
                    }), "f");
                  }

                  __classPrivateFieldSet(this, _Authentication_accessToken, data.access_token, "f");

                  yield this.triggerHooks(HookName.afterRefreshToken);
                  return __classPrivateFieldGet(this, _Authentication_accessToken, "f");
                }
              }
            }

            return __classPrivateFieldGet(this, _Authentication_accessToken, "f");
          }
        }); //todo: need to replace the return type "any"


        this.getDecodedAccessToken = () => {
          if (!__classPrivateFieldGet(this, _Authentication_accessToken, "f")) {
            return undefined;
          }

          return __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, __classPrivateFieldGet(this, _Authentication_accessToken, "f"));
        }; //todo: need to replace the return type "any"


        this.getDecodedRefreshedAccessToken = () => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            return undefined;
          }

          return __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, token);
        });

        this.getHooks = () => {
          if (__classPrivateFieldGet(this, _Authentication_config, "f")) {
            return __classPrivateFieldGet(this, _Authentication_config, "f").hooks;
          } else {
            return undefined;
          }
        };

        this.setHook = params => {
          const {
            name,
            callback
          } = params;

          if (!Object.values(HookName).find(h => h === name)) {
            throw Error('Unsupported hook: ' + name);
          }

          if (!lodash.isFunction(callback)) {
            throw Error('hook must be a function: ' + name);
          }

          __classPrivateFieldSet(this, _Authentication_config, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_config, "f")), {
            hooks: Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_config, "f").hooks), {
              [name]: callback
            })
          }), "f");

          if (name === HookName.uniqueSessionTrigger) {
            __classPrivateFieldGet(this, _Authentication_notification, "f").setUniqueSessionTriggerHook(callback);
          }

          return;
        };

        this.autoLogin = () => {
          return __classPrivateFieldGet(this, _Authentication_config, "f") ? __classPrivateFieldGet(this, _Authentication_config, "f").autoLogin || false : false;
        };

        this.autoLogout = () => {
          return __classPrivateFieldGet(this, _Authentication_config, "f") ? __classPrivateFieldGet(this, _Authentication_config, "f").autoLogin || false : false;
        };

        this.idleTimeoutInMinutes = () => {
          return __classPrivateFieldGet(this, _Authentication_config, "f") ? __classPrivateFieldGet(this, _Authentication_config, "f").idleTimeoutInMinutes || 30 : 30;
        };

        this.checkTokenInUrl = () => {
          const accessTokenQuery = getQueryParameter('access_token') || getQueryParameter('auth') || getQueryParameter('authToken') || getQueryParameter('token') || getQueryParameter('jwt');

          if (accessTokenQuery) {
            const {
              aud,
              firmId,
              userId
            } = __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, accessTokenQuery); //* we make an exception to allow tokens from LD put in URLs to bypass authentication
            //* we need to have this exception for LD 2.3 (https://leapdev.atlassian.net/browse/AUTH-269)


            if (!!firmId && !!userId && aud === '8MBJWOFS4RRRSZQC') {
              const queryParameterValue = accessTokenQuery;
              let myselfWithoutToken = deleteQueryParameter(window.location.href, 'access_token', queryParameterValue);
              myselfWithoutToken = deleteQueryParameter(myselfWithoutToken, 'token', queryParameterValue);
              myselfWithoutToken = deleteQueryParameter(myselfWithoutToken, 'auth', queryParameterValue);
              myselfWithoutToken = deleteQueryParameter(myselfWithoutToken, 'authToken', queryParameterValue);
              myselfWithoutToken = deleteQueryParameter(myselfWithoutToken, 'jwt', queryParameterValue);
              const myselfEncoded = encodeURIComponent(myselfWithoutToken);
              window.location.href = __classPrivateFieldGet(this, _Authentication_config, "f").authHost + '/oauth/passthrough?token=' + queryParameterValue + '&redirect=' + myselfEncoded;
              return true;
            }

            return false;
          }

          return false;
        };

        this.verifySession = () => __awaiter(this, void 0, void 0, function* () {
          const code_verifier = createRandomString(64);
          const state = createRandomString(6); //* store verifier into browser session for later auth-code exchange

          window.sessionStorage.setItem(state, code_verifier);
          const {
            code_challenge,
            code_challenge_method
          } = yield createCodeChallenge(code_verifier);

          const scope = __classPrivateFieldGet(this, _Authentication_config, "f").scopes.join(',');

          const redirectUri = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
          const url = `${__classPrivateFieldGet(this, _Authentication_config, "f").authHost}/oauth/authorize?response_type=code&response_mode=web_message&scope=${scope}&client_id=${__classPrivateFieldGet(this, _Authentication_config, "f").clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&code_challenge=${encodeURIComponent(code_challenge)}&code_challenge_method=${code_challenge_method}&state=${state}&prompt=none`;
          const resp = yield this.runIframe(url, state);

          if (resp && resp.state) {
            const verifier = window.sessionStorage.getItem(resp.state);
            window.sessionStorage.removeItem(resp.state);

            if (resp.code && verifier) {
              return __classPrivateFieldGet(this, _Authentication_exchangeAuthCodeForAccessToken, "f").call(this, {
                code: resp.code,
                verifier,
                redirectUri
              });
            }

            return false;
          } else {
            return false;
          }
        });

        this.checkAuthCode = () => __awaiter(this, void 0, void 0, function* () {
          const search = window.location.search;
          const queryParams = new URLSearchParams(search);
          const code = queryParams.get('code');
          const state = queryParams.get('state'); //* check if "AuthCode" comes back from AuthServer

          if (!!code && !!state) {
            const verifier = window.sessionStorage.getItem(state);
            window.sessionStorage.removeItem(state);
            let newUrl = window.location.href;
            newUrl = deleteQueryParameter(newUrl, 'code', code);
            newUrl = deleteQueryParameter(newUrl, 'state', state);
            window.history.pushState(null, '', newUrl); //* use the Verifier and AuthCode to exchange for AccessToken

            return __classPrivateFieldGet(this, _Authentication_exchangeAuthCodeForAccessToken, "f").call(this, {
              code,
              verifier,
              redirectUri: newUrl
            });
          } else {
            return false;
          }
        });

        this.getUserInfo = () => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();
          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").userInfo(token);
        });

        this.linkUser = params => __awaiter(this, void 0, void 0, function* () {
          const decodeToken = yield this.getDecodedRefreshedAccessToken();

          if (!decodeToken) {
            return;
          }

          const redirectUrl = params.redirectUrl || window.location.href;

          __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").linkUser({
            redirectUrl,
            jti: decodeToken.jti,
            newWindow: params.newWindow,
            callback: params.callback
          });
        });

        this.unlinkUser = params => __awaiter(this, void 0, void 0, function* () {
          const decodeToken = yield this.getDecodedRefreshedAccessToken();

          if (!decodeToken) {
            return;
          }

          const redirectUrl = params.redirectUrl || window.location.href;

          __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").unlinkUser({
            redirectUrl,
            jti: decodeToken.jti,
            newWindow: params.newWindow,
            callback: params.callback
          });
        });

        this.getCloudProviderToken = jti => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").getCloudProviderToken(token, jti);
        });

        this.cloudProviderUserInfo = () => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").cloudProviderUserInfo(token);
        });

        this.cloudProviderReauthenticate = params => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          let {
            nonce,
            redirectUrl
          } = params;
          const {
            newWindow,
            callback
          } = params;
          redirectUrl = redirectUrl || window.location.href;

          if (!nonce) {
            const reauthticateLink = yield __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").cloudProviderReauthenticateLink(token);
            nonce = reauthticateLink.nonce;
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").cloudProviderReauthenticate({
            redirectUrl,
            nonce,
            newWindow,
            callback
          });
        });

        this.cloudProviderUpdate = cloudProviderId => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          const decodedToken = __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, token);

          const {
            firmId
          } = decodedToken;
          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").cloudProviderUpdate({
            firmId,
            cloudProviderId,
            token: token
          });
        });

        this.statusAdminConsent = () => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").statusAdminConsent(token);
        });

        this.getAdminConsent = params => {
          const redirectUrl = params.redirectUrl || window.location.href;

          __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").getAdminConsent(Object.assign(Object.assign({}, params), {
            redirectUrl
          }));
        };

        this.revokeAdminConsent = () => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").revokeAdminConsent(token);
        });

        this.getLinkMap = (allUsers = false) => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").getLinkMap(token, allUsers);
        });

        this.setLinkMap = linkMap => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          const verifyFormat = () => {
            if (Array.isArray(linkMap)) {
              for (const link of linkMap) {
                if (!(link.internalUser && link.externalUser && link.externalUser.id)) return false;
              }

              return true;
            }

            return false;
          };

          if (!verifyFormat()) throw Error('linkmap in wrong format');
          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").setLinkMap(token, linkMap);
        });

        this.authoriseSupport = params => __awaiter(this, void 0, void 0, function* () {
          const token = yield this.getRefreshedAccessToken();

          if (!token) {
            throw Error('Not authenticated yet');
          }

          return __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").authoriseSupport(token, params);
        });

        this.changePassword = params => {
          const redirectUrl = params.redirectUrl || window.location.href;

          __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").changePassword(Object.assign(Object.assign({}, params), {
            redirectUrl
          }));
        };

        this.passthrough = params => __awaiter(this, void 0, void 0, function* () {
          const decodedToken = yield this.getDecodedRefreshedAccessToken();

          if (decodedToken && decodedToken.jti) {
            const {
              url,
              newWindow,
              authHost
            } = params;
            const encodedRedirectUrl = encodeURIComponent(url);
            const passthroughUrl = `${authHost || __classPrivateFieldGet(this, _Authentication_config, "f").authHost}/oauth/passthrough?jti=${decodedToken.jti}&redirect=${encodedRedirectUrl}&output=embed`;

            if (newWindow) {
              window.open(passthroughUrl, '_blank');
            } else {
              window.location.assign(passthroughUrl);
            }
          }

          return;
        });

        this.triggerHooks = hookName => __awaiter(this, void 0, void 0, function* () {
          const hooks = this.getHooks();
          const token = yield this.getRefreshedAccessToken();
          const hookFn = hooks && !!hooks[hookName] && lodash.isFunction(hooks[hookName]) ? hooks[hookName](token) : false;
          return Promise.resolve(hookFn);
        });

        this.afterAuthenticated = () => {
          return this.triggerHooks(HookName.afterLogin).then(() => __awaiter(this, void 0, void 0, function* () {
            yield this.initNotification();
            return __classPrivateFieldGet(this, _Authentication_accessToken, "f");
          }));
        };

        this.runIframe = (authorizeUrl, state, timeoutInSeconds = DEFAULT_AUTHORIZE_TIMEOUT_IN_SECONDS) => {
          return new Promise((res, rej) => {
            const iframe = window.document.createElement('iframe');
            iframe.setAttribute('width', '0');
            iframe.setAttribute('height', '0');
            iframe.setAttribute('id', 'agent-iframe');
            iframe.style.display = 'none';

            const removeIframe = () => {
              if (window.document.body.contains(iframe)) {
                window.document.body.removeChild(iframe);
                window.removeEventListener('message', iframeEventHandler, false);
              }
            };

            const timeoutSetTimeoutId = setTimeout(() => {
              rej('agent-iframe timeout');
              removeIframe();
              window.sessionStorage.removeItem(state);
            }, timeoutInSeconds * 1000);

            const iframeEventHandler = e => {
              const {
                data,
                origin,
                source
              } = e;
              if (origin !== __classPrivateFieldGet(this, _Authentication_config, "f").authHost) return;
              if (!data || data.type !== 'authorization_response') return;

              if (source) {
                source.close();
              }

              res(data.response);
              clearTimeout(timeoutSetTimeoutId);
              window.removeEventListener('message', iframeEventHandler, false);
              setTimeout(removeIframe, CLEANUP_IFRAME_TIMEOUT_IN_SECONDS * 1000);
            };

            window.addEventListener('message', iframeEventHandler, false);
            window.document.body.appendChild(iframe);
            iframe.setAttribute('src', authorizeUrl);
          });
        };

        _Authentication_exchangeAuthCodeForAccessToken.set(this, params => __awaiter(this, void 0, void 0, function* () {
          const {
            verifier,
            code,
            redirectUri
          } = params;

          if (verifier) {
            const data = yield __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").exchangeAuthCodeForAccessToken({
              code,
              verifier,
              redirectUri
            });
            const redirectTriggered = yield __classPrivateFieldGet(this, _Authentication_verifyAndPerformRedirections, "f").call(this, data.access_token);

            if (redirectTriggered) {
              return true;
            }

            if (data.refresh_token && data.expires_in) {
              __classPrivateFieldSet(this, _Authentication_refreshInfo, {
                refreshToken: data.refresh_token,
                accessTokenExpireIn: data.expires_in,
                verifier: verifier,
                timer: undefined
              }, "f");

              if (__classPrivateFieldGet(this, _Authentication_config, "f").autoRefreshToken) {
                __classPrivateFieldGet(this, _Authentication_startRefreshAccessTokenProcess, "f").call(this);
              }
            } //* store access token in memory


            __classPrivateFieldSet(this, _Authentication_accessToken, data.access_token, "f");

            return true;
          } else {
            return false;
          }
        }));

        _Authentication_verifyAndPerformRedirections.set(this, accessToken => __awaiter(this, void 0, void 0, function* () {
          const redirectionConfig = yield __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").getRedirections();
          const origin = window.location.origin;

          const decodedToken = __classPrivateFieldGet(this, _Authentication_decodeAccessToken, "f").call(this, accessToken);

          const redirectUri = getRedirectUri(origin, decodedToken, redirectionConfig);

          if (redirectUri) {
            this.logout(false, redirectUri);
            return true;
          }

          return false;
        }));

        _Authentication_startRefreshAccessTokenProcess.set(this, () => {
          if (!__classPrivateFieldGet(this, _Authentication_refreshInfo, "f")) {
            return;
          }

          if (__classPrivateFieldGet(this, _Authentication_refreshInfo, "f").timer) {
            clearTimeout(__classPrivateFieldGet(this, _Authentication_refreshInfo, "f").timer);

            __classPrivateFieldSet(this, _Authentication_refreshInfo, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_refreshInfo, "f")), {
              timer: undefined
            }), "f");
          }

          const waitBeforeExecuting = (__classPrivateFieldGet(this, _Authentication_refreshInfo, "f").accessTokenExpireIn - SECONDS_BEFORE_EXPIRE) * 1000; //* the max for setTimeout delay is 2147483647 ms or 24.855 days
          //* if token expire time is greater than the max, we ignore the refresh process as it is not realistic to let browser open more than 24 days and wait for token got refreshed.

          if (waitBeforeExecuting > MAX_SETTIME_OUT) {
            return;
          }

          const timer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _Authentication_refreshInfo, "f")) {
              return;
            }

            const data = yield __classPrivateFieldGet(this, _Authentication_leapAuthService, "f").renewAccessToken({
              refreshToken: __classPrivateFieldGet(this, _Authentication_refreshInfo, "f").refreshToken,
              verifier: __classPrivateFieldGet(this, _Authentication_refreshInfo, "f").verifier
            });

            if (data) {
              if (data.refresh_token && data.expires_in) {
                __classPrivateFieldSet(this, _Authentication_refreshInfo, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_refreshInfo, "f")), {
                  refreshToken: data.refresh_token,
                  accessTokenExpireIn: data.expires_in
                }), "f");

                __classPrivateFieldGet(this, _Authentication_startRefreshAccessTokenProcess, "f").call(this);
              }

              __classPrivateFieldSet(this, _Authentication_accessToken, data.access_token, "f");

              yield this.triggerHooks(HookName.afterRefreshToken);
            }
          }), waitBeforeExecuting);

          __classPrivateFieldSet(this, _Authentication_refreshInfo, Object.assign(Object.assign({}, __classPrivateFieldGet(this, _Authentication_refreshInfo, "f")), {
            timer
          }), "f");
        });

        _Authentication_destroyRefreshAccessTokenProcess.set(this, () => {
          if (!__classPrivateFieldGet(this, _Authentication_refreshInfo, "f")) {
            return;
          }

          if (__classPrivateFieldGet(this, _Authentication_refreshInfo, "f").timer) {
            clearTimeout(__classPrivateFieldGet(this, _Authentication_refreshInfo, "f").timer);
          }

          __classPrivateFieldSet(this, _Authentication_refreshInfo, undefined, "f");
        });

        _Authentication_decodeAccessToken.set(this, accessToken => {
          if (!accessToken) {
            return undefined;
          }

          const payload = accessToken.split('.')[1];

          if (payload) {
            try {
              const result = window.atob(payload);
              return JSON.parse(result);
            } catch (e) {
              throw Error('Fail to decode access token.');
            }
          }

          return undefined;
        });

        __classPrivateFieldSet(this, _Authentication_accessToken, undefined, "f");

        __classPrivateFieldSet(this, _Authentication_config, init$1(options), "f");

        __classPrivateFieldSet(this, _Authentication_leapAuthService, new LeapAuthService(__classPrivateFieldGet(this, _Authentication_config, "f").authHost, __classPrivateFieldGet(this, _Authentication_config, "f").clientId), "f");

        __classPrivateFieldSet(this, _Authentication_notification, new Notification(), "f");
      }

    }
    _Authentication_accessToken = new WeakMap(), _Authentication_config = new WeakMap(), _Authentication_leapAuthService = new WeakMap(), _Authentication_notification = new WeakMap(), _Authentication_refreshInfo = new WeakMap(), _Authentication_exchangeAuthCodeForAccessToken = new WeakMap(), _Authentication_verifyAndPerformRedirections = new WeakMap(), _Authentication_startRefreshAccessTokenProcess = new WeakMap(), _Authentication_destroyRefreshAccessTokenProcess = new WeakMap(), _Authentication_decodeAccessToken = new WeakMap();

    var _IdleTimer_timeoutInMinutes, _IdleTimer_timer, _IdleTimer_onTimeout, _IdleTimer_cleanUpTracker, _IdleTimer_clearTimeout, _IdleTimer_resetTimer;
    class IdleTimer {
      constructor(params) {
        _IdleTimer_timeoutInMinutes.set(this, void 0);

        _IdleTimer_timer.set(this, void 0);

        _IdleTimer_onTimeout.set(this, void 0);

        this.tracker = () => {
          window.addEventListener('onload', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.addEventListener('mousemove', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.addEventListener('onmousedown', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.addEventListener('onscroll', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.addEventListener('onkeypress', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
        };

        _IdleTimer_cleanUpTracker.set(this, () => {
          window.removeEventListener('onload', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.removeEventListener('mousemove', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.removeEventListener('onmousedown', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.removeEventListener('onscroll', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
          window.removeEventListener('onkeypress', __classPrivateFieldGet(this, _IdleTimer_resetTimer, "f"), true);
        });

        _IdleTimer_clearTimeout.set(this, () => {
          if (__classPrivateFieldGet(this, _IdleTimer_timer, "f")) {
            clearTimeout(__classPrivateFieldGet(this, _IdleTimer_timer, "f"));
          }
        });

        _IdleTimer_resetTimer.set(this, () => {
          __classPrivateFieldGet(this, _IdleTimer_clearTimeout, "f").call(this);

          __classPrivateFieldSet(this, _IdleTimer_timer, setTimeout(() => {
            __classPrivateFieldGet(this, _IdleTimer_clearTimeout, "f").call(this);

            __classPrivateFieldGet(this, _IdleTimer_cleanUpTracker, "f").call(this);

            __classPrivateFieldGet(this, _IdleTimer_onTimeout, "f").call(this);
          }, __classPrivateFieldGet(this, _IdleTimer_timeoutInMinutes, "f") * 60 * 1000), "f");
        });

        const {
          timeoutInMinutes,
          onTimeout: onTimeout
        } = params;

        __classPrivateFieldSet(this, _IdleTimer_timeoutInMinutes, timeoutInMinutes, "f");

        __classPrivateFieldSet(this, _IdleTimer_onTimeout, onTimeout, "f");
      }

    }
    _IdleTimer_timeoutInMinutes = new WeakMap(), _IdleTimer_timer = new WeakMap(), _IdleTimer_onTimeout = new WeakMap(), _IdleTimer_cleanUpTracker = new WeakMap(), _IdleTimer_clearTimeout = new WeakMap(), _IdleTimer_resetTimer = new WeakMap();

    let auth;

    const init = options => __awaiter(void 0, void 0, void 0, function* () {
      auth = new Authentication(options);

      if (!auth) {
        return false;
      }

      if (auth.autoLogout()) {
        const timeoutInMinutes = auth.idleTimeoutInMinutes();
        const idleTimer = new IdleTimer({
          timeoutInMinutes,
          onTimeout: logout
        });
        idleTimer.tracker();
      } //* we need to have this exception for LD 2.3 (https://leapdev.atlassian.net/browse/AUTH-269)


      const passthrough = auth.checkTokenInUrl();

      if (passthrough) {
        return false;
      } //* check if authCode in URL


      const done = yield auth.checkAuthCode();

      if (done) {
        return auth.afterAuthenticated();
      } //* check if there is an existing auth session


      const hasAuthSession = yield verifySession();

      if (hasAuthSession) {
        return auth.afterAuthenticated();
      }

      const autoLogin = auth.autoLogin();

      if (autoLogin) {
        yield login();
      }

      return true;
    });

    const verifySession = () => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      return yield auth.verifySession();
    });

    const getAccessToken = () => {
      return !auth ? '' : auth.getAccessToken();
    };

    const getRefreshedAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
      return !auth ? '' : yield auth.getRefreshedAccessToken();
    });

    const login = () => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.login().then(token => {
        return token && auth ? auth.afterAuthenticated() : undefined;
      });
    });

    const logout = (force = false, redirectUrl) => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.triggerHooks(HookName.beforeLogout).then(() => {
        if (auth) {
          auth.destroyNotification();
          auth.logout(force, redirectUrl);
        }

        return;
      }).catch(function (err) {
        console.error('Error while logging out : ', err);
        throw Error(err);
      });
    });

    const registerHook = (hookName, callback) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      if (auth) {
        auth.setHook({
          name: hookName,
          callback
        });
      }

      return;
    };

    const getDecodedAccessToken = () => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.getDecodedAccessToken();
    };

    const getDecodedRefreshedAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      return yield auth.getDecodedRefreshedAccessToken();
    });

    const userInfo = () => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.getUserInfo();
    };

    const linkUser = (redirectUrl, newWindow, callback) => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      yield auth.linkUser({
        redirectUrl,
        newWindow,
        callback
      });
    });

    const unlinkUser = (redirectUrl, newWindow, callback) => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      yield auth.unlinkUser({
        redirectUrl,
        newWindow,
        callback
      });
    });

    const getCloudProviderToken = jti => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.getCloudProviderToken(jti);
    };

    const cloudProviderUserInfo = () => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.cloudProviderUserInfo();
    };

    const cloudProviderReauthenticate = (nonce, redirectUrl, newWindow, callback) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.cloudProviderReauthenticate({
        redirectUrl,
        nonce,
        newWindow,
        callback
      });
    };

    const cloudProviderUpdate = cloudProviderId => {
      if (!auth) {
        throw Error('Not init yet');
      }

      if (!cloudProviderId) {
        throw Error('cloudProviderId is required');
      }

      return auth.cloudProviderUpdate(cloudProviderId);
    };

    const statusAdminConsent = () => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.statusAdminConsent();
    };

    const getAdminConsent = (domain, redirectUrl, newWindow, callback) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      auth.getAdminConsent({
        domain,
        redirectUrl,
        newWindow,
        callback
      });
    };

    const revokeAdminConsent = () => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.revokeAdminConsent();
    };

    const getLinkMap = allUsers => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.getLinkMap(allUsers);
    };

    const setLinkMap = linkMap => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.setLinkMap(linkMap);
    };

    const authoriseSupport = (code, duration) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      return auth.authoriseSupport({
        code,
        duration
      });
    };

    const changePassword = (redirectUrl, newWindow, callback) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      auth.changePassword({
        redirectUrl,
        newWindow,
        callback
      });
    };

    const registerEventListener = (topic, messageType, callback) => {
      if (!auth) {
        throw Error('Not init yet');
      }

      auth.registerEventListenerForUserChannel({
        topic,
        messageType,
        callback
      });
    };

    const passthrough = (url, newWindow = false, authHost) => __awaiter(void 0, void 0, void 0, function* () {
      if (!auth) {
        throw Error('Not init yet');
      }

      yield auth.passthrough({
        url,
        newWindow,
        authHost
      });
    });

    const AuthAgent = {
      init,
      registerHook,
      login,
      logout,
      getAccessToken,
      getRefreshedAccessToken,
      getDecodedAccessToken,
      getDecodedRefreshedAccessToken,
      userInfo,
      linkUser,
      unlinkUser,
      getCloudProviderToken,
      cloudProviderUserInfo,
      cloudProviderReauthenticate,
      cloudProviderUpdate,
      statusAdminConsent,
      getAdminConsent,
      revokeAdminConsent,
      getLinkMap,
      setLinkMap,
      authoriseSupport,
      changePassword,
      registerEventListener,
      passthrough
    };

    exports.AuthAgent = AuthAgent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
